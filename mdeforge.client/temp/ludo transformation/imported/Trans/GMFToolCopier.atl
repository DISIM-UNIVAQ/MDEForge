-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

rule ToolRegistry {
 from s : INMODEL!ToolRegistry (thisModule.inElements->includes(s))
 to t : OUTMODEL!ToolRegistry (
 sharedActions <- s.sharedActions,
 allMenus <- s.allMenus,
 palette <- s.palette)
}

rule PaletteSeparator {
 from s : INMODEL!PaletteSeparator (thisModule.inElements->includes(s))
 to t : OUTMODEL!PaletteSeparator (
 title <- s.title,
 description <- s.description,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon)
}

rule ToolGroup {
 from s : INMODEL!ToolGroup (thisModule.inElements->includes(s))
 to t : OUTMODEL!ToolGroup (
 title <- s.title,
 description <- s.description,
 collapsible <- s.collapsible,
 stack <- s.stack,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon,
 tools <- s.tools,
 active <- s.active)
}

rule Palette {
 from s : INMODEL!Palette (thisModule.inElements->includes(s))
 to t : OUTMODEL!Palette (
 title <- s.title,
 description <- s.description,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon,
 tools <- s.tools,
 default <- s.default)
}

rule StandardTool {
 from s : INMODEL!StandardTool (thisModule.inElements->includes(s))
 to t : OUTMODEL!StandardTool (
 title <- s.title,
 description <- s.description,
 toolKind <- s.toolKind,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon)
}

rule CreationTool {
 from s : INMODEL!CreationTool (thisModule.inElements->includes(s))
 to t : OUTMODEL!CreationTool (
 title <- s.title,
 description <- s.description,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon)
}

rule GenericTool {
 from s : INMODEL!GenericTool (thisModule.inElements->includes(s))
 to t : OUTMODEL!GenericTool (
 title <- s.title,
 description <- s.description,
 toolClass <- s.toolClass,
 smallIcon <- s.smallIcon,
 largeIcon <- s.largeIcon)
}

rule Separator {
 from s : INMODEL!Separator (thisModule.inElements->includes(s))
 to t : OUTMODEL!Separator (
 name <- s.name)
}

rule PredefinedItem {
 from s : INMODEL!PredefinedItem (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!PredefinedItem)
 else false endif)
 to t : OUTMODEL!PredefinedItem (
 identifier <- s.identifier)
}

rule PredefinedMenu {
 from s : INMODEL!PredefinedMenu (thisModule.inElements->includes(s))
 to t : OUTMODEL!PredefinedMenu (
 identifier <- s.identifier,
 items <- s.items)
}

rule MenuAction {
 from s : INMODEL!MenuAction (thisModule.inElements->includes(s))
 to t : OUTMODEL!MenuAction (
 title <- s.title,
 kind <- s.kind,
 hotKey <- s.hotKey,
 icon <- s.icon)
}

rule ItemRef {
 from s : INMODEL!ItemRef (thisModule.inElements->includes(s))
 to t : OUTMODEL!ItemRef (
 item <- s.item)
}

rule ContextMenu {
 from s : INMODEL!ContextMenu (thisModule.inElements->includes(s))
 to t : OUTMODEL!ContextMenu (
 items <- s.items,
 default <- s.default)
}

rule PopupMenu {
 from s : INMODEL!PopupMenu (thisModule.inElements->includes(s))
 to t : OUTMODEL!PopupMenu (
 title <- s.title,
 iD <- s.iD,
 items <- s.items,
 icon <- s.icon)
}

rule MainMenu {
 from s : INMODEL!MainMenu (thisModule.inElements->includes(s))
 to t : OUTMODEL!MainMenu (
 title <- s.title,
 items <- s.items)
}

rule Toolbar {
 from s : INMODEL!Toolbar (thisModule.inElements->includes(s))
 to t : OUTMODEL!Toolbar (
 items <- s.items)
}

rule DefaultImage {
 from s : INMODEL!DefaultImage (thisModule.inElements->includes(s))
 to t : OUTMODEL!DefaultImage ()
}

rule BundleImage {
 from s : INMODEL!BundleImage (thisModule.inElements->includes(s))
 to t : OUTMODEL!BundleImage (
 path <- s.path,
 bundle <- s.bundle)
}

rule GenericStyleSelector {
 from s : INMODEL!GenericStyleSelector (thisModule.inElements->includes(s))
 to t : OUTMODEL!GenericStyleSelector (
 values <- s.values)
}

