module MMD2ATL; -- Module Template
create OUT : ATL from IN : KM3;

helper context KM3!Package def: allClasses() : Sequence(KM3!Class) =
	self.contents->select(e |
		e.oclIsKindOf(KM3!Package)
	)->iterate(e; acc : Sequence(KM3!Class) = self.contents->select(e |
							e.oclIsKindOf(KM3!Class)
						)->iterate(e; acc : Sequence(KM3!Class) = Sequence {} |
							acc->including(e)
						) |
		acc->union(e.allClasses())
	);

helper context KM3!Metamodel def: allClasses() : Sequence(KM3!Class) =
	self.contents->iterate(e; acc : Sequence(KM3!Class) = Sequence {} |
		acc->union(e.allClasses())
	);

helper context KM3!Metamodel def: getMetamodelName : String  =
	self.contents->select(e| not( e.oclIsKindOf(KM3!Package) and e.name = 'PrimitiveTypes') )->first().name.regexReplaceAll('Diff','');



-- Creates an ATL transformation module from a KM3 metamodel.
rule Metamodel {
	from
		s : KM3!Metamodel
	to
		mm1 : ATL!OclModel (
			name <- s.getMetamodelName
		),
		
		mm2 : ATL!OclModel (
			name <- s.getMetamodelName+'Diff'
		),
		
		mm3 : ATL!OclModel (
			name <- 'DA'
		),
		
		t : ATL!Module (
			name <- s.getMetamodelName+'Diff2'+s.getMetamodelName,
			outModels <- Sequence {tm},
			inModels <- Sequence {sm1, sm2, sm3},
			--isRefining <- false,
			elements <- s.allClasses()->select(e | not e.isAbstract)
		),
		sm1 : ATL!OclModel (
			name <- 'IN1',
			metamodel <- mm1
		),
		
		sm2 : ATL!OclModel (
			name <- 'IN2',
			metamodel <- mm2
		),
		
		sm3 : ATL!OclModel (
			name <- 'IN3',
			metamodel <- mm3
		),
		
		tm : ATL!OclModel (
			name <- 'OUT',
			metamodel <- mm1
		)
}

helper context KM3!Class def: allStructuralFeatures() : Set(KM3!StructuralFeature) =
	self.supertypes->iterate(e; acc : Set(KM3!StructuralFeature) = self.structuralFeatures |
		acc->union(e.allStructuralFeatures())
	);




-------------------------------------------------------------------------------
------------------------ UnchangedClass management ----------------------------
-------------------------------------------------------------------------------

rule CreateUnchangedHelper (n : OclAny){
	to


		----------------------
		-- isChanged Helper --
		----------------------
		t: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- od
		),
		
		od : ATL!OclFeatureDefinition (
			  feature <- of,
			  context_ <- con
			),
		
		con : ATL!OclContextDefinition (
			context_ <- me,
			definition <- od
		),
			
		me : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			name <- thisModule.resolveTemp(n,'ipet').name
		),
		
		of : ATL!Attribute (
			name <- 'isChanged',
			type<- at,
			initExpression <- ifCond
		),
		
		at : ATL!BooleanType (
		),
		
		ifCond : ATL!IteratorExp (
			source<-oper2If,
			name<-'exists',
			body<-daExistsCH,
			iterators<-iteratorIf
		),
		
		oper2If : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIf,
			arguments<-strIf
		),

		srcIf : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm2'),
			name <- 'Changed'+thisModule.resolveTemp(n,'opet').name
			--name <- s.type.name
		),
		
		strIf: ATL!StringExp (
			stringSymbol<-'IN2'
		),
		
		daExistsCH: ATL!IteratorExp (
			source<-daIfAppCH,
			name<-'exists',
			body<-andDAppCH,
			iterators<-iteratorIfDAppCH
		),
		
		daIfAppCH : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcDaAppCH,
			arguments<-strDaAppCH
		),
		
		srcDaAppCH : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm3'),
			name <- 'ApplicationWLink'				
		),
		
		strDaAppCH: ATL!StringExp (
			stringSymbol<-'IN3'
		),
		 
		andDAppCH : ATL!OperatorCallExp (
			operationName<-'and',
			arguments<- rightAndDAppCH,
			source<-leftAndDAppCH
		),
		
		
		iteratorIf : ATL!Iterator(
			varName<-'e'
		),
		
		rightAndDAppCH : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp2CH,
			source<-leftVar1IfDApp2CH
		),
		
		
		leftVar1IfDApp2CH : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp2CH,
			name<-'id'
		),
				
		leftVar2IfDApp2CH : ATL!VariableExp (
			referredVariable<-selfVarIfDApp2CH
		),
		
		selfVarIfDApp2CH : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp2CH,
			varName<-'self'
		),
				
		iteratorIfDApp2CH : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDApp2CH
		),
		
		rightVarIfDApp2CH : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp3CH
		),
		
		rightVarIfDApp3CH: ATL!NavigationOrAttributeCallExp (
			name<-'left',
			source<-rightVar2IfDApp2CH
		),
		
		rightVar2IfDApp2CH : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDApp2CH
		),
		
		leftAndDAppCH : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDAppCH,
			source<-leftVar1IfDAppCH
		),
		
		leftVar1IfDAppCH : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDAppCH,
			name<-'id'
		),
				
		leftVar2IfDAppCH : ATL!VariableExp (
			referredVariable<-selfVarIfDAppCH
		),
		
		selfVarIfDAppCH : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDAppCH,
			varName<-'e'
		),
				
		iteratorIfDAppCH : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDAppCH
		),
		
		rightVarIfDAppCH : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp4CH
		),
		
		rightVarIfDApp4CH : ATL!NavigationOrAttributeCallExp (
			name<-'right',
			source<-rightVar2IfDAppCH
		),
		
		rightVar2IfDAppCH : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDAppCH
		),
		
		
		
		----------------------
		-- isDeleted Helper --
		----------------------
		t2: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- odDel
		),
		
		odDel : ATL!OclFeatureDefinition (
			  feature <- ofDel,
			  context_ <- conDel
			),
		
		conDel : ATL!OclContextDefinition (
			context_ <- meDel,
			definition <- odDel
		),
			
		meDel : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			name <- thisModule.resolveTemp(n,'ipet').name
		),
		
		ofDel : ATL!Attribute (
			name <- 'isDeleted',
			type<- atDel,
			initExpression <- ifCondDel
		),
		
		atDel : ATL!BooleanType (
		),
		
		ifCondDel : ATL!IteratorExp (
			source<-oper2IfDel,
			name<-'exists',
			body<-oper3IfDel,
			iterators<-iteratorIfDApp2Del
		),
		
		oper2IfDel : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIfDel,
			arguments<-strIfDel
		),

		srcIfDel : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm2'),
			name <- 'Deleted'+thisModule.resolveTemp(n,'opet').name
			--name <- s.type.name
		),
		
		strIfDel: ATL!StringExp (
			stringSymbol<-'IN2'
		),
		
		oper3IfDel: ATL!IteratorExp (
			source<-daIfAppDel,
			name<-'exists',
			body<-andDAppDel,
			iterators<-iteratorIfDAppDel
		),
		
		daIfAppDel : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcDaAppDel,
			arguments<-strDaAppDel
		),
		
		srcDaAppDel : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm3'),
			name <- 'ApplicationWLink'				
		),
		
		strDaAppDel: ATL!StringExp (
			stringSymbol<-'IN3'
		),
		 
		andDAppDel : ATL!OperatorCallExp (
			operationName<-'and',
			arguments<- rightAndDAppDel,
			source<-leftAndDAppDel
		),
		
		rightAndDAppDel : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp2Del,
			source<-leftVar1IfDApp2Del
		),
		
		leftVar1IfDApp2Del : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp2Del,
			name<-'id'
		),
				
		leftVar2IfDApp2Del : ATL!VariableExp (
			referredVariable<-selfVarIfDApp2Del
		),
		
		selfVarIfDApp2Del : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp2Del,
			varName<-'e'
		),
				
		iteratorIfDApp2Del : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2IfDApp2Del
		),
		
		rightVarIfDApp2Del : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp3Del
		),
		
		rightVarIfDApp3Del : ATL!NavigationOrAttributeCallExp (
			name<-'right',
			source<-rightVar2IfDApp2Del
		),
		
		
		rightVar2IfDApp2Del : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDAppDel
		),
		
		leftAndDAppDel : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDAppDel,
			source<-leftVar1IfDAppDel
		),
		
		
		leftVar1IfDAppDel : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDAppDel,
			name<-'id'
		),
				
		leftVar2IfDAppDel : ATL!VariableExp (
			referredVariable<-selfVarIfDAppDel
		),
		
		selfVarIfDAppDel : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDAppDel,
			varName<-'self'
		),
				
		iteratorIfDAppDel : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDAppDel
		),
		
		rightVarIfDAppDel : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp4Del
		),
		
		rightVarIfDApp4Del : ATL!NavigationOrAttributeCallExp (
			name<-'left',
			source<-rightVar2IfDAppDel
		),
		
		
		rightVar2IfDAppDel : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDAppDel
		),
		
		
		----------------------
		-- isApplied Helper --
		----------------------
		t3: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- appDef
		),
		
		appDef : ATL!OclFeatureDefinition (
			  feature <- appFeature,
			  context_ <- conApp
			),
		
		conApp : ATL!OclContextDefinition (
			context_ <- con2App,
			definition <- appDef
		),
			
		con2App : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm2'),
			name <- 'Changed'+thisModule.resolveTemp(n,'opet').name
		),
		
		appFeature : ATL!Attribute (
			name <- 'isApplied',
			type<- typeApp,
			initExpression <- ifCondApp
		),
		
		typeApp : ATL!BooleanType (
		),
		
		ifCondApp : ATL!IteratorExp (
			source<-oper2IfApp,
			name<-'exists',
			body<-daExists,
			iterators<-iteratorIfApp
		),
		
		daExists: ATL!IteratorExp (
			source<-daIfApp,
			name<-'exists',
			body<-andDApp,
			iterators<-iteratorDa
		),
		
		daIfApp : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcDaApp,
			arguments<-strDaApp
		),
		
		srcDaApp : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm3'),
			name <- 'ApplicationWLink'				
		),
		
		strDaApp: ATL!StringExp (
			stringSymbol<-'IN3'
		),
		 
		andDApp : ATL!OperatorCallExp (
			operationName<-'and',
			arguments<- rightAndDApp,
			source<-leftAndDApp
		),
		
		rightAndDApp : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp2,
			source<-leftVar1IfDApp2
		),
		
		
		leftVar1IfDApp2 : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp2,
			name<-'id'
		),
				
		leftVar2IfDApp2 : ATL!VariableExp (
			referredVariable<-selfVarIfDApp2
		),
		
		selfVarIfDApp2 : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp2,
			varName<-'e'
		),
				
		iteratorIfDApp2 : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDApp2
		),
		
		rightVarIfDApp2 : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp3
		),
		
		rightVarIfDApp3 : ATL!NavigationOrAttributeCallExp (
			name<-'left',
			source<-rightVar2IfDApp2
		),
		
		
		rightVar2IfDApp2 : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDApp2
		),
		
		leftAndDApp : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp,
			source<-leftVar1IfDApp
		),
		
		
		leftVar1IfDApp : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp,
			name<-'id'
		),
				
		leftVar2IfDApp : ATL!VariableExp (
			referredVariable<-selfVarIfDApp
		),
		
		selfVarIfDApp : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp,
			varName<-'self'
		),
				
		iteratorIfDApp : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDApp
		),
		
		rightVarIfDApp : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp4
		),
		
		rightVarIfDApp4 : ATL!NavigationOrAttributeCallExp (
			name<-'right',
			source<-rightVar2IfDApp
		),
		
		rightVar2IfDApp : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDApp
		),
		
		oper2IfApp : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIfApp,
			arguments<-strIfApp
		),

		srcIfApp : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'opet').model,
			name <- thisModule.resolveTemp(n,'opet').name
				--name <- s.type.name
		),
		
		strIfApp: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		leftIfApp : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfApp,
			source<-leftVar1IfApp
		),
		
		oper3IfApp : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfApp,
			source<-leftVar1IfApp
		),
		
		
		leftVar1IfApp : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfApp,
			name<-'id'
		),
				
		leftVar2IfApp : ATL!VariableExp (
			referredVariable<-selfVarIfApp
		--	name<-'self'			
		),
		
		selfVarIfApp : ATL!VariableDeclaration(
			variableExp<-leftVar2IfApp,
			varName<-'self'
		),
				
		iteratorDa : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2Da
		),
		
		iteratorIfApp : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2IfApp
		),
		
		rightVarIfApp : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2IfApp
		),
		
		
		rightVar2IfApp : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfApp
		),
		
		rightVar2Da : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorDa
		),

		---------------------------
		-- getApplied<MC> Helper --
		---------------------------
		t4: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- appDefGetAppl
		),
		
		appDefGetAppl : ATL!OclFeatureDefinition (
			  feature <- appFeatureGetAppl,
			  context_ <- conAppGetAppl
			),
		
		conAppGetAppl : ATL!OclContextDefinition (
			context_ <- con2AppGetAppl,
			definition <- appDefGetAppl
		),
			
		con2AppGetAppl : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm2'),
			name <- 'Changed'+thisModule.resolveTemp(n,'opet').name
		),
		
		
		appFeatureGetAppl : ATL!Attribute (
			name <- 'getApplied'+n.name.regexReplaceAll('Changed',''),
			initExpression <- NotUndefinedGetAppl,
			type<-apptype
		),
		
		apptype : ATL!OclModelElement (
			name <- thisModule.resolveTemp(n,'opet').name,
			model<- thisModule.resolveTemp(n,'ipet').model
		),
		

		NotUndefinedGetAppl : ATL!IfExp (
			condition <- ifCondNotUndefGetAppl,
			thenExpression <-ExpApplGetAppl,
			elseExpression <- elseStateNotUndefGetAppl
		),
		
		
		ExpApplGetAppl: ATL!OperationCallExp (
			operationName<-'first',
			source<- thenGetAppl
		),
		
		
		thenGetAppl: ATL!IteratorExp (
			source<-oper2IfGetAppl,
			name<-'select',
			body<-daExistsGetAppl,
			iterators<-iteratorIfGetAppl
		),
		
			
		elseStateNotUndefGetAppl :  ATL!OclUndefinedExp,
	
		
		ifCondNotUndefGetAppl : ATL!IteratorExp (
			source<-oper2IfGetAppl2,
			name<-'exists',
			body<-daExistsGetAppl2,
			iterators<-iteratorIfGetAppl2
		),
		
		
		
		
		oper2IfGetAppl2 : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIfGetAppl2,
			arguments<-strIfGetAppl2
		),

		srcIfGetAppl2 : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm1'),
			name <- thisModule.resolveTemp(n,'opet').name
		),
		
		strIfGetAppl2: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		daExistsGetAppl2: ATL!IteratorExp (
			source<-daIfAppGetAppl2,
			name<-'exists',
			body<-andDAppGetAppl2,
			iterators<-iteratorIfDAppGetAppl2
		),
		
		daIfAppGetAppl2 : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcDaAppGetAppl2,
			arguments<-strDaAppGetAppl2
		),
		
		srcDaAppGetAppl2 : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm3'),
			name <- 'ApplicationWLink'				
		),
		
		strDaAppGetAppl2: ATL!StringExp (
			stringSymbol<-'IN3'
		),
		 
		andDAppGetAppl2 : ATL!OperatorCallExp (
			operationName<-'and',
			arguments<- rightAndDAppGetAppl2,
			source<-leftAndDAppGetAppl2
		),
		
		
		iteratorIfGetAppl2 : ATL!Iterator(
			varName<-'e'
		),
		
		rightAndDAppGetAppl2 : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp2GetAppl2,
			source<-leftVar1IfDApp2GetAppl2
		),
		
		
		leftVar1IfDApp2GetAppl2 : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp2GetAppl2,
			name<-'id'
		),
				
		leftVar2IfDApp2GetAppl2 : ATL!VariableExp (
			referredVariable<-selfVarIfDApp2GetAppl2
		),
		
		selfVarIfDApp2GetAppl2 : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp2GetAppl2,
			varName<-'self'
		),
					
		iteratorIfDApp2GetAppl2 : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDApp2GetAppl2
		),
		
		rightVarIfDApp2GetAppl2 : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp3GetAppl2
		),
		
		rightVarIfDApp3GetAppl2: ATL!NavigationOrAttributeCallExp (
			name<-'right',
			source<-rightVar2IfDApp2GetAppl2
		),
		
		
		rightVar2IfDApp2GetAppl2 : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDApp2GetAppl2
		),
		
		leftAndDAppGetAppl2 : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDAppGetAppl2,
			source<-leftVar1IfDAppGetAppl2
		),
		
		
		leftVar1IfDAppGetAppl2 : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDAppGetAppl2,
			name<-'id'
		),
				
		leftVar2IfDAppGetAppl2 : ATL!VariableExp (
			referredVariable<-selfVarIfDAppGetAppl2
		),
		
		selfVarIfDAppGetAppl2 : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDAppGetAppl2,
			varName<-'e'
		),
				
		iteratorIfDAppGetAppl2 : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDAppGetAppl2
		),
		
		rightVarIfDAppGetAppl2 : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp4GetAppl2
		),
		
		rightVarIfDApp4GetAppl2 : ATL!NavigationOrAttributeCallExp (
			name<-'left',
			source<-rightVar2IfDAppGetAppl2
		),
		
		
		rightVar2IfDAppGetAppl2 : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIfDAppGetAppl2
		),
		
		oper2IfGetAppl : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIfGetAppl,
			arguments<-strIfGetAppl
		),

		srcIfGetAppl : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm1'),
			name <- thisModule.resolveTemp(n,'opet').name
		),
		
		strIfGetAppl: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		daExistsGetAppl: ATL!IteratorExp (
			source<-daIfAppGetAppl,
			name<-'exists',
			body<-andDAppGetAppl,
			iterators<-iteratorIfDAppGetAppl
		),
		
		daIfAppGetAppl : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcDaAppGetAppl,
			arguments<-strDaAppGetAppl
		),
		
		srcDaAppGetAppl : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n.package.metamodel,'mm3'),
			name <- 'ApplicationWLink'				
		),
		
		strDaAppGetAppl: ATL!StringExp (
			stringSymbol<-'IN3'
		),
		 
		andDAppGetAppl : ATL!OperatorCallExp (
			operationName<-'and',
			arguments<- rightAndDAppGetAppl,
			source<-leftAndDAppGetAppl
		),
		
		
		iteratorIfGetAppl : ATL!Iterator(
			varName<-'e'
		),
		
		rightAndDAppGetAppl : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDApp2GetAppl,
			source<-leftVar1IfDApp2GetAppl
		),
		
		
		leftVar1IfDApp2GetAppl : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDApp2GetAppl,
			name<-'id'
		),
				
		leftVar2IfDApp2GetAppl : ATL!VariableExp (
			referredVariable<-selfVarIfDApp2GetAppl
		),
		
		selfVarIfDApp2GetAppl : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDApp2GetAppl,
			varName<-'self'
		),
					
		iteratorIfDApp2GetAppl : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDApp2GetAppl
		),
		
		rightVarIfDApp2GetAppl : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp3GetAppl
		),
		
		rightVarIfDApp3GetAppl: ATL!NavigationOrAttributeCallExp (
			name<-'right',
			source<-rightVar2IfDApp2GetAppl
		),
		
		
		rightVar2IfDApp2GetAppl : ATL!VariableExp (
			referredVariable<-iteratorIfDApp2GetAppl
		),
		
		leftAndDAppGetAppl : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIfDAppGetAppl,
			source<-leftVar1IfDAppGetAppl
		),
		
		
		leftVar1IfDAppGetAppl : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2IfDAppGetAppl,
			name<-'id'
		),
				
		leftVar2IfDAppGetAppl : ATL!VariableExp (
			referredVariable<-selfVarIfDAppGetAppl
		),
		
		selfVarIfDAppGetAppl : ATL!VariableDeclaration(
			variableExp<-leftVar2IfDAppGetAppl,
			varName<-'e'
		),
				
		iteratorIfDAppGetAppl : ATL!Iterator(
			varName<-'l',
			variableExp<- rightVar2IfDAppGetAppl
		),
		
		rightVarIfDAppGetAppl : ATL!NavigationOrAttributeCallExp (
			name<-'ref',
			source<-rightVarIfDApp4GetAppl
		),
		
		rightVarIfDApp4GetAppl : ATL!NavigationOrAttributeCallExp (
			name<-'left',
			source<-rightVar2IfDAppGetAppl
		),
		
		
		rightVar2IfDAppGetAppl : ATL!VariableExp (
			referredVariable<-iteratorIfDAppGetAppl
		)
		
	do {
		t;
		t2;
		t3;
		t4;
	}
}


-------------------------------------------------------------------------------
-------------------------- ChangedClass management ----------------------------
-------------------------------------------------------------------------------

rule CreateChangedSimpleAttributeHelper (s : OclAny, n : OclAny){
	to

		
		------------------------------------------------
		-- getChanged<MC><attribute|reference> Helper --
		------------------------------------------------
		t: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- od
		),
		
		od : ATL!OclFeatureDefinition (
			  feature <- of,
			  context_ <- con
			),
		
		con : ATL!OclContextDefinition (
			context_ <- me,
			definition <- od
		),
			
		me : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			name <- thisModule.resolveTemp(n,'ipet').name
		),
		
		of : ATL!Attribute (
			name <- 'get'+n.name+s.name,
			initExpression <- NotUndefined
		),
		
		at : ATL!BooleanType (
		),
		
		at2 : ATL!StringType(
			
		),

		NotUndefined : ATL!IfExp (
			condition <- ifCondNotUndef,
			thenExpression <-Exp,
			elseExpression <- elseStateNotUndef
		),
		
		
		elseStateNotUndef :  ATL!OclUndefinedExp,
		
		
		ifCondNotUndef : ATL!OperatorCallExp (
			operationName<-'not',
			source<-notUndef
		),
		
		notUndef:  ATL!OperationCallExp(
			operationName<-'oclIsUndefined',
			source<-upDatedEl
		),
		
		upDatedEl:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-varUndef
		),
		
		varUndef : ATL!VariableExp (
			referredVariable<- varDecUndef
		--	name<-'self'			
		),
		
		varDecUndef : ATL!VariableDeclaration(
			variableExp<-varUndef,
			varName<-'self'
		),

				
		Exp : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-upDatedElIf
		),
		
		upDatedElIf:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-leftVar3If
		),
		
		leftVar3If : ATL!VariableExp (
			referredVariable<-selfVarIf
		--	name<-'self'			
		),
		
		selfVarIf : ATL!VariableDeclaration(
			variableExp<-leftVar3If,
			varName<-'self'
		)
				
		
		
	do {
		if (s.type.toString()='km3Model!String') {
			of.type<-at2;
		} else {
				of.type<-at;
		 		}
		t;
	}
}




rule CreateChangedHelper (s : OclAny, n : OclAny){
	to
		t: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- od
		),
		
		od : ATL!OclFeatureDefinition (
			  feature <- of,
			  context_ <- con
			),
		
		con : ATL!OclContextDefinition (
			context_ <- me,
			definition <- od
		),
			
		me : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			name <- thisModule.resolveTemp(n,'ipet').name
		),
		
		of : ATL!Attribute (
			name <- 'get'+n.name+s.name,
			type<- at,
			initExpression <- NotUndefined
		),
		
		at : ATL!OclModelElement (
			name <- s.type.name,
			model<- thisModule.resolveTemp(n,'opet').model
		),

		NotUndefined : ATL!IfExp (
			condition <- ifCondNotUndef,
			thenExpression <-ifExp,
			elseExpression <- elseStateNotUndef
		),
		
		
		elseStateNotUndef : ATL!OclUndefinedExp, 
		
		
		ifCondNotUndef : ATL!OperatorCallExp (
			operationName<-'not',
			source<-notUndef
		),
		
		notUndef:  ATL!OperationCallExp(
			operationName<-'oclIsUndefined',
			source<-elementUndef
		),
		

		
		elementUndef : ATL!NavigationOrAttributeCallExp (
			name <- s.name,
			source <- upDatedEl
		),
		
		upDatedEl:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-varUndef
		),
		
		varUndef : ATL!VariableExp (
			referredVariable<- varDecUndef
		--	name<-'self'			
		),
		
		varDecUndef : ATL!VariableDeclaration(
			variableExp<-varUndef,
			varName<-'self'
		),
		
		ifExp : ATL!IfExp (
			condition <- ifCond,
			thenExpression <-oper,
			elseExpression <- operElseDefined
		),
				
		ifCond : ATL!IteratorExp (
			source<-oper2If,
			name<-'exists',
			body<-oper3If,
			iterators<-iteratorIf
		),
		
		oper2If : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIf,
			arguments<-strIf
		),

		srcIf : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'opet').model,
			--name <- thisModule.resolveTemp(n,'opet').name,
			name <- s.type.name
		),
		
		strIf: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		oper3If : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIf,
			source<-leftVar1If
		),
		
		
		leftVar1If : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2If,
			name<-'id'
		),
				
		leftVar2If : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-upDatedElIf
		),
		
		upDatedElIf:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-leftVar3If
		),
		
		leftVar3If : ATL!VariableExp (
			referredVariable<-selfVarIf
		--	name<-'self'			
		),
		
		selfVarIf : ATL!VariableDeclaration(
			variableExp<-leftVar3If,
			varName<-'self'
		),
				
		iteratorIf : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2If
		),
		
		rightVarIf : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2If
		),
		
		rightVar2If : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIf
		),
		
		
		
		oper : ATL!OperationCallExp (
			operationName<-'first',
			source<- iter
		),

		iter : ATL!IteratorExp (
			source<-oper2,
			name<-'select',
			body<-oper3,
			iterators<-iterator3
		),
		
		oper2 : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-src,
			arguments<-str
		),

		src : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'opet').model,
			name <- s.type.name
		),
		
		str: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		oper3 : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVar,
			source<-leftVar1
		),
		
		
		leftVar1 : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2,
			name<-'id'
		),
		
		
		leftVar2 : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-upDatedElSel
		),
		
		upDatedElSel:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-leftVar3
		),
		
		leftVar3 : ATL!VariableExp (
			referredVariable<-selfVar
		--	name<-'self'			
		),
		
		selfVar : ATL!VariableDeclaration(
			variableExp<-leftVar3,
			varName<-'self'
		),
		
		
		iterator3 : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2
		),

		
		rightVar : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2
		),
		
		rightVar2 : ATL!VariableExp (
		--	name<- iterator.varName,
			referredVariable<-iterator3
		),
		
		--------

		operElseDefined : ATL!OperationCallExp (
			operationName<-'first',
			source<- iterElseDefined
		),

		iterElseDefined : ATL!IteratorExp (
			source<-oper2ElseDefined,
			name<-'select',
			body<-oper3ElseDefined,
			iterators<-iteratorElseDefined
		),
		
		oper2ElseDefined : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcElseDefined,
			arguments<-strElseDefined
		),

		srcElseDefined : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			--name <- thisModule.resolveTemp(n,'opet').name,
			name <- s.type.name
		),
		
		strElseDefined: ATL!StringExp (
			stringSymbol<-'IN2'
		),
		
		oper3ElseDefined : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarElseDefined,
			source<-leftVar1ElseDefined
		),
		
		
		leftVar1ElseDefined : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2ElseDefined,
			name<-'id'
		),
				
		leftVar2ElseDefined : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-upDatedElElseDefined
		),
		
		upDatedElElseDefined:  ATL!NavigationOrAttributeCallExp(
			name<-'upDatedElement',
			source<-leftVar3ElseDefined
		),
		
		leftVar3ElseDefined : ATL!VariableExp (
			referredVariable<-selfVarElseDefined
		--	name<-'self'			
		),
		
		selfVarElseDefined : ATL!VariableDeclaration(
			variableExp<-leftVar3ElseDefined,
			varName<-'self'
		),
				
		iteratorElseDefined : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2ElseDefined
		),
		
		rightVarElseDefined : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2ElseDefined
		),
		
		rightVar2ElseDefined: ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorElseDefined
		)
		
	do {
		t;
	}
}


rule ChangedClass {
	from
		s : KM3!Class (
			not s.isAbstract and s.name.startsWith('Changed')
		)
	using { 
			
		newHelper : Sequence (ATL!Helper) = OclUndefined;

		allSfs : Set(KM3!StructuralFeature) = s.allStructuralFeatures();
		-- selecting features to keep
		sfsSimpleAttribute : Set(KM3!StructuralFeature) =
			allSfs->select(sa |
				if sa.oclIsKindOf(KM3!Attribute) then
					if (sa.type.toString()='km3Model!String') then
					true
					else 
						if (sa.type.toString()='km3Model!Boolean') then
							true
						else 
							if (sa.type.toString()='km3Model!Integer')  then
								true
							else
								false
							endif
						endif
					endif
				else
					false
				endif );
			
		sfsNonContainerRelation: Set(KM3!StructuralFeature) =
			allSfs->select(ca |
				if (ca.oclIsKindOf(KM3!Reference)) then
						if (not ca.isContainer) then 
						--ca.opposite.oclIsUndefined() 
						
						   if not (ca.upper='-1') then
								if not (ca.name = 'upDatedElement') then
									true
								else
									false
								endif
							else 
								false
							endif
						else 
							false
						endif
				else
					false
				endif);
		
		sfsContainerRelation: Set(KM3!StructuralFeature) =
			allSfs->select(ca |
				if (ca.oclIsKindOf(KM3!Reference)) then
						if (ca.isContainer) then 
						--ca.opposite.oclIsUndefined() 
							true
						else 
							false
						endif
				else
					false
				endif);
	}
	to
		t : ATL!MatchedRule (
			isAbstract <- false,
			--isRefining <- false,
			name <- s.name +'2'+s.name.regexReplaceAll('Changed',''),
			inPattern <- ip,
			outPattern <- op
		),

		-- Creating the source pattern
		ip : ATL!InPattern (
			elements <- Sequence {ipe},
			filter <- fand
		),
		ipe : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet
		),
			
		ipet : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.resolveTemp(s.package.metamodel,'mm2')
		),
		
	    fand : ATL!OperatorCallExp (
	  		operationName<-'and',
			source<-f,
			arguments<-fandapplied
	    ),
	  
	    fandapplied : ATL!OperatorCallExp (
			operationName<-'and',
			source<-fnot,
			arguments<-fisapplied
  	    ),
	  
	    fisapplied : ATL!NavigationOrAttributeCallExp(
			name<-'isApplied',
			source<-varIsApplied
		),
	  
		varIsApplied : ATL!VariableExp (
			referredVariable <- ipe
		),
		
	    fnot : ATL!OperatorCallExp (
			operationName<-'not',
			source<-notUndef
	    ),
		
		notUndef:  ATL!OperationCallExp(
			operationName<-'oclIsUndefined',
			source<-elementUndef
		),
		
		elementUndef : ATL!NavigationOrAttributeCallExp (
			name <- 'upDatedElement',
			source <- varUndef
		),
		
		varUndef :  ATL!VariableExp (
			--name <- 's',
			referredVariable <- ipe
		),
		   
		
		f : ATL!OperationCallExp (
			operationName <- 'oclIsTypeOf',
			source <- fv,
			arguments <- Sequence {ft}
		),
		fv : ATL!VariableExp (
			--name <- 's',
			referredVariable <- ipe
		),
		ft : ATL!OclModelElement (
			name <- s.name,
--			model <- thisModule.metamodel
			model <- thisModule.resolveTemp(s.package.metamodel,'mm2')
		),

		-- Creating the target pattern.
		op : ATL!OutPattern (
			elements <- Sequence {ope}
		),
		ope : ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- opet,
			bindings <- Sequence {bsa, bca, bcr}
			--, bca}
		),
		opet : ATL!OclModelElement (
			name <- s.name.regexReplaceAll('Changed',''),
			model<- thisModule.resolveTemp(s.package.metamodel,'mm1')
		),

		-- Now generating the bindings for each structural feature that needs
		-- to be initialized in the rule.
		bsa : distinct ATL!Binding foreach(sfsa in sfsSimpleAttribute) (
			propertyName <- sfsa.name,
			value <- vsa
		),
		vsa : distinct ATL!NavigationOrAttributeCallExp foreach(sfsa in sfsSimpleAttribute) (
			name <- 'get'+s.name+sfsa.name,
			source <- srcsa
		),
		srcsa : distinct ATL!VariableExp foreach(sfsa in sfsSimpleAttribute) (
		--	name <- 's',
			referredVariable <- ipe
		),
		

		--"Non Container" Relation
		bca : distinct ATL!Binding foreach(sfca in sfsNonContainerRelation) (
			propertyName <- sfca.name,
			value <- vca
		),
		vca : distinct ATL!NavigationOrAttributeCallExp foreach(sfca in sfsNonContainerRelation) (
			name <- 'get'+s.name+sfca.name,
			source <- srcca
		),
		srcca : distinct ATL!VariableExp foreach(sfca in sfsNonContainerRelation) (
		--	name <- 's',
			referredVariable <- ipe
		),
		
		
		-- "Container" Relation
		bcr : distinct ATL!Binding foreach(sfcr in sfsContainerRelation) (
			propertyName <- sfcr.name,
			value <- vcr
		),
		
		vcr : distinct ATL!SequenceExp foreach(sfcr in sfsContainerRelation) (
			--it should be elements <- vcr3.append(vcr2)
			elements <- vcr3

		),
		
--		vcr2 : distinct ATL!NavigationOrAttributeCallExp foreach(sfcr in sfsContainerRelation) (
--			name <- sfcr.name,
--			source <- srccr2
--		),
--		srccr2 : distinct ATL!VariableExp foreach(sfcr in sfsContainerRelation) (
--			referredVariable <- ipe
--		),
		
		
		vcr3 : distinct ATL!NavigationOrAttributeCallExp foreach(sfcr in sfsContainerRelation) (
			name <- sfcr.name,
			source <- gavcr3
		),
		
		gavcr3 : distinct ATL!NavigationOrAttributeCallExp foreach(sfcr in sfsContainerRelation) (
			name <- 'getApplied'+s.name.regexReplaceAll('Changed',''),
			source <- srccr3
		),
		
		srccr3 : distinct ATL!VariableExp foreach(sfcr in sfsContainerRelation) (
			referredVariable <- ipe
		)

	
	do {
		for(e in sfsNonContainerRelation) {
			newHelper<- thisModule.CreateChangedHelper(e,s);
		}
		
		for(e in sfsSimpleAttribute) {
			newHelper<- thisModule.CreateChangedSimpleAttributeHelper(e,s);
		}
	
		 
	}
		
}


-------------------------------------------------------------------------------
--------------------------- AddedClass management -----------------------------
-------------------------------------------------------------------------------
rule CreateAddedHelper (s : OclAny, n : OclAny){
	to
		t: ATL!Helper  (
			  module <- thisModule.resolveTemp(n.package.metamodel,'t'),
			  definition <- od
		),
		
		od : ATL!OclFeatureDefinition (
			  feature <- of,
			  context_ <- con
			),
		
		con : ATL!OclContextDefinition (
			context_ <- me,
			definition <- od
		),
			
		me : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'ipet').model,
			name <- thisModule.resolveTemp(n,'ipet').name
		),
		
		of : ATL!Attribute (
			name <- 'get'+n.name+s.name,
			type<- at,
			initExpression <- NotUndefined
		),
		
		at : ATL!OclModelElement (
			name <- s.type.name,
			model<- thisModule.resolveTemp(n,'opet').model
		),

		NotUndefined : ATL!IfExp (
			condition <- ifCondNotUndef,
			thenExpression <-ifExp,
			elseExpression <- elseStateNotUndef
		),
		
		elseStateNotUndef : ATL!OclUndefinedExp,

		
		ifCondNotUndef : ATL!OperatorCallExp (
			operationName<-'not',
			source<-notUndef
		),
		
		notUndef:  ATL!OperationCallExp(
			operationName<-'oclIsUndefined',
			source<-elementUndef
		),
		

		elementUndef : ATL!NavigationOrAttributeCallExp (
			name <- s.name,
			source <- varUndef
		),
	
		
		varUndef : ATL!VariableExp (
			referredVariable<- varDecUndef
		--	name<-'self'			
		),
		
		varDecUndef : ATL!VariableDeclaration(
			variableExp<-varUndef,
			varName<-'self'
		),
		
		ifExp : ATL!IfExp (
			condition <- ifCond,
			thenExpression <-oper,
			elseExpression <- elseState
		),
				
		ifCond : ATL!IteratorExp (
			source<-oper2If,
			name<-'exists',
			body<-oper3If,
			iterators<-iteratorIf
		),
		
		oper2If : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-srcIf,
			arguments<-strIf
		),

		srcIf : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'opet').model,
			--name <- thisModule.resolveTemp(n,'opet').name,
			name <- s.type.name
		),
		
		strIf: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		oper3If : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVarIf,
			source<-leftVar1If
		),
		
		
		leftVar1If : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2If,
			name<-'id'
		),
				
		leftVar2If : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-leftVar3If
		),
		
		leftVar3If : ATL!VariableExp (
			referredVariable<-selfVarIf
		--	name<-'self'			
		),
		
		selfVarIf : ATL!VariableDeclaration(
			variableExp<-leftVar3If,
			varName<-'self'
		),
				
		iteratorIf : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2If
		),
		
		rightVarIf : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2If
		),
		
		rightVar2If : ATL!VariableExp (
		--	name<- 'e',
			referredVariable<-iteratorIf
		),
		
 		
		elseState : ATL!OclUndefinedExp,
		
		oper : ATL!OperationCallExp (
			operationName<-'first',
			source<- iter
		),

		iter : ATL!IteratorExp (
			source<-oper2,
			name<-'select',
			body<-oper3,
			iterators<-iterator
		),
		
		oper2 : ATL!OperationCallExp (
			operationName<-'allInstancesFrom',
			source<-src,
			arguments<-str
		),

		src : ATL!OclModelElement (
			model<- thisModule.resolveTemp(n,'opet').model,
			name <- s.type.name
		),
		
		str: ATL!StringExp (
			stringSymbol<-'IN1'
		),
		
		oper3 : ATL!OperatorCallExp (
			operationName<-'=',
			arguments<- rightVar,
			source<-leftVar1
		),
		
		
		leftVar1 : ATL!NavigationOrAttributeCallExp (
			source<-leftVar2,
			name<-'id'
		),
		
		
		leftVar2 : ATL!NavigationOrAttributeCallExp (
			name<-s.name,
			source<-leftVar3
		),
		
		leftVar3 : ATL!VariableExp (
			referredVariable<-selfVar			
		),
		
		selfVar : ATL!VariableDeclaration(
			variableExp<-leftVar3,
			varName<-'self'
		),
		
		
		iterator : ATL!Iterator(
			varName<-'e',
			variableExp<- rightVar2
		),

		
		rightVar : ATL!NavigationOrAttributeCallExp (
			name<-'id',
			source<-rightVar2
		),
		
		rightVar2 : ATL!VariableExp (
			referredVariable<-iterator
		)

		
	do {
		t;
	}
}


rule AddedClass {
	from
		s : KM3!Class (
			not s.isAbstract and s.name.startsWith('Added')
		)
	using { 
			
		newHelper : Sequence (ATL!Helper) = OclUndefined;

		allSfs : Set(KM3!StructuralFeature) = s.allStructuralFeatures();
		-- selecting features to keep
		sfsSimpleAttribute : Set(KM3!StructuralFeature) =
			allSfs->select(sa |
				if sa.oclIsKindOf(KM3!Attribute) then
					if (sa.type.toString()='km3Model!String') then
					true
					else 
						if (sa.type.toString()='km3Model!Boolean') then
							true
						else 
							if (sa.type.toString()='km3Model!Integer')  then
								true
							else
								false
							endif
						endif
					endif
				else
					false
				endif );
			
		sfsNonContainerRelation: Set(KM3!StructuralFeature) =
			allSfs->select(ca |
				if (ca.oclIsKindOf(KM3!Reference)) then
						if (not ca.isContainer) then 
						--ca.opposite.oclIsUndefined() 
						
						   if not (ca.upper='-1') then
								true
							else 
								false
							endif
						else 
							false
						endif
				else
					false
				endif);
		
		sfsContainerRelation: Set(KM3!StructuralFeature) =
			allSfs->select(ca |
				if (ca.oclIsKindOf(KM3!Reference)) then
						if (ca.isContainer) then 
						--ca.opposite.oclIsUndefined() 
							true
						else 
							false
						endif
				else
					false
				endif);
	}
	to
		t : ATL!MatchedRule (
			isAbstract <- false,
			--isRefining <- false,
			name <- s.name +'2'+s.name.regexReplaceAll('Added',''),
			inPattern <- ip,
			outPattern <- op
		),

		-- Creating the source pattern  
		ip : ATL!InPattern (
			elements <- Sequence {ipe},
			filter <- f
		),
		ipe : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet
		),
		ipet : ATL!OclModelElement (
			name <- s.name,
			model <- thisModule.resolveTemp(s.package.metamodel,'mm2')
		),
		f : ATL!OperationCallExp (
			operationName <- 'oclIsTypeOf',
			source <- fv,
			arguments <- Sequence {ft}
		),
		fv : ATL!VariableExp (
		--	name <- 's',
			referredVariable <- ipe
		),
		ft : ATL!OclModelElement (
			name <- s.name,
--			model <- thisModule.metamodel
			model <- thisModule.resolveTemp(s.package.metamodel,'mm2')
		),

		-- Creating the target pattern.
		op : ATL!OutPattern (
			elements <- Sequence {ope}
		),
		ope : ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- opet,
			bindings <- Sequence {bsa, bca, bcr}
		),
		opet : ATL!OclModelElement (
			name <- s.name.regexReplaceAll('Added',''),
			model<- thisModule.resolveTemp(s.package.metamodel,'mm1')
		),

		-- Now generating the bindings for each structural feature that needs
		-- to be initialized in the rule.
		
		bsa : distinct ATL!Binding foreach(sfsa in sfsSimpleAttribute) (
			propertyName <- sfsa.name,
			value <- vsa
		),
		vsa : distinct ATL!NavigationOrAttributeCallExp foreach(sfsa in sfsSimpleAttribute) (
			name <- sfsa.name,
			source <- srcsa
		),
		srcsa : distinct ATL!VariableExp foreach(sfsa in sfsSimpleAttribute) (
		--	name <- 's',
			referredVariable <- ipe
		),
		
		 
		--"Non Container" Relation
		bca : distinct ATL!Binding foreach(sfca in sfsNonContainerRelation) (
			propertyName <- sfca.name,
			value <- vca
		),
		vca : distinct ATL!NavigationOrAttributeCallExp foreach(sfca in sfsNonContainerRelation) (
			name <- 'get'+s.name+sfca.name,
			source <- srcca
		),
		srcca : distinct ATL!VariableExp foreach(sfca in sfsNonContainerRelation) (
		--	name <- 's',
			referredVariable <- ipe
		),
		
		
		
		-- "Container" Relation
		bcr : distinct ATL!Binding foreach(sfcr in sfsContainerRelation) (
			propertyName <- sfcr.name,
			value <- vcr
		),
		
		vcr : distinct ATL!NavigationOrAttributeCallExp foreach(sfcr in sfsContainerRelation) (
			name <- sfcr.name,
			source <- srccr
		),
		srccr : distinct ATL!VariableExp foreach(sfcr in sfsContainerRelation) (
		--	name <- 's',
			referredVariable <- ipe
		)
	
	do {
		for(e in sfsNonContainerRelation) {
			newHelper<- thisModule.CreateAddedHelper(e,s);
		}
	}
		
}

--##################################
rule UnchangedClass {
	from
		s : KM3!Class (
			not s.isAbstract and (not s.name.startsWith('Added')) and (not s.name.startsWith('Deleted')) and (not s.name.startsWith('Changed'))
		)
	using {
			
		newHelper : Sequence (ATL!Helper) = OclUndefined;

		allSfs : Set(KM3!StructuralFeature) = s.allStructuralFeatures();
		-- selecting features to keep
		sfs : Set(KM3!StructuralFeature) =
			allSfs->select(e |
				if e.oclIsKindOf(KM3!Attribute) then
					true
				else	-- e.oclIsKindOf(KM3!Reference)
					if e.opposite.oclIsUndefined() then
						true
					else
						if e.opposite.isOrdered then
							false
						else
							true
						endif
					endif
				endif
			);
		
		sfsNonContainerRelation: Set(KM3!StructuralFeature) =
			allSfs->select(ca |
				if (ca.oclIsKindOf(KM3!Reference)) then
						if (not ca.isContainer) then 
						--ca.opposite.oclIsUndefined() 
						
						   if not (ca.upper='-1') then
								true
							else 
								false
							endif
						else 
							false
						endif
				else
					false
				endif);
	}
	to
		t : ATL!MatchedRule (
			isAbstract <- false,
			--isRefining <- false,
--			name <- 'Unchanged'+s.name +'2'+s.name.regexReplaceAll('Added',''),
			name <- 'Unchanged'+s.name +'2'+s.name,
			inPattern <- ip,
			outPattern <- op
		),

		-- Creating the source pattern 
		ip : ATL!InPattern (
			elements <- Sequence {ipe},
			filter <- fand
		),
		ipe : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet
		),
		ipet : ATL!OclModelElement (
			name <- s.name,
--			model <- thisModule.metamodel
			model <- thisModule.resolveTemp(s.package.metamodel,'mm1')
		),
		
		fand : ATL!OperatorCallExp (
	  		operationName<-'and',
			source<-f,
			arguments<-fand2
	 	 ),
		 
		 fand2 : ATL!OperatorCallExp (
	  		operationName<-'and',
			source<-fnotChanged,
			arguments<- fnotDeleted
	 	 ),
		   
		fnotChanged : ATL!OperatorCallExp (
			operationName<-'not',
			source<-changed
		),
		
		changed:  ATL!NavigationOrAttributeCallExp(
			name<-'isChanged',
			source<-varChanged
		),
		
		varChanged :  ATL!VariableExp (
		--	name <- 's',
			referredVariable <- ipe
		),
		
		
		fnotDeleted : ATL!OperatorCallExp (
			operationName<-'not',
			source<-deleted
		),
		
		deleted:  ATL!NavigationOrAttributeCallExp(
			name<-'isDeleted',
			source<-varDeleted
		),
		
		varDeleted :  ATL!VariableExp (
		--	name <- 's',
			referredVariable <- ipe
		),
		
		
		f : ATL!OperationCallExp (
			operationName <- 'oclIsTypeOf',
			source <- fv,
			arguments <- Sequence {ft}
		),
		fv : ATL!VariableExp (
		--	name <- 's',
			referredVariable <- ipe
		),
		ft : ATL!OclModelElement (
			name <- s.name,
--			model <- thisModule.metamodel
			model <- thisModule.resolveTemp(s.package.metamodel,'mm1')
		),

		-- Creating the target pattern.
		op : ATL!OutPattern (
			elements <- Sequence {ope}
		),
		ope : ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- opet,
			bindings <- b
		),
		opet : ATL!OclModelElement (
			name <- s.name,
--			model <- thisModule.metamodel
			model <- thisModule.resolveTemp(s.package.metamodel,'mm1')
		),

		-- Now generating the bindings for each structural feature that needs
		-- to be initialized in the rule.
		b : distinct ATL!Binding foreach(sf in sfs) (
			propertyName <- sf.name,
			value <- v
		),
		v : distinct ATL!NavigationOrAttributeCallExp foreach(sf in sfs) (
			name <- sf.name,
			source <- src
		),
		src : distinct ATL!VariableExp foreach(sf in sfs) (
		--	name <- 's',
			referredVariable <- ipe
		)
		
	do {
			newHelper<- thisModule.CreateUnchangedHelper(s);
	}
		
}

