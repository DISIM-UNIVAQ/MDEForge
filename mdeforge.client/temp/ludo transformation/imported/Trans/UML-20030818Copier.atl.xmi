<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:atl="http://www.eclipse.org/gmt/2005/ATL" xmlns:ocl="http://www.eclipse.org/gmt/2005/OCL">
  <atl:Module location="1:1-2813:2" name="Copy">
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!Expression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!Expression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!Expression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyBooleanExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!BooleanExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!BooleanExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!BooleanExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyTypeExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!TypeExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!TypeExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!TypeExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyMappingExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!MappingExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!MappingExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!MappingExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyProcedureExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ProcedureExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ProcedureExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ProcedureExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyObjectSetExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ObjectSetExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ObjectSetExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ObjectSetExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyActionExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ActionExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ActionExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ActionExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyIterationExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!IterationExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!IterationExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!IterationExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyTimeExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!TimeExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!TimeExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!TimeExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyArgListsExpression {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ArgListsExpression</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ArgListsExpression)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ArgListsExpression (</commentsAfter>
    <commentsAfter>--      language &lt;- s.language,</commentsAfter>
    <commentsAfter>--      body &lt;- s.body</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyUseCase {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!UseCase</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!UseCase)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!UseCase (</commentsAfter>
    <commentsAfter>--      extend &lt;- s.extend,</commentsAfter>
    <commentsAfter>--      include &lt;- s.include,</commentsAfter>
    <commentsAfter>--      extensionPoint &lt;- s.extensionPoint,</commentsAfter>
    <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
    <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
    <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
    <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
    <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
    <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
    <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyActor {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!Actor</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!Actor)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!Actor (</commentsAfter>
    <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
    <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
    <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
    <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
    <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
    <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
    <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyUseCaseInstance {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!UseCaseInstance</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!UseCaseInstance)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!UseCaseInstance (</commentsAfter>
    <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
    <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
    <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
    <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
    <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
    <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyExtend {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!Extend</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!Extend)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!Extend (</commentsAfter>
    <commentsAfter>--      extensionPoint &lt;- s.extensionPoint,</commentsAfter>
    <commentsAfter>--      base &lt;- s.base,</commentsAfter>
    <commentsAfter>--      extension &lt;- s.extension,</commentsAfter>
    <commentsAfter>--      condition &lt;- s.condition,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyInclude {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!Include</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!Include)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!Include (</commentsAfter>
    <commentsAfter>--      base &lt;- s.base,</commentsAfter>
    <commentsAfter>--      addition &lt;- s.addition,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyExtensionPoint {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ExtensionPoint</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ExtensionPoint)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ExtensionPoint (</commentsAfter>
    <commentsAfter>--      useCase &lt;- s.useCase,</commentsAfter>
    <commentsAfter>--      location &lt;- s.location,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyActivityGraph {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ActivityGraph</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ActivityGraph)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ActivityGraph (</commentsAfter>
    <commentsAfter>--      partition &lt;- s.partition,</commentsAfter>
    <commentsAfter>--      context &lt;- s.context,</commentsAfter>
    <commentsAfter>--      transitions &lt;- s.transitions,</commentsAfter>
    <commentsAfter>--      submachineState &lt;- s.submachineState,</commentsAfter>
    <commentsAfter>--      top &lt;- s.top,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyPartition {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!Partition</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!Partition)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!Partition (</commentsAfter>
    <commentsAfter>--      activityGraph &lt;- s.activityGraph,</commentsAfter>
    <commentsAfter>--      contents &lt;- s.contents,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopySubactivityState {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!SubactivityState</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!SubactivityState)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!SubactivityState (</commentsAfter>
    <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
    <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
    <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
    <commentsAfter>--      submachine &lt;- s.submachine,</commentsAfter>
    <commentsAfter>--      subvertex &lt;- s.subvertex,</commentsAfter>
    <commentsAfter>--      isConcurrent &lt;- s.isConcurrent,</commentsAfter>
    <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
    <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
    <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
    <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
    <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
    <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
    <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
    <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
    <commentsAfter>--      container &lt;- s.container,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyActionState {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ActionState</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ActionState)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ActionState (</commentsAfter>
    <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
    <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
    <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
    <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
    <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
    <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
    <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
    <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
    <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
    <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
    <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
    <commentsAfter>--      container &lt;- s.container,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyCallState {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!CallState</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!CallState)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!CallState (</commentsAfter>
    <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
    <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
    <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
    <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
    <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
    <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
    <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
    <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
    <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
    <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
    <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
    <commentsAfter>--      container &lt;- s.container,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyObjectFlowState {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ObjectFlowState</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ObjectFlowState)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ObjectFlowState (</commentsAfter>
    <commentsAfter>--      type &lt;- s.type,</commentsAfter>
    <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
    <commentsAfter>--      isSynch &lt;- s.isSynch,</commentsAfter>
    <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
    <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
    <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
    <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
    <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
    <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
    <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
    <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
    <commentsAfter>--      container &lt;- s.container,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--</commentsAfter>
    <commentsAfter>--rule CopyClassifierInState {</commentsAfter>
    <commentsAfter>--  from</commentsAfter>
    <commentsAfter>--    s : MM1!ClassifierInState</commentsAfter>
    <commentsAfter>--    (</commentsAfter>
    <commentsAfter>--      s.oclIsTypeOf(MM1!ClassifierInState)</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--  to</commentsAfter>
    <commentsAfter>--    t : MM2!ClassifierInState (</commentsAfter>
    <commentsAfter>--      inState &lt;- s.inState,</commentsAfter>
    <commentsAfter>--      type &lt;- s.type,</commentsAfter>
    <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
    <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
    <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
    <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
    <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
    <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
    <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
    <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
    <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
    <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
    <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
    <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
    <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
    <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
    <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
    <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
    <commentsAfter>--      name &lt;- s.name,</commentsAfter>
    <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
    <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
    <commentsAfter>--    )</commentsAfter>
    <commentsAfter>--	do{</commentsAfter>
    <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <commentsAfter>--	}</commentsAfter>
    <inModels location="2:24-2:33" name="IN" metamodel="/2"/>
    <outModels location="2:8-2:18" name="OUT" metamodel="/1"/>
    <elements xsi:type="atl:MatchedRule" location="52:1-100:3" name="CopyClassifierRole">
      <commentsBefore>--rule CopyCollaboration {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Collaboration</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Collaboration)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Collaboration (</commentsBefore>
      <commentsBefore>--      usedCollaboration &lt;- s.usedCollaboration,</commentsBefore>
      <commentsBefore>--      representedClassifier &lt;- s.representedClassifier,</commentsBefore>
      <commentsBefore>--      interaction &lt;- s.interaction,</commentsBefore>
      <commentsBefore>--      constrainingElement &lt;- s.constrainingElement,</commentsBefore>
      <commentsBefore>--      representedOperation &lt;- s.representedOperation,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      --namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <outPattern location="58:3-96:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="59:5-96:6" varName="t" variableExp="/0/@elements.0/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="59:9-59:27" name="ClassifierRole" model="/5"/>
          <bindings location="60:7-60:21" propertyName="base">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="60:15-60:21" name="base">
              <source xsi:type="ocl:VariableExp" location="60:15-60:16" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="61:7-61:47" propertyName="availableContents">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="61:28-61:47" name="availableContents">
              <source xsi:type="ocl:VariableExp" location="61:28-61:29" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="62:7-62:49" propertyName="conformingInstance">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="62:29-62:49" name="conformingInstance">
              <source xsi:type="ocl:VariableExp" location="62:29-62:30" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="63:7-63:45" propertyName="availableFeature">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="63:27-63:45" name="availableFeature">
              <source xsi:type="ocl:VariableExp" location="63:27-63:28" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="64:7-64:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="64:23-64:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="64:23-64:24" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="65:7-65:27" propertyName="feature">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="65:18-65:27" name="feature">
              <source xsi:type="ocl:VariableExp" location="65:18-65:19" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="66:7-66:41" propertyName="powertypeRange">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="66:25-66:41" name="powertypeRange">
              <source xsi:type="ocl:VariableExp" location="66:25-66:26" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="67:7-67:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="67:25-67:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="67:25-67:26" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="68:7-68:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="68:17-68:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="68:17-68:18" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="69:7-69:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="69:17-69:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="69:17-69:18" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="70:7-70:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="70:21-70:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="70:21-70:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="71:7-71:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="71:21-71:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="71:21-71:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="72:7-72:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="72:27-72:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="72:27-72:28" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="73:7-73:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="73:18-73:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="73:18-73:19" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="74:7-74:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="74:21-74:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="74:21-74:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="75:7-75:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="75:21-75:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="75:21-75:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="76:7-76:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="76:21-76:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="76:21-76:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="77:7-77:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="77:28-77:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="77:28-77:29" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="78:7-78:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="78:20-78:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="78:20-78:21" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="79:7-79:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="79:22-79:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="79:22-79:23" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="80:7-80:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="80:15-80:21" name="name">
              <source xsi:type="ocl:VariableExp" location="80:15-80:16" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="81:7-81:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="81:21-81:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="81:21-81:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="82:7-82:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="82:26-82:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="82:26-82:27" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="83:7-83:37" propertyName="ownedElement">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="83:23-83:37" name="ownedElement">
              <source xsi:type="ocl:VariableExp" location="83:23-83:24" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="84:7-84:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="84:21-84:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="84:21-84:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="85:7-85:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="85:27-85:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="85:27-85:28" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="86:7-86:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="86:18-86:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="86:18-86:19" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="87:7-87:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="87:21-87:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="87:21-87:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="88:7-88:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="88:21-88:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="88:21-88:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="89:7-89:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="89:21-89:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="89:21-89:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="90:7-90:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="90:28-90:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="90:28-90:29" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="91:7-91:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="91:20-91:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="91:20-91:21" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="92:7-92:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="92:22-92:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="92:22-92:23" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="93:7-93:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="93:15-93:21" name="name">
              <source xsi:type="ocl:VariableExp" location="93:15-93:16" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="94:7-94:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="94:21-94:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="94:21-94:22" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="95:7-95:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="95:26-95:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="95:26-95:27" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="97:2-99:3">
        <statements xsi:type="atl:ExpressionStat" location="98:3-98:57">
          <expression xsi:type="ocl:OperationCallExp" location="98:3-98:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="98:3-98:4" referredVariable="/0/@elements.0/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="98:27-98:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="98:44-98:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="98:44-98:45" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="53:3-57:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="54:5-54:27" varName="s" variableExp="/0/@elements.0/@inPattern/@filter/@source /0/@elements.0/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.26/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.27/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.28/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.29/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.30/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.31/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.32/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.33/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.34/@value/@source /0/@elements.0/@outPattern/@elements.0/@bindings.35/@value/@source /0/@elements.0/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="54:9-54:27" name="ClassifierRole" model="/3"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="56:7-56:40" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="56:7-56:8" referredVariable="/0/@elements.0/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="56:21-56:39" name="ClassifierRole" model="/4"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="102:1-147:3" name="CopyAssociationRole">
      <commentsAfter>--</commentsAfter>
      <outPattern location="108:3-143:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="109:5-143:6" varName="t" variableExp="/0/@elements.1/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="109:9-109:28" name="AssociationRole" model="/8"/>
          <bindings location="110:7-110:27" propertyName="message">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="110:18-110:27" name="message">
              <source xsi:type="ocl:VariableExp" location="110:18-110:19" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="111:7-111:21" propertyName="base">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="111:15-111:21" name="base">
              <source xsi:type="ocl:VariableExp" location="111:15-111:16" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="112:7-112:41" propertyName="conformingLink">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="112:25-112:41" name="conformingLink">
              <source xsi:type="ocl:VariableExp" location="112:25-112:26" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="113:7-113:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="113:23-113:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="113:23-113:24" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="114:7-114:33" propertyName="connection">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="114:21-114:33" name="connection">
              <source xsi:type="ocl:VariableExp" location="114:21-114:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="115:7-115:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="115:25-115:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="115:25-115:26" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="116:7-116:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="116:17-116:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="116:17-116:18" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="117:7-117:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="117:17-117:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="117:17-117:18" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="118:7-118:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="118:21-118:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="118:21-118:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="119:7-119:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="119:21-119:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="119:21-119:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="120:7-120:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="120:27-120:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="120:27-120:28" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="121:7-121:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="121:18-121:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="121:18-121:19" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="122:7-122:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="122:21-122:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="122:21-122:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="123:7-123:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="123:21-123:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="123:21-123:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="124:7-124:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="124:21-124:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="124:21-124:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="125:7-125:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="125:28-125:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="125:28-125:29" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="126:7-126:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="126:20-126:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="126:20-126:21" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="127:7-127:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="127:22-127:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="127:22-127:23" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="128:7-128:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="128:15-128:21" name="name">
              <source xsi:type="ocl:VariableExp" location="128:15-128:16" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="129:7-129:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="129:21-129:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="129:21-129:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="130:7-130:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="130:26-130:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="130:26-130:27" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="131:7-131:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="131:21-131:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="131:21-131:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="132:7-132:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="132:27-132:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="132:27-132:28" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="133:7-133:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="133:18-133:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="133:18-133:19" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="134:7-134:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="134:21-134:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="134:21-134:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="135:7-135:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="135:21-135:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="135:21-135:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="136:7-136:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="136:21-136:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="136:21-136:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="137:7-137:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="137:28-137:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="137:28-137:29" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="138:7-138:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="138:20-138:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="138:20-138:21" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="139:7-139:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="139:22-139:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="139:22-139:23" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="140:7-140:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="140:15-140:21" name="name">
              <source xsi:type="ocl:VariableExp" location="140:15-140:16" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="141:7-141:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="141:21-141:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="141:21-141:22" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="142:7-142:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="142:26-142:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="142:26-142:27" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="144:2-146:3">
        <statements xsi:type="atl:ExpressionStat" location="145:3-145:57">
          <expression xsi:type="ocl:OperationCallExp" location="145:3-145:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="145:3-145:4" referredVariable="/0/@elements.1/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="145:27-145:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="145:44-145:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="145:44-145:45" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="103:3-107:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="104:5-104:28" varName="s" variableExp="/0/@elements.1/@inPattern/@filter/@source /0/@elements.1/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.26/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.27/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.28/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.29/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.30/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.31/@value/@source /0/@elements.1/@outPattern/@elements.0/@bindings.32/@value/@source /0/@elements.1/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="104:9-104:28" name="AssociationRole" model="/6"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="106:7-106:41" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="106:7-106:8" referredVariable="/0/@elements.1/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="106:21-106:40" name="AssociationRole" model="/7"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="149:1-186:3" name="CopyAssociationEndRole">
      <commentsBefore>--</commentsBefore>
      <commentsAfter>--rule CopyMessage {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Message</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Message)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Message (</commentsAfter>
      <commentsAfter>--      action &lt;- s.action,</commentsAfter>
      <commentsAfter>--      interaction &lt;- s.interaction,</commentsAfter>
      <commentsAfter>--      predecessor &lt;- s.predecessor,</commentsAfter>
      <commentsAfter>--      sender &lt;- s.sender,</commentsAfter>
      <commentsAfter>--      conformingStimulus &lt;- s.conformingStimulus,</commentsAfter>
      <commentsAfter>--      activator &lt;- s.activator,</commentsAfter>
      <commentsAfter>--      communicationConnection &lt;- s.communicationConnection,</commentsAfter>
      <commentsAfter>--      receiver &lt;- s.receiver,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--rule CopyInteraction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Interaction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Interaction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Interaction (</commentsAfter>
      <commentsAfter>--      message &lt;- s.message,</commentsAfter>
      <commentsAfter>--      context &lt;- s.context,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyInteractionInstanceSet {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!InteractionInstanceSet</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!InteractionInstanceSet)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!InteractionInstanceSet (</commentsAfter>
      <commentsAfter>--      context &lt;- s.context,</commentsAfter>
      <commentsAfter>--      interaction &lt;- s.interaction,</commentsAfter>
      <commentsAfter>--      participatingStimulus &lt;- s.participatingStimulus,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--rule CopyCollaborationInstanceSet {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CollaborationInstanceSet</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CollaborationInstanceSet)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CollaborationInstanceSet (</commentsAfter>
      <commentsAfter>--      constrainingElement &lt;- s.constrainingElement,</commentsAfter>
      <commentsAfter>--      interactionInstanceSet &lt;- s.interactionInstanceSet,</commentsAfter>
      <commentsAfter>--      participatingLink &lt;- s.participatingLink,</commentsAfter>
      <commentsAfter>--      participatingInstance &lt;- s.participatingInstance,</commentsAfter>
      <commentsAfter>--      collaboration &lt;- s.collaboration,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <outPattern location="155:3-182:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="156:5-182:6" varName="t" variableExp="/0/@elements.2/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="156:9-156:31" name="AssociationEndRole" model="/11"/>
          <bindings location="157:7-157:49" propertyName="availableQualifier">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="157:29-157:49" name="availableQualifier">
              <source xsi:type="ocl:VariableExp" location="157:29-157:30" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="158:7-158:21" propertyName="base">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="158:15-158:21" name="base">
              <source xsi:type="ocl:VariableExp" location="158:15-158:16" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="159:7-159:63" propertyName="collaborationMultiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="159:36-159:63" name="collaborationMultiplicity">
              <source xsi:type="ocl:VariableExp" location="159:36-159:37" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="160:7-160:35" propertyName="participant">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="160:22-160:35" name="participant">
              <source xsi:type="ocl:VariableExp" location="160:22-160:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="161:7-161:31" propertyName="qualifier">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="161:20-161:31" name="qualifier">
              <source xsi:type="ocl:VariableExp" location="161:20-161:21" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="162:7-162:39" propertyName="specification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="162:24-162:39" name="specification">
              <source xsi:type="ocl:VariableExp" location="162:24-162:25" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="163:7-163:35" propertyName="association">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="163:22-163:35" name="association">
              <source xsi:type="ocl:VariableExp" location="163:22-163:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="164:7-164:35" propertyName="isNavigable">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="164:22-164:35" name="isNavigable">
              <source xsi:type="ocl:VariableExp" location="164:22-164:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="165:7-165:29" propertyName="ordering">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="165:19-165:29" name="ordering">
              <source xsi:type="ocl:VariableExp" location="165:19-165:20" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="166:7-166:35" propertyName="aggregation">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="166:22-166:35" name="aggregation">
              <source xsi:type="ocl:VariableExp" location="166:22-166:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="167:7-167:35" propertyName="targetScope">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="167:22-167:35" name="targetScope">
              <source xsi:type="ocl:VariableExp" location="167:22-167:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="168:7-168:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="168:23-168:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="168:23-168:24" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="169:7-169:39" propertyName="changeability">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="169:24-169:39" name="changeability">
              <source xsi:type="ocl:VariableExp" location="169:24-169:25" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="170:7-170:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="170:21-170:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="170:21-170:22" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="171:7-171:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="171:27-171:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="171:27-171:28" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="172:7-172:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="172:18-172:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="172:18-172:19" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="173:7-173:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="173:21-173:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="173:21-173:22" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="174:7-174:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="174:21-174:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="174:21-174:22" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="175:7-175:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="175:21-175:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="175:21-175:22" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="176:7-176:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="176:28-176:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="176:28-176:29" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="177:7-177:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="177:20-177:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="177:20-177:21" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="178:7-178:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="178:22-178:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="178:22-178:23" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="179:7-179:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="179:15-179:21" name="name">
              <source xsi:type="ocl:VariableExp" location="179:15-179:16" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="180:7-180:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="180:21-180:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="180:21-180:22" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="181:7-181:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="181:26-181:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="181:26-181:27" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="183:2-185:3">
        <statements xsi:type="atl:ExpressionStat" location="184:3-184:57">
          <expression xsi:type="ocl:OperationCallExp" location="184:3-184:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="184:3-184:4" referredVariable="/0/@elements.2/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="184:27-184:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="184:44-184:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="184:44-184:45" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="150:3-154:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="151:5-151:31" varName="s" variableExp="/0/@elements.2/@inPattern/@filter/@source /0/@elements.2/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.2/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.2/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="151:9-151:31" name="AssociationEndRole" model="/9"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="153:7-153:44" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="153:7-153:8" referredVariable="/0/@elements.2/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="153:21-153:43" name="AssociationEndRole" model="/10"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="310:1-348:2" name="CopyClass">
      <commentsBefore>--rule CopyMessage {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Message</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Message)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Message (</commentsBefore>
      <commentsBefore>--      action &lt;- s.action,</commentsBefore>
      <commentsBefore>--      interaction &lt;- s.interaction,</commentsBefore>
      <commentsBefore>--      predecessor &lt;- s.predecessor,</commentsBefore>
      <commentsBefore>--      sender &lt;- s.sender,</commentsBefore>
      <commentsBefore>--      conformingStimulus &lt;- s.conformingStimulus,</commentsBefore>
      <commentsBefore>--      activator &lt;- s.activator,</commentsBefore>
      <commentsBefore>--      communicationConnection &lt;- s.communicationConnection,</commentsBefore>
      <commentsBefore>--      receiver &lt;- s.receiver,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--rule CopyInteraction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Interaction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Interaction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Interaction (</commentsBefore>
      <commentsBefore>--      message &lt;- s.message,</commentsBefore>
      <commentsBefore>--      context &lt;- s.context,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyInteractionInstanceSet {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!InteractionInstanceSet</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!InteractionInstanceSet)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!InteractionInstanceSet (</commentsBefore>
      <commentsBefore>--      context &lt;- s.context,</commentsBefore>
      <commentsBefore>--      interaction &lt;- s.interaction,</commentsBefore>
      <commentsBefore>--      participatingStimulus &lt;- s.participatingStimulus,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--rule CopyCollaborationInstanceSet {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!CollaborationInstanceSet</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!CollaborationInstanceSet)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!CollaborationInstanceSet (</commentsBefore>
      <commentsBefore>--      constrainingElement &lt;- s.constrainingElement,</commentsBefore>
      <commentsBefore>--      interactionInstanceSet &lt;- s.interactionInstanceSet,</commentsBefore>
      <commentsBefore>--      participatingLink &lt;- s.participatingLink,</commentsBefore>
      <commentsBefore>--      participatingInstance &lt;- s.participatingInstance,</commentsBefore>
      <commentsBefore>--      collaboration &lt;- s.collaboration,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <outPattern location="316:3-344:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="317:5-344:6" varName="t" variableExp="/0/@elements.3/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="317:9-317:18" name="Class" model="/14"/>
          <bindings location="318:7-318:29" propertyName="isActive">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="318:19-318:29" name="isActive">
              <source xsi:type="ocl:VariableExp" location="318:19-318:20" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="319:7-319:27" propertyName="feature">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="319:18-319:27" name="feature">
              <source xsi:type="ocl:VariableExp" location="319:18-319:19" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="320:7-320:41" propertyName="powertypeRange">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="320:25-320:41" name="powertypeRange">
              <source xsi:type="ocl:VariableExp" location="320:25-320:26" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="321:7-321:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="321:25-321:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="321:25-321:26" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="322:7-322:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="322:17-322:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="322:17-322:18" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="323:7-323:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="323:17-323:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="323:17-323:18" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="324:7-324:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="324:21-324:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="324:21-324:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="325:7-325:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="325:21-325:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="325:21-325:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="326:7-326:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="326:27-326:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="326:27-326:28" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="327:7-327:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="327:21-327:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="327:21-327:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="328:7-328:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="328:21-328:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="328:21-328:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="329:7-329:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="329:28-329:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="329:28-329:29" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="330:7-330:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="330:15-330:21" name="name">
              <source xsi:type="ocl:VariableExp" location="330:15-330:16" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="331:7-331:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="331:21-331:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="331:21-331:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="332:7-332:37" propertyName="ownedElement">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="332:23-332:37" name="ownedElement">
              <source xsi:type="ocl:VariableExp" location="332:23-332:24" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="333:7-333:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="333:21-333:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="333:21-333:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="334:7-334:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="334:27-334:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="334:27-334:28" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="335:7-335:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="335:18-335:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="335:18-335:19" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="336:7-336:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="336:21-336:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="336:21-336:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="337:7-337:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="337:21-337:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="337:21-337:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="338:7-338:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="338:21-338:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="338:21-338:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="339:7-339:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="339:28-339:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="339:28-339:29" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="340:7-340:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="340:20-340:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="340:20-340:21" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="341:7-341:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="341:22-341:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="341:22-341:23" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="342:7-342:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="342:21-342:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="342:21-342:22" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="343:7-343:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="343:26-343:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="343:26-343:27" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="345:2-347:3">
        <statements xsi:type="atl:ExpressionStat" location="346:3-346:57">
          <expression xsi:type="ocl:OperationCallExp" location="346:3-346:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="346:3-346:4" referredVariable="/0/@elements.3/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="346:27-346:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="346:44-346:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="346:44-346:45" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="311:3-315:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="312:5-312:18" varName="s" variableExp="/0/@elements.3/@inPattern/@filter/@source /0/@elements.3/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.3/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.3/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="312:9-312:18" name="Class" model="/12"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="314:7-314:31" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="314:7-314:8" referredVariable="/0/@elements.3/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="314:21-314:30" name="Class" model="/13"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="350:1-393:3" name="CopyDataType">
      <outPattern location="356:3-389:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="357:5-389:6" varName="t" variableExp="/0/@elements.4/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="357:9-357:21" name="DataType" model="/17"/>
          <bindings location="358:7-358:27" propertyName="feature">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="358:18-358:27" name="feature">
              <source xsi:type="ocl:VariableExp" location="358:18-358:19" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="359:7-359:41" propertyName="powertypeRange">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="359:25-359:41" name="powertypeRange">
              <source xsi:type="ocl:VariableExp" location="359:25-359:26" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="360:7-360:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="360:25-360:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="360:25-360:26" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="361:7-361:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="361:17-361:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="361:17-361:18" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="362:7-362:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="362:17-362:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="362:17-362:18" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="363:7-363:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="363:21-363:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="363:21-363:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="364:7-364:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="364:21-364:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="364:21-364:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="365:7-365:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="365:27-365:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="365:27-365:28" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="366:7-366:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="366:18-366:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="366:18-366:19" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="367:7-367:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="367:21-367:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="367:21-367:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="368:7-368:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="368:21-368:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="368:21-368:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="369:7-369:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="369:21-369:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="369:21-369:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="370:7-370:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="370:28-370:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="370:28-370:29" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="371:7-371:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="371:20-371:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="371:20-371:21" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="372:7-372:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="372:22-372:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="372:22-372:23" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="373:7-373:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="373:15-373:21" name="name">
              <source xsi:type="ocl:VariableExp" location="373:15-373:16" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="374:7-374:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="374:21-374:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="374:21-374:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="375:7-375:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="375:26-375:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="375:26-375:27" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="376:7-376:37" propertyName="ownedElement">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="376:23-376:37" name="ownedElement">
              <source xsi:type="ocl:VariableExp" location="376:23-376:24" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="377:7-377:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="377:21-377:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="377:21-377:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="378:7-378:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="378:27-378:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="378:27-378:28" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="379:7-379:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="379:18-379:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="379:18-379:19" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="380:7-380:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="380:21-380:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="380:21-380:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="381:7-381:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="381:21-381:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="381:21-381:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="382:7-382:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="382:21-382:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="382:21-382:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="383:7-383:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="383:28-383:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="383:28-383:29" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="384:7-384:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="384:20-384:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="384:20-384:21" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="385:7-385:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="385:22-385:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="385:22-385:23" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="386:7-386:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="386:15-386:21" name="name">
              <source xsi:type="ocl:VariableExp" location="386:15-386:16" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="387:7-387:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="387:21-387:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="387:21-387:22" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="388:7-388:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="388:26-388:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="388:26-388:27" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="390:2-392:3">
        <statements xsi:type="atl:ExpressionStat" location="391:3-391:57">
          <expression xsi:type="ocl:OperationCallExp" location="391:3-391:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="391:3-391:4" referredVariable="/0/@elements.4/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="391:27-391:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="391:44-391:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="391:44-391:45" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="351:3-355:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="352:5-352:21" varName="s" variableExp="/0/@elements.4/@inPattern/@filter/@source /0/@elements.4/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.26/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.27/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.28/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.29/@value/@source /0/@elements.4/@outPattern/@elements.0/@bindings.30/@value/@source /0/@elements.4/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="352:9-352:21" name="DataType" model="/15"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="354:7-354:34" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="354:7-354:8" referredVariable="/0/@elements.4/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="354:21-354:33" name="DataType" model="/16"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="395:1-429:3" name="CopyAssociationEnd">
      <commentsAfter>--rule CopyInterface {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Interface</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Interface)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Interface (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--rule CopyConstraint {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Constraint</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Constraint)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Constraint (</commentsAfter>
      <commentsAfter>--      constrainedElement &lt;- s.constrainedElement,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <outPattern location="401:3-425:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="402:5-425:6" varName="t" variableExp="/0/@elements.5/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="402:9-402:27" name="AssociationEnd" model="/20"/>
          <bindings location="403:7-403:35" propertyName="participant">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="403:22-403:35" name="participant">
              <source xsi:type="ocl:VariableExp" location="403:22-403:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="404:7-404:31" propertyName="qualifier">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="404:20-404:31" name="qualifier">
              <source xsi:type="ocl:VariableExp" location="404:20-404:21" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="405:7-405:39" propertyName="specification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="405:24-405:39" name="specification">
              <source xsi:type="ocl:VariableExp" location="405:24-405:25" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="406:7-406:35" propertyName="association">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="406:22-406:35" name="association">
              <source xsi:type="ocl:VariableExp" location="406:22-406:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="407:7-407:35" propertyName="isNavigable">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="407:22-407:35" name="isNavigable">
              <source xsi:type="ocl:VariableExp" location="407:22-407:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="408:7-408:29" propertyName="ordering">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="408:19-408:29" name="ordering">
              <source xsi:type="ocl:VariableExp" location="408:19-408:20" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="409:7-409:35" propertyName="aggregation">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="409:22-409:35" name="aggregation">
              <source xsi:type="ocl:VariableExp" location="409:22-409:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="410:7-410:35" propertyName="targetScope">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="410:22-410:35" name="targetScope">
              <source xsi:type="ocl:VariableExp" location="410:22-410:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="411:7-411:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="411:23-411:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="411:23-411:24" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="412:7-412:39" propertyName="changeability">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="412:24-412:39" name="changeability">
              <source xsi:type="ocl:VariableExp" location="412:24-412:25" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="413:7-413:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="413:21-413:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="413:21-413:22" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="414:7-414:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="414:27-414:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="414:27-414:28" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="415:7-415:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="415:18-415:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="415:18-415:19" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="416:7-416:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="416:21-416:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="416:21-416:22" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="417:7-417:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="417:21-417:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="417:21-417:22" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="418:7-418:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="418:21-418:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="418:21-418:22" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="419:7-419:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="419:28-419:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="419:28-419:29" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="420:7-420:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="420:20-420:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="420:20-420:21" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="421:7-421:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="421:22-421:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="421:22-421:23" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="422:7-422:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="422:15-422:21" name="name">
              <source xsi:type="ocl:VariableExp" location="422:15-422:16" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="423:7-423:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="423:21-423:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="423:21-423:22" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="424:7-424:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="424:26-424:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="424:26-424:27" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="426:2-428:3">
        <statements xsi:type="atl:ExpressionStat" location="427:3-427:57">
          <expression xsi:type="ocl:OperationCallExp" location="427:3-427:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="427:3-427:4" referredVariable="/0/@elements.5/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="427:27-427:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="427:44-427:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="427:44-427:45" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="396:3-400:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="397:5-397:27" varName="s" variableExp="/0/@elements.5/@inPattern/@filter/@source /0/@elements.5/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.5/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.5/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="397:9-397:27" name="AssociationEnd" model="/18"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="399:7-399:40" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="399:7-399:8" referredVariable="/0/@elements.5/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="399:21-399:39" name="AssociationEnd" model="/19"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="504:1-545:3" name="CopyAssociation">
      <commentsBefore>--rule CopyInterface {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Interface</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Interface)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Interface (</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--rule CopyConstraint {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Constraint</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Constraint)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Constraint (</commentsBefore>
      <commentsBefore>--      constrainedElement &lt;- s.constrainedElement,</commentsBefore>
      <commentsBefore>--      body &lt;- s.body,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <outPattern location="510:3-541:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="511:5-541:6" varName="t" variableExp="/0/@elements.6/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="511:9-511:24" name="Association" model="/23"/>
          <bindings location="512:7-512:33" propertyName="connection">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="512:21-512:33" name="connection">
              <source xsi:type="ocl:VariableExp" location="512:21-512:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="513:7-513:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="513:25-513:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="513:25-513:26" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="514:7-514:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="514:17-514:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="514:17-514:18" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="515:7-515:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="515:17-515:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="515:17-515:18" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="516:7-516:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="516:21-516:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="516:21-516:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="517:7-517:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="517:21-517:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="517:21-517:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="518:7-518:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="518:27-518:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="518:27-518:28" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="519:7-519:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="519:18-519:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="519:18-519:19" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="520:7-520:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="520:21-520:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="520:21-520:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="521:7-521:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="521:21-521:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="521:21-521:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="522:7-522:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="522:21-522:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="522:21-522:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="523:7-523:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="523:28-523:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="523:28-523:29" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="524:7-524:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="524:20-524:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="524:20-524:21" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="525:7-525:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="525:22-525:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="525:22-525:23" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="526:7-526:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="526:15-526:21" name="name">
              <source xsi:type="ocl:VariableExp" location="526:15-526:16" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="527:7-527:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="527:21-527:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="527:21-527:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="528:7-528:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="528:26-528:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="528:26-528:27" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="529:7-529:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="529:21-529:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="529:21-529:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="530:7-530:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="530:27-530:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="530:27-530:28" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="531:7-531:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="531:18-531:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="531:18-531:19" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="532:7-532:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="532:21-532:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="532:21-532:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="533:7-533:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="533:21-533:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="533:21-533:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="534:7-534:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="534:21-534:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="534:21-534:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="535:7-535:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="535:28-535:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="535:28-535:29" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="536:7-536:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="536:20-536:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="536:20-536:21" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="537:7-537:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="537:22-537:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="537:22-537:23" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="538:7-538:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="538:15-538:21" name="name">
              <source xsi:type="ocl:VariableExp" location="538:15-538:16" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="539:7-539:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="539:21-539:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="539:21-539:22" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="540:7-540:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="540:26-540:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="540:26-540:27" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="542:2-544:3">
        <statements xsi:type="atl:ExpressionStat" location="543:3-543:57">
          <expression xsi:type="ocl:OperationCallExp" location="543:3-543:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="543:3-543:4" referredVariable="/0/@elements.6/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="543:27-543:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="543:44-543:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="543:44-543:45" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="505:3-509:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="506:5-506:24" varName="s" variableExp="/0/@elements.6/@inPattern/@filter/@source /0/@elements.6/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.26/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.27/@value/@source /0/@elements.6/@outPattern/@elements.0/@bindings.28/@value/@source /0/@elements.6/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="506:9-506:24" name="Association" model="/21"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="508:7-508:37" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="508:7-508:8" referredVariable="/0/@elements.6/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="508:21-508:36" name="Association" model="/22"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="547:1-580:3" name="CopyAttribute">
      <commentsAfter>--rule CopyOperation {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Operation</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Operation)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Operation (</commentsAfter>
      <commentsAfter>--      concurrency &lt;- s.concurrency,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      specification &lt;- s.specification,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      isQuery &lt;- s.isQuery,</commentsAfter>
      <commentsAfter>--      owner &lt;- s.owner,</commentsAfter>
      <commentsAfter>--      ownerScope &lt;- s.ownerScope,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyParameter {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Parameter</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Parameter)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Parameter (</commentsAfter>
      <commentsAfter>--      type &lt;- s.type,</commentsAfter>
      <commentsAfter>--      behavioralFeature &lt;- s.behavioralFeature,</commentsAfter>
      <commentsAfter>--      defaultValue &lt;- s.defaultValue,</commentsAfter>
      <commentsAfter>--      kind &lt;- s.kind,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyMethod {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Method</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Method)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Method (</commentsAfter>
      <commentsAfter>--      specification &lt;- s.specification,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      isQuery &lt;- s.isQuery,</commentsAfter>
      <commentsAfter>--      owner &lt;- s.owner,</commentsAfter>
      <commentsAfter>--      ownerScope &lt;- s.ownerScope,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyGeneralization {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Generalization</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Generalization)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Generalization (</commentsAfter>
      <commentsAfter>--      parent &lt;- s.parent,</commentsAfter>
      <commentsAfter>--      child &lt;- s.child,</commentsAfter>
      <commentsAfter>--      powertype &lt;- s.powertype,</commentsAfter>
      <commentsAfter>--      discriminator &lt;- s.discriminator,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyAssociationClass {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!AssociationClass</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!AssociationClass)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!AssociationClass (</commentsAfter>
      <commentsAfter>--      connection &lt;- s.connection,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      isActive &lt;- s.isActive,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyDependency {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Dependency</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Dependency)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Dependency (</commentsAfter>
      <commentsAfter>--      client &lt;- s.client,</commentsAfter>
      <commentsAfter>--      supplier &lt;- s.supplier,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyAbstraction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Abstraction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Abstraction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Abstraction (</commentsAfter>
      <commentsAfter>--      mapping &lt;- s.mapping,</commentsAfter>
      <commentsAfter>--      client &lt;- s.client,</commentsAfter>
      <commentsAfter>--      supplier &lt;- s.supplier,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyUsage {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Usage</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Usage)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Usage (</commentsAfter>
      <commentsAfter>--      client &lt;- s.client,</commentsAfter>
      <commentsAfter>--      supplier &lt;- s.supplier,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyBinding {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Binding</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Binding)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Binding (</commentsAfter>
      <commentsAfter>--      argument &lt;- s.argument,</commentsAfter>
      <commentsAfter>--      client &lt;- s.client,</commentsAfter>
      <commentsAfter>--      supplier &lt;- s.supplier,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyComponent {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Component</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Component)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Component (</commentsAfter>
      <commentsAfter>--      deploymentLocation &lt;- s.deploymentLocation,</commentsAfter>
      <commentsAfter>--      residentElement &lt;- s.residentElement,</commentsAfter>
      <commentsAfter>--      implementation &lt;- s.implementation,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyNode {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Node</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Node)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Node (</commentsAfter>
      <commentsAfter>--      deployedComponent &lt;- s.deployedComponent,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyPermission {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Permission</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Permission)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Permission (</commentsAfter>
      <commentsAfter>--      client &lt;- s.client,</commentsAfter>
      <commentsAfter>--      supplier &lt;- s.supplier,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyComment {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Comment</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Comment)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Comment (</commentsAfter>
      <commentsAfter>--      annotatedElement &lt;- s.annotatedElement,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyFlow {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Flow</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Flow)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Flow (</commentsAfter>
      <commentsAfter>--      source &lt;- s.source,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyElementResidence {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ElementResidence</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ElementResidence)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ElementResidence (</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      resident &lt;- s.resident,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTemplateParameter {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TemplateParameter</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TemplateParameter)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TemplateParameter (</commentsAfter>
      <commentsAfter>--      defaultElement &lt;- s.defaultElement,</commentsAfter>
      <commentsAfter>--      template &lt;- s.template,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyPrimitive {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Primitive</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Primitive)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Primitive (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyEnumeration {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Enumeration</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Enumeration)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Enumeration (</commentsAfter>
      <commentsAfter>--      literal &lt;- s.literal,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyEnumerationLiteral {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!EnumerationLiteral</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!EnumerationLiteral)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!EnumerationLiteral (</commentsAfter>
      <commentsAfter>--      enumeration &lt;- s.enumeration,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyStereotype {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Stereotype</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Stereotype)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Stereotype (</commentsAfter>
      <commentsAfter>--      stereotypeConstraint &lt;- s.stereotypeConstraint,</commentsAfter>
      <commentsAfter>--      definedTag &lt;- s.definedTag,</commentsAfter>
      <commentsAfter>--      icon &lt;- s.icon,</commentsAfter>
      <commentsAfter>--      baseClass &lt;- s.baseClass,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTagDefinition {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TagDefinition</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TagDefinition)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TagDefinition (</commentsAfter>
      <commentsAfter>--      owner &lt;- s.owner,</commentsAfter>
      <commentsAfter>--      tagType &lt;- s.tagType,</commentsAfter>
      <commentsAfter>--      multiplicity &lt;- s.multiplicity,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTaggedValue {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TaggedValue</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TaggedValue)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TaggedValue (</commentsAfter>
      <commentsAfter>--      type &lt;- s.type,</commentsAfter>
      <commentsAfter>--      referenceValue &lt;- s.referenceValue,</commentsAfter>
      <commentsAfter>--      modelElement &lt;- s.modelElement,</commentsAfter>
      <commentsAfter>--      dataValue &lt;- s.dataValue,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyProgrammingLanguageDataType {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ProgrammingLanguageDataType</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ProgrammingLanguageDataType)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ProgrammingLanguageDataType (</commentsAfter>
      <commentsAfter>--      expression &lt;- s.expression,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyArtifact {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Artifact</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Artifact)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Artifact (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTemplateArgument {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TemplateArgument</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TemplateArgument)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TemplateArgument (</commentsAfter>
      <commentsAfter>--      binding &lt;- s.binding,</commentsAfter>
      <commentsAfter>--      modelElement &lt;- s.modelElement</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyStateMachine {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!StateMachine</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!StateMachine)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!StateMachine (</commentsAfter>
      <commentsAfter>--      context &lt;- s.context,</commentsAfter>
      <commentsAfter>--      transitions &lt;- s.transitions,</commentsAfter>
      <commentsAfter>--      submachineState &lt;- s.submachineState,</commentsAfter>
      <commentsAfter>--      top &lt;- s.top,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTimeEvent {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TimeEvent</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TimeEvent)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TimeEvent (</commentsAfter>
      <commentsAfter>--      when &lt;- s.when,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyCallEvent {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CallEvent</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CallEvent)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CallEvent (</commentsAfter>
      <commentsAfter>--      operation &lt;- s.operation,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySignalEvent {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SignalEvent</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SignalEvent)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SignalEvent (</commentsAfter>
      <commentsAfter>--      signal &lt;- s.signal,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTransition {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Transition</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Transition)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Transition (</commentsAfter>
      <commentsAfter>--      effect &lt;- s.effect,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      trigger &lt;- s.trigger,</commentsAfter>
      <commentsAfter>--      guard &lt;- s.guard,</commentsAfter>
      <commentsAfter>--      source &lt;- s.source,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyCompositeState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CompositeState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CompositeState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CompositeState (</commentsAfter>
      <commentsAfter>--      subvertex &lt;- s.subvertex,</commentsAfter>
      <commentsAfter>--      isConcurrent &lt;- s.isConcurrent,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyChangeEvent {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ChangeEvent</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ChangeEvent)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ChangeEvent (</commentsAfter>
      <commentsAfter>--      changeExpression &lt;- s.changeExpression,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyGuard {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Guard</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Guard)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Guard (</commentsAfter>
      <commentsAfter>--      transition &lt;- s.transition,</commentsAfter>
      <commentsAfter>--      expression &lt;- s.expression,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyPseudostate {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Pseudostate</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Pseudostate)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Pseudostate (</commentsAfter>
      <commentsAfter>--      kind &lt;- s.kind,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySimpleState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SimpleState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SimpleState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SimpleState (</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySubmachineState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SubmachineState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SubmachineState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SubmachineState (</commentsAfter>
      <commentsAfter>--      submachine &lt;- s.submachine,</commentsAfter>
      <commentsAfter>--      subvertex &lt;- s.subvertex,</commentsAfter>
      <commentsAfter>--      isConcurrent &lt;- s.isConcurrent,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySynchState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SynchState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SynchState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SynchState (</commentsAfter>
      <commentsAfter>--      bound &lt;- s.bound,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyStubState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!StubState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!StubState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!StubState (</commentsAfter>
      <commentsAfter>--      referenceState &lt;- s.referenceState,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyFinalState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!FinalState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!FinalState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!FinalState (</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySignal {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Signal</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Signal)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Signal (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyCreateAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CreateAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CreateAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CreateAction (</commentsAfter>
      <commentsAfter>--      instantiation &lt;- s.instantiation,</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyDestroyAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!DestroyAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!DestroyAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!DestroyAction (</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyUninterpretedAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!UninterpretedAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!UninterpretedAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!UninterpretedAction (</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyAttributeLink {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!AttributeLink</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!AttributeLink)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!AttributeLink (</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      value &lt;- s.value,</commentsAfter>
      <commentsAfter>--      instance &lt;- s.instance,</commentsAfter>
      <commentsAfter>--      attribute &lt;- s.attribute,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyObject {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Object</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Object)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Object (</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyLink {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Link</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Link)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Link (</commentsAfter>
      <commentsAfter>--      connection &lt;- s.connection,</commentsAfter>
      <commentsAfter>--      association &lt;- s.association,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyLinkObject {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!LinkObject</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!LinkObject)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!LinkObject (</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      connection &lt;- s.connection,</commentsAfter>
      <commentsAfter>--      association &lt;- s.association,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyDataValue {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!DataValue</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!DataValue)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!DataValue (</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyCallAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CallAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CallAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CallAction (</commentsAfter>
      <commentsAfter>--      operation &lt;- s.operation,</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySendAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SendAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SendAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SendAction (</commentsAfter>
      <commentsAfter>--      signal &lt;- s.signal,</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyActionSequence {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ActionSequence</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ActionSequence)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ActionSequence (</commentsAfter>
      <commentsAfter>--      action &lt;- s.action,</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyArgument {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Argument</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Argument)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Argument (</commentsAfter>
      <commentsAfter>--      action &lt;- s.action,</commentsAfter>
      <commentsAfter>--      value &lt;- s.value,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyReception {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Reception</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Reception)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Reception (</commentsAfter>
      <commentsAfter>--      signal &lt;- s.signal,</commentsAfter>
      <commentsAfter>--      specification &lt;- s.specification,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      isQuery &lt;- s.isQuery,</commentsAfter>
      <commentsAfter>--      owner &lt;- s.owner,</commentsAfter>
      <commentsAfter>--      ownerScope &lt;- s.ownerScope,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyLinkEnd {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!LinkEnd</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!LinkEnd)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!LinkEnd (</commentsAfter>
      <commentsAfter>--      qualifiedValue &lt;- s.qualifiedValue,</commentsAfter>
      <commentsAfter>--      link &lt;- s.link,</commentsAfter>
      <commentsAfter>--      associationEnd &lt;- s.associationEnd,</commentsAfter>
      <commentsAfter>--      instance &lt;- s.instance,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyReturnAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ReturnAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ReturnAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ReturnAction (</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTerminateAction {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TerminateAction</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TerminateAction)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TerminateAction (</commentsAfter>
      <commentsAfter>--      actionSequence &lt;- s.actionSequence,</commentsAfter>
      <commentsAfter>--      actualArgument &lt;- s.actualArgument,</commentsAfter>
      <commentsAfter>--      recurrence &lt;- s.recurrence,</commentsAfter>
      <commentsAfter>--      target &lt;- s.target,</commentsAfter>
      <commentsAfter>--      isAsynchronous &lt;- s.isAsynchronous,</commentsAfter>
      <commentsAfter>--      script &lt;- s.script,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyStimulus {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Stimulus</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Stimulus)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Stimulus (</commentsAfter>
      <commentsAfter>--      receiver &lt;- s.receiver,</commentsAfter>
      <commentsAfter>--      communicationLink &lt;- s.communicationLink,</commentsAfter>
      <commentsAfter>--      sender &lt;- s.sender,</commentsAfter>
      <commentsAfter>--      dispatchAction &lt;- s.dispatchAction,</commentsAfter>
      <commentsAfter>--      argument &lt;- s.argument,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyException {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Exception</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Exception)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Exception (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyComponentInstance {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ComponentInstance</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ComponentInstance)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ComponentInstance (</commentsAfter>
      <commentsAfter>--      resident &lt;- s.resident,</commentsAfter>
      <commentsAfter>--      nodeInstance &lt;- s.nodeInstance,</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyNodeInstance {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!NodeInstance</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!NodeInstance)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!NodeInstance (</commentsAfter>
      <commentsAfter>--      resident &lt;- s.resident,</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySubsystemInstance {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SubsystemInstance</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SubsystemInstance)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SubsystemInstance (</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <outPattern location="553:3-576:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="554:5-576:6" varName="t" variableExp="/0/@elements.7/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="554:9-554:22" name="Attribute" model="/26"/>
          <bindings location="555:7-555:41" propertyName="associationEnd">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="555:25-555:41" name="associationEnd">
              <source xsi:type="ocl:VariableExp" location="555:25-555:26" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="556:7-556:37" propertyName="initialValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="556:23-556:37" name="initialValue">
              <source xsi:type="ocl:VariableExp" location="556:23-556:24" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="557:7-557:21" propertyName="type">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="557:15-557:21" name="type">
              <source xsi:type="ocl:VariableExp" location="557:15-557:16" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="558:7-558:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="558:23-558:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="558:23-558:24" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="559:7-559:39" propertyName="changeability">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="559:24-559:39" name="changeability">
              <source xsi:type="ocl:VariableExp" location="559:24-559:25" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="560:7-560:35" propertyName="targetScope">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="560:22-560:35" name="targetScope">
              <source xsi:type="ocl:VariableExp" location="560:22-560:23" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="561:7-561:29" propertyName="ordering">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="561:19-561:29" name="ordering">
              <source xsi:type="ocl:VariableExp" location="561:19-561:20" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="562:7-562:23" propertyName="owner">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="562:16-562:23" name="owner">
              <source xsi:type="ocl:VariableExp" location="562:16-562:17" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="563:7-563:33" propertyName="ownerScope">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="563:21-563:33" name="ownerScope">
              <source xsi:type="ocl:VariableExp" location="563:21-563:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="564:7-564:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="564:21-564:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="564:21-564:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="565:7-565:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="565:27-565:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="565:27-565:28" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="566:7-566:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="566:18-566:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="566:18-566:19" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="567:7-567:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="567:21-567:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="567:21-567:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="568:7-568:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="568:21-568:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="568:21-568:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="569:7-569:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="569:21-569:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="569:21-569:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="570:7-570:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="570:28-570:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="570:28-570:29" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="571:7-571:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="571:20-571:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="571:20-571:21" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="572:7-572:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="572:22-572:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="572:22-572:23" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="573:7-573:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="573:15-573:21" name="name">
              <source xsi:type="ocl:VariableExp" location="573:15-573:16" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="574:7-574:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="574:21-574:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="574:21-574:22" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="575:7-575:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="575:26-575:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="575:26-575:27" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="577:2-579:3">
        <statements xsi:type="atl:ExpressionStat" location="578:3-578:57">
          <expression xsi:type="ocl:OperationCallExp" location="578:3-578:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="578:3-578:4" referredVariable="/0/@elements.7/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="578:27-578:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="578:44-578:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="578:44-578:45" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="548:3-552:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="549:5-549:22" varName="s" variableExp="/0/@elements.7/@inPattern/@filter/@source /0/@elements.7/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.7/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.7/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="549:9-549:22" name="Attribute" model="/24"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="551:7-551:35" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="551:7-551:8" referredVariable="/0/@elements.7/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="551:21-551:34" name="Attribute" model="/25"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="2606:1-2648:3" name="CopyPackage">
      <commentsBefore>--rule CopyOperation {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Operation</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Operation)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Operation (</commentsBefore>
      <commentsBefore>--      concurrency &lt;- s.concurrency,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      specification &lt;- s.specification,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      isQuery &lt;- s.isQuery,</commentsBefore>
      <commentsBefore>--      owner &lt;- s.owner,</commentsBefore>
      <commentsBefore>--      ownerScope &lt;- s.ownerScope,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyParameter {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Parameter</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Parameter)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Parameter (</commentsBefore>
      <commentsBefore>--      type &lt;- s.type,</commentsBefore>
      <commentsBefore>--      behavioralFeature &lt;- s.behavioralFeature,</commentsBefore>
      <commentsBefore>--      defaultValue &lt;- s.defaultValue,</commentsBefore>
      <commentsBefore>--      kind &lt;- s.kind,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyMethod {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Method</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Method)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Method (</commentsBefore>
      <commentsBefore>--      specification &lt;- s.specification,</commentsBefore>
      <commentsBefore>--      body &lt;- s.body,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      isQuery &lt;- s.isQuery,</commentsBefore>
      <commentsBefore>--      owner &lt;- s.owner,</commentsBefore>
      <commentsBefore>--      ownerScope &lt;- s.ownerScope,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyGeneralization {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Generalization</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Generalization)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Generalization (</commentsBefore>
      <commentsBefore>--      parent &lt;- s.parent,</commentsBefore>
      <commentsBefore>--      child &lt;- s.child,</commentsBefore>
      <commentsBefore>--      powertype &lt;- s.powertype,</commentsBefore>
      <commentsBefore>--      discriminator &lt;- s.discriminator,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyAssociationClass {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!AssociationClass</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!AssociationClass)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!AssociationClass (</commentsBefore>
      <commentsBefore>--      connection &lt;- s.connection,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      isActive &lt;- s.isActive,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyDependency {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Dependency</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Dependency)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Dependency (</commentsBefore>
      <commentsBefore>--      client &lt;- s.client,</commentsBefore>
      <commentsBefore>--      supplier &lt;- s.supplier,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyAbstraction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Abstraction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Abstraction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Abstraction (</commentsBefore>
      <commentsBefore>--      mapping &lt;- s.mapping,</commentsBefore>
      <commentsBefore>--      client &lt;- s.client,</commentsBefore>
      <commentsBefore>--      supplier &lt;- s.supplier,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyUsage {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Usage</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Usage)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Usage (</commentsBefore>
      <commentsBefore>--      client &lt;- s.client,</commentsBefore>
      <commentsBefore>--      supplier &lt;- s.supplier,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyBinding {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Binding</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Binding)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Binding (</commentsBefore>
      <commentsBefore>--      argument &lt;- s.argument,</commentsBefore>
      <commentsBefore>--      client &lt;- s.client,</commentsBefore>
      <commentsBefore>--      supplier &lt;- s.supplier,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyComponent {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Component</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Component)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Component (</commentsBefore>
      <commentsBefore>--      deploymentLocation &lt;- s.deploymentLocation,</commentsBefore>
      <commentsBefore>--      residentElement &lt;- s.residentElement,</commentsBefore>
      <commentsBefore>--      implementation &lt;- s.implementation,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyNode {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Node</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Node)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Node (</commentsBefore>
      <commentsBefore>--      deployedComponent &lt;- s.deployedComponent,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyPermission {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Permission</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Permission)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Permission (</commentsBefore>
      <commentsBefore>--      client &lt;- s.client,</commentsBefore>
      <commentsBefore>--      supplier &lt;- s.supplier,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyComment {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Comment</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Comment)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Comment (</commentsBefore>
      <commentsBefore>--      annotatedElement &lt;- s.annotatedElement,</commentsBefore>
      <commentsBefore>--      body &lt;- s.body,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyFlow {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Flow</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Flow)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Flow (</commentsBefore>
      <commentsBefore>--      source &lt;- s.source,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyElementResidence {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ElementResidence</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ElementResidence)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ElementResidence (</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      resident &lt;- s.resident,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTemplateParameter {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TemplateParameter</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TemplateParameter)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TemplateParameter (</commentsBefore>
      <commentsBefore>--      defaultElement &lt;- s.defaultElement,</commentsBefore>
      <commentsBefore>--      template &lt;- s.template,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyPrimitive {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Primitive</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Primitive)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Primitive (</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyEnumeration {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Enumeration</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Enumeration)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Enumeration (</commentsBefore>
      <commentsBefore>--      literal &lt;- s.literal,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyEnumerationLiteral {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!EnumerationLiteral</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!EnumerationLiteral)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!EnumerationLiteral (</commentsBefore>
      <commentsBefore>--      enumeration &lt;- s.enumeration,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyStereotype {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Stereotype</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Stereotype)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Stereotype (</commentsBefore>
      <commentsBefore>--      stereotypeConstraint &lt;- s.stereotypeConstraint,</commentsBefore>
      <commentsBefore>--      definedTag &lt;- s.definedTag,</commentsBefore>
      <commentsBefore>--      icon &lt;- s.icon,</commentsBefore>
      <commentsBefore>--      baseClass &lt;- s.baseClass,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTagDefinition {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TagDefinition</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TagDefinition)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TagDefinition (</commentsBefore>
      <commentsBefore>--      owner &lt;- s.owner,</commentsBefore>
      <commentsBefore>--      tagType &lt;- s.tagType,</commentsBefore>
      <commentsBefore>--      multiplicity &lt;- s.multiplicity,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTaggedValue {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TaggedValue</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TaggedValue)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TaggedValue (</commentsBefore>
      <commentsBefore>--      type &lt;- s.type,</commentsBefore>
      <commentsBefore>--      referenceValue &lt;- s.referenceValue,</commentsBefore>
      <commentsBefore>--      modelElement &lt;- s.modelElement,</commentsBefore>
      <commentsBefore>--      dataValue &lt;- s.dataValue,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyProgrammingLanguageDataType {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ProgrammingLanguageDataType</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ProgrammingLanguageDataType)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ProgrammingLanguageDataType (</commentsBefore>
      <commentsBefore>--      expression &lt;- s.expression,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyArtifact {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Artifact</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Artifact)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Artifact (</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTemplateArgument {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TemplateArgument</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TemplateArgument)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TemplateArgument (</commentsBefore>
      <commentsBefore>--      binding &lt;- s.binding,</commentsBefore>
      <commentsBefore>--      modelElement &lt;- s.modelElement</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyStateMachine {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!StateMachine</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!StateMachine)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!StateMachine (</commentsBefore>
      <commentsBefore>--      context &lt;- s.context,</commentsBefore>
      <commentsBefore>--      transitions &lt;- s.transitions,</commentsBefore>
      <commentsBefore>--      submachineState &lt;- s.submachineState,</commentsBefore>
      <commentsBefore>--      top &lt;- s.top,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTimeEvent {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TimeEvent</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TimeEvent)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TimeEvent (</commentsBefore>
      <commentsBefore>--      when &lt;- s.when,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyCallEvent {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!CallEvent</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!CallEvent)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!CallEvent (</commentsBefore>
      <commentsBefore>--      operation &lt;- s.operation,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySignalEvent {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SignalEvent</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SignalEvent)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SignalEvent (</commentsBefore>
      <commentsBefore>--      signal &lt;- s.signal,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTransition {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Transition</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Transition)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Transition (</commentsBefore>
      <commentsBefore>--      effect &lt;- s.effect,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      stateMachine &lt;- s.stateMachine,</commentsBefore>
      <commentsBefore>--      trigger &lt;- s.trigger,</commentsBefore>
      <commentsBefore>--      guard &lt;- s.guard,</commentsBefore>
      <commentsBefore>--      source &lt;- s.source,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyCompositeState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!CompositeState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!CompositeState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!CompositeState (</commentsBefore>
      <commentsBefore>--      subvertex &lt;- s.subvertex,</commentsBefore>
      <commentsBefore>--      isConcurrent &lt;- s.isConcurrent,</commentsBefore>
      <commentsBefore>--      exit &lt;- s.exit,</commentsBefore>
      <commentsBefore>--      doActivity &lt;- s.doActivity,</commentsBefore>
      <commentsBefore>--      deferrableEvent &lt;- s.deferrableEvent,</commentsBefore>
      <commentsBefore>--      internalTransition &lt;- s.internalTransition,</commentsBefore>
      <commentsBefore>--      entry &lt;- s.entry,</commentsBefore>
      <commentsBefore>--      stateMachine &lt;- s.stateMachine,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyChangeEvent {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ChangeEvent</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ChangeEvent)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ChangeEvent (</commentsBefore>
      <commentsBefore>--      changeExpression &lt;- s.changeExpression,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyGuard {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Guard</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Guard)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Guard (</commentsBefore>
      <commentsBefore>--      transition &lt;- s.transition,</commentsBefore>
      <commentsBefore>--      expression &lt;- s.expression,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyPseudostate {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Pseudostate</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Pseudostate)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Pseudostate (</commentsBefore>
      <commentsBefore>--      kind &lt;- s.kind,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySimpleState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SimpleState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SimpleState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SimpleState (</commentsBefore>
      <commentsBefore>--      exit &lt;- s.exit,</commentsBefore>
      <commentsBefore>--      doActivity &lt;- s.doActivity,</commentsBefore>
      <commentsBefore>--      deferrableEvent &lt;- s.deferrableEvent,</commentsBefore>
      <commentsBefore>--      internalTransition &lt;- s.internalTransition,</commentsBefore>
      <commentsBefore>--      entry &lt;- s.entry,</commentsBefore>
      <commentsBefore>--      stateMachine &lt;- s.stateMachine,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySubmachineState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SubmachineState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SubmachineState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SubmachineState (</commentsBefore>
      <commentsBefore>--      submachine &lt;- s.submachine,</commentsBefore>
      <commentsBefore>--      subvertex &lt;- s.subvertex,</commentsBefore>
      <commentsBefore>--      isConcurrent &lt;- s.isConcurrent,</commentsBefore>
      <commentsBefore>--      exit &lt;- s.exit,</commentsBefore>
      <commentsBefore>--      doActivity &lt;- s.doActivity,</commentsBefore>
      <commentsBefore>--      deferrableEvent &lt;- s.deferrableEvent,</commentsBefore>
      <commentsBefore>--      internalTransition &lt;- s.internalTransition,</commentsBefore>
      <commentsBefore>--      entry &lt;- s.entry,</commentsBefore>
      <commentsBefore>--      stateMachine &lt;- s.stateMachine,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySynchState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SynchState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SynchState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SynchState (</commentsBefore>
      <commentsBefore>--      bound &lt;- s.bound,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyStubState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!StubState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!StubState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!StubState (</commentsBefore>
      <commentsBefore>--      referenceState &lt;- s.referenceState,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyFinalState {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!FinalState</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!FinalState)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!FinalState (</commentsBefore>
      <commentsBefore>--      exit &lt;- s.exit,</commentsBefore>
      <commentsBefore>--      doActivity &lt;- s.doActivity,</commentsBefore>
      <commentsBefore>--      deferrableEvent &lt;- s.deferrableEvent,</commentsBefore>
      <commentsBefore>--      internalTransition &lt;- s.internalTransition,</commentsBefore>
      <commentsBefore>--      entry &lt;- s.entry,</commentsBefore>
      <commentsBefore>--      stateMachine &lt;- s.stateMachine,</commentsBefore>
      <commentsBefore>--      outgoing &lt;- s.outgoing,</commentsBefore>
      <commentsBefore>--      incoming &lt;- s.incoming,</commentsBefore>
      <commentsBefore>--      container &lt;- s.container,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySignal {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Signal</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Signal)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Signal (</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyCreateAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!CreateAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!CreateAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!CreateAction (</commentsBefore>
      <commentsBefore>--      instantiation &lt;- s.instantiation,</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyDestroyAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!DestroyAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!DestroyAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!DestroyAction (</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyUninterpretedAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!UninterpretedAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!UninterpretedAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!UninterpretedAction (</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyAttributeLink {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!AttributeLink</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!AttributeLink)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!AttributeLink (</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      value &lt;- s.value,</commentsBefore>
      <commentsBefore>--      instance &lt;- s.instance,</commentsBefore>
      <commentsBefore>--      attribute &lt;- s.attribute,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyObject {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Object</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Object)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Object (</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyLink {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Link</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Link)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Link (</commentsBefore>
      <commentsBefore>--      connection &lt;- s.connection,</commentsBefore>
      <commentsBefore>--      association &lt;- s.association,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyLinkObject {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!LinkObject</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!LinkObject)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!LinkObject (</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      connection &lt;- s.connection,</commentsBefore>
      <commentsBefore>--      association &lt;- s.association,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyDataValue {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!DataValue</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!DataValue)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!DataValue (</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyCallAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!CallAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!CallAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!CallAction (</commentsBefore>
      <commentsBefore>--      operation &lt;- s.operation,</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySendAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SendAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SendAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SendAction (</commentsBefore>
      <commentsBefore>--      signal &lt;- s.signal,</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyActionSequence {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ActionSequence</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ActionSequence)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ActionSequence (</commentsBefore>
      <commentsBefore>--      action &lt;- s.action,</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyArgument {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Argument</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Argument)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Argument (</commentsBefore>
      <commentsBefore>--      action &lt;- s.action,</commentsBefore>
      <commentsBefore>--      value &lt;- s.value,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyReception {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Reception</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Reception)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Reception (</commentsBefore>
      <commentsBefore>--      signal &lt;- s.signal,</commentsBefore>
      <commentsBefore>--      specification &lt;- s.specification,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      parameter &lt;- s.parameter,</commentsBefore>
      <commentsBefore>--      isQuery &lt;- s.isQuery,</commentsBefore>
      <commentsBefore>--      owner &lt;- s.owner,</commentsBefore>
      <commentsBefore>--      ownerScope &lt;- s.ownerScope,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyLinkEnd {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!LinkEnd</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!LinkEnd)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!LinkEnd (</commentsBefore>
      <commentsBefore>--      qualifiedValue &lt;- s.qualifiedValue,</commentsBefore>
      <commentsBefore>--      link &lt;- s.link,</commentsBefore>
      <commentsBefore>--      associationEnd &lt;- s.associationEnd,</commentsBefore>
      <commentsBefore>--      instance &lt;- s.instance,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyReturnAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ReturnAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ReturnAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ReturnAction (</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyTerminateAction {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!TerminateAction</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!TerminateAction)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!TerminateAction (</commentsBefore>
      <commentsBefore>--      actionSequence &lt;- s.actionSequence,</commentsBefore>
      <commentsBefore>--      actualArgument &lt;- s.actualArgument,</commentsBefore>
      <commentsBefore>--      recurrence &lt;- s.recurrence,</commentsBefore>
      <commentsBefore>--      target &lt;- s.target,</commentsBefore>
      <commentsBefore>--      isAsynchronous &lt;- s.isAsynchronous,</commentsBefore>
      <commentsBefore>--      script &lt;- s.script,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyStimulus {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Stimulus</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Stimulus)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Stimulus (</commentsBefore>
      <commentsBefore>--      receiver &lt;- s.receiver,</commentsBefore>
      <commentsBefore>--      communicationLink &lt;- s.communicationLink,</commentsBefore>
      <commentsBefore>--      sender &lt;- s.sender,</commentsBefore>
      <commentsBefore>--      dispatchAction &lt;- s.dispatchAction,</commentsBefore>
      <commentsBefore>--      argument &lt;- s.argument,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyException {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Exception</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Exception)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Exception (</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyComponentInstance {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ComponentInstance</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ComponentInstance)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ComponentInstance (</commentsBefore>
      <commentsBefore>--      resident &lt;- s.resident,</commentsBefore>
      <commentsBefore>--      nodeInstance &lt;- s.nodeInstance,</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyNodeInstance {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!NodeInstance</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!NodeInstance)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!NodeInstance (</commentsBefore>
      <commentsBefore>--      resident &lt;- s.resident,</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopySubsystemInstance {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!SubsystemInstance</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!SubsystemInstance)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!SubsystemInstance (</commentsBefore>
      <commentsBefore>--      componentInstance &lt;- s.componentInstance,</commentsBefore>
      <commentsBefore>--      classifier &lt;- s.classifier,</commentsBefore>
      <commentsBefore>--      ownedLink &lt;- s.ownedLink,</commentsBefore>
      <commentsBefore>--      ownedInstance &lt;- s.ownedInstance,</commentsBefore>
      <commentsBefore>--      slot &lt;- s.slot,</commentsBefore>
      <commentsBefore>--      linkEnd &lt;- s.linkEnd,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsAfter>--rule CopyModel {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Model</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Model)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Model (</commentsAfter>
      <commentsAfter>--      elementImport &lt;- s.elementImport,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--rule CopySubsystem {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Subsystem</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Subsystem)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Subsystem (</commentsAfter>
      <commentsAfter>--      isInstantiable &lt;- s.isInstantiable,</commentsAfter>
      <commentsAfter>--      elementImport &lt;- s.elementImport,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyElementImport {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ElementImport</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ElementImport)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ElementImport (</commentsAfter>
      <commentsAfter>--      importedElement &lt;- s.importedElement,</commentsAfter>
      <commentsAfter>--      package &lt;- s.package,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      alias &lt;- s.alias,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <outPattern location="2612:3-2644:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="2613:5-2644:6" varName="t" variableExp="/0/@elements.8/@actionBlock/@statements.0/@expression/@source">
          <type xsi:type="ocl:OclModelElement" location="2613:9-2613:20" name="Package" model="/29"/>
          <bindings location="2614:7-2614:39" propertyName="elementImport">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2614:24-2614:39" name="elementImport">
              <source xsi:type="ocl:VariableExp" location="2614:24-2614:25" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2615:7-2615:41" propertyName="generalization">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2615:25-2615:41" name="generalization">
              <source xsi:type="ocl:VariableExp" location="2615:25-2615:26" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2616:7-2616:25" propertyName="isRoot">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2616:17-2616:25" name="isRoot">
              <source xsi:type="ocl:VariableExp" location="2616:17-2616:18" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2617:7-2617:25" propertyName="isLeaf">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2617:17-2617:25" name="isLeaf">
              <source xsi:type="ocl:VariableExp" location="2617:17-2617:18" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2618:7-2618:33" propertyName="isAbstract">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2618:21-2618:33" name="isAbstract">
              <source xsi:type="ocl:VariableExp" location="2618:21-2618:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2619:7-2619:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2619:21-2619:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="2619:21-2619:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2620:7-2620:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2620:27-2620:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="2620:27-2620:28" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2621:7-2621:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2621:18-2621:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="2621:18-2621:19" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2622:7-2622:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2622:21-2622:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="2622:21-2622:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2623:7-2623:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2623:21-2623:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="2623:21-2623:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2624:7-2624:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2624:21-2624:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="2624:21-2624:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2625:7-2625:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2625:28-2625:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="2625:28-2625:29" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2626:7-2626:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2626:20-2626:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="2626:20-2626:21" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2627:7-2627:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2627:22-2627:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="2627:22-2627:23" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2628:7-2628:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2628:15-2628:21" name="name">
              <source xsi:type="ocl:VariableExp" location="2628:15-2628:16" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2629:7-2629:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2629:21-2629:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="2629:21-2629:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2630:7-2630:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2630:26-2630:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="2630:26-2630:27" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2631:7-2631:37" propertyName="ownedElement">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2631:23-2631:37" name="ownedElement">
              <source xsi:type="ocl:VariableExp" location="2631:23-2631:24" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2632:7-2632:33" propertyName="targetFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2632:21-2632:33" name="targetFlow">
              <source xsi:type="ocl:VariableExp" location="2632:21-2632:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2633:7-2633:45" propertyName="clientDependency">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2633:27-2633:45" name="clientDependency">
              <source xsi:type="ocl:VariableExp" location="2633:27-2633:28" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2634:7-2634:27" propertyName="comment">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2634:18-2634:27" name="comment">
              <source xsi:type="ocl:VariableExp" location="2634:18-2634:19" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2635:7-2635:33" propertyName="sourceFlow">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2635:21-2635:33" name="sourceFlow">
              <source xsi:type="ocl:VariableExp" location="2635:21-2635:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2636:7-2636:33" propertyName="constraint">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2636:21-2636:33" name="constraint">
              <source xsi:type="ocl:VariableExp" location="2636:21-2636:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2637:7-2637:33" propertyName="stereotype">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2637:21-2637:33" name="stereotype">
              <source xsi:type="ocl:VariableExp" location="2637:21-2637:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2638:7-2638:47" propertyName="templateParameter">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2638:28-2638:47" name="templateParameter">
              <source xsi:type="ocl:VariableExp" location="2638:28-2638:29" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2639:7-2639:31" propertyName="namespace">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2639:20-2639:31" name="namespace">
              <source xsi:type="ocl:VariableExp" location="2639:20-2639:21" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2640:7-2640:35" propertyName="taggedValue">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2640:22-2640:35" name="taggedValue">
              <source xsi:type="ocl:VariableExp" location="2640:22-2640:23" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2641:7-2641:21" propertyName="name">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2641:15-2641:21" name="name">
              <source xsi:type="ocl:VariableExp" location="2641:15-2641:16" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2642:7-2642:33" propertyName="visibility">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2642:21-2642:33" name="visibility">
              <source xsi:type="ocl:VariableExp" location="2642:21-2642:22" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2643:7-2643:43" propertyName="isSpecification">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2643:26-2643:43" name="isSpecification">
              <source xsi:type="ocl:VariableExp" location="2643:26-2643:27" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <actionBlock location="2645:2-2647:3">
        <statements xsi:type="atl:ExpressionStat" location="2646:3-2646:57">
          <expression xsi:type="ocl:OperationCallExp" location="2646:3-2646:56" operationName="setElementIDbyRefType">
            <source xsi:type="ocl:VariableExp" location="2646:3-2646:4" referredVariable="/0/@elements.8/@outPattern/@elements.0"/>
            <arguments xsi:type="ocl:StringExp" location="2646:27-2646:42" stringSymbol="ElementRefXMI"/>
            <arguments xsi:type="ocl:NavigationOrAttributeCallExp" location="2646:44-2646:55" name="__xmiID__">
              <source xsi:type="ocl:VariableExp" location="2646:44-2646:45" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
            </arguments>
          </expression>
        </statements>
      </actionBlock>
      <inPattern location="2607:3-2611:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="2608:5-2608:20" varName="s" variableExp="/0/@elements.8/@inPattern/@filter/@source /0/@elements.8/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.2/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.3/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.4/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.5/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.6/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.7/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.8/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.9/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.10/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.11/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.12/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.13/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.14/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.15/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.16/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.17/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.18/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.19/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.20/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.21/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.22/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.23/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.24/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.25/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.26/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.27/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.28/@value/@source /0/@elements.8/@outPattern/@elements.0/@bindings.29/@value/@source /0/@elements.8/@actionBlock/@statements.0/@expression/@arguments.1/@source">
          <type xsi:type="ocl:OclModelElement" location="2608:9-2608:20" name="Package" model="/27"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="2610:7-2610:33" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="2610:7-2610:8" referredVariable="/0/@elements.8/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="2610:21-2610:32" name="Package" model="/28"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="2789:1-2799:2" name="CopyMultiplicity">
      <commentsBefore>--rule CopyModel {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Model</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Model)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Model (</commentsBefore>
      <commentsBefore>--      elementImport &lt;- s.elementImport,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--rule CopySubsystem {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!Subsystem</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!Subsystem)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!Subsystem (</commentsBefore>
      <commentsBefore>--      isInstantiable &lt;- s.isInstantiable,</commentsBefore>
      <commentsBefore>--      elementImport &lt;- s.elementImport,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      feature &lt;- s.feature,</commentsBefore>
      <commentsBefore>--      powertypeRange &lt;- s.powertypeRange,</commentsBefore>
      <commentsBefore>--      generalization &lt;- s.generalization,</commentsBefore>
      <commentsBefore>--      isRoot &lt;- s.isRoot,</commentsBefore>
      <commentsBefore>--      isLeaf &lt;- s.isLeaf,</commentsBefore>
      <commentsBefore>--      isAbstract &lt;- s.isAbstract,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification,</commentsBefore>
      <commentsBefore>--      ownedElement &lt;- s.ownedElement,</commentsBefore>
      <commentsBefore>--      targetFlow &lt;- s.targetFlow,</commentsBefore>
      <commentsBefore>--      clientDependency &lt;- s.clientDependency,</commentsBefore>
      <commentsBefore>--      comment &lt;- s.comment,</commentsBefore>
      <commentsBefore>--      sourceFlow &lt;- s.sourceFlow,</commentsBefore>
      <commentsBefore>--      constraint &lt;- s.constraint,</commentsBefore>
      <commentsBefore>--      stereotype &lt;- s.stereotype,</commentsBefore>
      <commentsBefore>--      templateParameter &lt;- s.templateParameter,</commentsBefore>
      <commentsBefore>--      namespace &lt;- s.namespace,</commentsBefore>
      <commentsBefore>--      taggedValue &lt;- s.taggedValue,</commentsBefore>
      <commentsBefore>--      name &lt;- s.name,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <commentsBefore>--rule CopyElementImport {</commentsBefore>
      <commentsBefore>--  from</commentsBefore>
      <commentsBefore>--    s : MM1!ElementImport</commentsBefore>
      <commentsBefore>--    (</commentsBefore>
      <commentsBefore>--      s.oclIsTypeOf(MM1!ElementImport)</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--  to</commentsBefore>
      <commentsBefore>--    t : MM2!ElementImport (</commentsBefore>
      <commentsBefore>--      importedElement &lt;- s.importedElement,</commentsBefore>
      <commentsBefore>--      package &lt;- s.package,</commentsBefore>
      <commentsBefore>--      visibility &lt;- s.visibility,</commentsBefore>
      <commentsBefore>--      alias &lt;- s.alias,</commentsBefore>
      <commentsBefore>--      isSpecification &lt;- s.isSpecification</commentsBefore>
      <commentsBefore>--    )</commentsBefore>
      <commentsBefore>--	do{</commentsBefore>
      <commentsBefore>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--	}</commentsBefore>
      <commentsBefore>--</commentsBefore>
      <outPattern location="2795:3-2798:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="2796:5-2798:6" varName="t">
          <type xsi:type="ocl:OclModelElement" location="2796:9-2796:25" name="Multiplicity" model="/32"/>
          <bindings location="2797:7-2797:23" propertyName="range">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2797:16-2797:23" name="range">
              <source xsi:type="ocl:VariableExp" location="2797:16-2797:17" referredVariable="/0/@elements.9/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <inPattern location="2790:3-2794:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="2791:5-2791:25" varName="s" variableExp="/0/@elements.9/@inPattern/@filter/@source /0/@elements.9/@outPattern/@elements.0/@bindings.0/@value/@source">
          <type xsi:type="ocl:OclModelElement" location="2791:9-2791:25" name="Multiplicity" model="/30"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="2793:7-2793:38" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="2793:7-2793:8" referredVariable="/0/@elements.9/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="2793:21-2793:37" name="Multiplicity" model="/31"/>
        </filter>
      </inPattern>
    </elements>
    <elements xsi:type="atl:MatchedRule" location="2801:1-2813:2" name="CopyMultiplicityRange">
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Expression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Expression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Expression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyBooleanExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!BooleanExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!BooleanExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!BooleanExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTypeExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TypeExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TypeExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TypeExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyMappingExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!MappingExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!MappingExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!MappingExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyProcedureExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ProcedureExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ProcedureExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ProcedureExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyObjectSetExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ObjectSetExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ObjectSetExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ObjectSetExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyActionExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ActionExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ActionExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ActionExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyIterationExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!IterationExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!IterationExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!IterationExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyTimeExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!TimeExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!TimeExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!TimeExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyArgListsExpression {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ArgListsExpression</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ArgListsExpression)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ArgListsExpression (</commentsAfter>
      <commentsAfter>--      language &lt;- s.language,</commentsAfter>
      <commentsAfter>--      body &lt;- s.body</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyUseCase {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!UseCase</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!UseCase)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!UseCase (</commentsAfter>
      <commentsAfter>--      extend &lt;- s.extend,</commentsAfter>
      <commentsAfter>--      include &lt;- s.include,</commentsAfter>
      <commentsAfter>--      extensionPoint &lt;- s.extensionPoint,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyActor {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Actor</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Actor)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Actor (</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyUseCaseInstance {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!UseCaseInstance</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!UseCaseInstance)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!UseCaseInstance (</commentsAfter>
      <commentsAfter>--      componentInstance &lt;- s.componentInstance,</commentsAfter>
      <commentsAfter>--      classifier &lt;- s.classifier,</commentsAfter>
      <commentsAfter>--      ownedLink &lt;- s.ownedLink,</commentsAfter>
      <commentsAfter>--      ownedInstance &lt;- s.ownedInstance,</commentsAfter>
      <commentsAfter>--      slot &lt;- s.slot,</commentsAfter>
      <commentsAfter>--      linkEnd &lt;- s.linkEnd,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyExtend {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Extend</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Extend)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Extend (</commentsAfter>
      <commentsAfter>--      extensionPoint &lt;- s.extensionPoint,</commentsAfter>
      <commentsAfter>--      base &lt;- s.base,</commentsAfter>
      <commentsAfter>--      extension &lt;- s.extension,</commentsAfter>
      <commentsAfter>--      condition &lt;- s.condition,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyInclude {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Include</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Include)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Include (</commentsAfter>
      <commentsAfter>--      base &lt;- s.base,</commentsAfter>
      <commentsAfter>--      addition &lt;- s.addition,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyExtensionPoint {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ExtensionPoint</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ExtensionPoint)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ExtensionPoint (</commentsAfter>
      <commentsAfter>--      useCase &lt;- s.useCase,</commentsAfter>
      <commentsAfter>--      location &lt;- s.location,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyActivityGraph {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ActivityGraph</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ActivityGraph)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ActivityGraph (</commentsAfter>
      <commentsAfter>--      partition &lt;- s.partition,</commentsAfter>
      <commentsAfter>--      context &lt;- s.context,</commentsAfter>
      <commentsAfter>--      transitions &lt;- s.transitions,</commentsAfter>
      <commentsAfter>--      submachineState &lt;- s.submachineState,</commentsAfter>
      <commentsAfter>--      top &lt;- s.top,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyPartition {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!Partition</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!Partition)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!Partition (</commentsAfter>
      <commentsAfter>--      activityGraph &lt;- s.activityGraph,</commentsAfter>
      <commentsAfter>--      contents &lt;- s.contents,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopySubactivityState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!SubactivityState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!SubactivityState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!SubactivityState (</commentsAfter>
      <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
      <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
      <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
      <commentsAfter>--      submachine &lt;- s.submachine,</commentsAfter>
      <commentsAfter>--      subvertex &lt;- s.subvertex,</commentsAfter>
      <commentsAfter>--      isConcurrent &lt;- s.isConcurrent,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyActionState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ActionState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ActionState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ActionState (</commentsAfter>
      <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
      <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
      <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyCallState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!CallState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!CallState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!CallState (</commentsAfter>
      <commentsAfter>--      isDynamic &lt;- s.isDynamic,</commentsAfter>
      <commentsAfter>--      dynamicArguments &lt;- s.dynamicArguments,</commentsAfter>
      <commentsAfter>--      dynamicMultiplicity &lt;- s.dynamicMultiplicity,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyObjectFlowState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ObjectFlowState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ObjectFlowState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ObjectFlowState (</commentsAfter>
      <commentsAfter>--      type &lt;- s.type,</commentsAfter>
      <commentsAfter>--      parameter &lt;- s.parameter,</commentsAfter>
      <commentsAfter>--      isSynch &lt;- s.isSynch,</commentsAfter>
      <commentsAfter>--      exit &lt;- s.exit,</commentsAfter>
      <commentsAfter>--      doActivity &lt;- s.doActivity,</commentsAfter>
      <commentsAfter>--      deferrableEvent &lt;- s.deferrableEvent,</commentsAfter>
      <commentsAfter>--      internalTransition &lt;- s.internalTransition,</commentsAfter>
      <commentsAfter>--      entry &lt;- s.entry,</commentsAfter>
      <commentsAfter>--      stateMachine &lt;- s.stateMachine,</commentsAfter>
      <commentsAfter>--      outgoing &lt;- s.outgoing,</commentsAfter>
      <commentsAfter>--      incoming &lt;- s.incoming,</commentsAfter>
      <commentsAfter>--      container &lt;- s.container,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--</commentsAfter>
      <commentsAfter>--rule CopyClassifierInState {</commentsAfter>
      <commentsAfter>--  from</commentsAfter>
      <commentsAfter>--    s : MM1!ClassifierInState</commentsAfter>
      <commentsAfter>--    (</commentsAfter>
      <commentsAfter>--      s.oclIsTypeOf(MM1!ClassifierInState)</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--  to</commentsAfter>
      <commentsAfter>--    t : MM2!ClassifierInState (</commentsAfter>
      <commentsAfter>--      inState &lt;- s.inState,</commentsAfter>
      <commentsAfter>--      type &lt;- s.type,</commentsAfter>
      <commentsAfter>--      feature &lt;- s.feature,</commentsAfter>
      <commentsAfter>--      powertypeRange &lt;- s.powertypeRange,</commentsAfter>
      <commentsAfter>--      generalization &lt;- s.generalization,</commentsAfter>
      <commentsAfter>--      isRoot &lt;- s.isRoot,</commentsAfter>
      <commentsAfter>--      isLeaf &lt;- s.isLeaf,</commentsAfter>
      <commentsAfter>--      isAbstract &lt;- s.isAbstract,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification,</commentsAfter>
      <commentsAfter>--      ownedElement &lt;- s.ownedElement,</commentsAfter>
      <commentsAfter>--      targetFlow &lt;- s.targetFlow,</commentsAfter>
      <commentsAfter>--      clientDependency &lt;- s.clientDependency,</commentsAfter>
      <commentsAfter>--      comment &lt;- s.comment,</commentsAfter>
      <commentsAfter>--      sourceFlow &lt;- s.sourceFlow,</commentsAfter>
      <commentsAfter>--      constraint &lt;- s.constraint,</commentsAfter>
      <commentsAfter>--      stereotype &lt;- s.stereotype,</commentsAfter>
      <commentsAfter>--      templateParameter &lt;- s.templateParameter,</commentsAfter>
      <commentsAfter>--      namespace &lt;- s.namespace,</commentsAfter>
      <commentsAfter>--      taggedValue &lt;- s.taggedValue,</commentsAfter>
      <commentsAfter>--      name &lt;- s.name,</commentsAfter>
      <commentsAfter>--      visibility &lt;- s.visibility,</commentsAfter>
      <commentsAfter>--      isSpecification &lt;- s.isSpecification</commentsAfter>
      <commentsAfter>--    )</commentsAfter>
      <commentsAfter>--	do{</commentsAfter>
      <commentsAfter>--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <commentsAfter>--	}</commentsAfter>
      <outPattern location="2807:3-2812:6">
        <elements xsi:type="atl:SimpleOutPatternElement" location="2808:5-2812:6" varName="t">
          <type xsi:type="ocl:OclModelElement" location="2808:9-2808:30" name="MultiplicityRange" model="/35"/>
          <bindings location="2809:7-2809:37" propertyName="multiplicity">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2809:23-2809:37" name="multiplicity">
              <source xsi:type="ocl:VariableExp" location="2809:23-2809:24" referredVariable="/0/@elements.10/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2810:7-2810:23" propertyName="lower">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2810:16-2810:23" name="lower">
              <source xsi:type="ocl:VariableExp" location="2810:16-2810:17" referredVariable="/0/@elements.10/@inPattern/@elements.0"/>
            </value>
          </bindings>
          <bindings location="2811:7-2811:23" propertyName="upper">
            <value xsi:type="ocl:NavigationOrAttributeCallExp" location="2811:16-2811:23" name="upper">
              <source xsi:type="ocl:VariableExp" location="2811:16-2811:17" referredVariable="/0/@elements.10/@inPattern/@elements.0"/>
            </value>
          </bindings>
        </elements>
      </outPattern>
      <inPattern location="2802:3-2806:6">
        <elements xsi:type="atl:SimpleInPatternElement" location="2803:5-2803:30" varName="s" variableExp="/0/@elements.10/@inPattern/@filter/@source /0/@elements.10/@outPattern/@elements.0/@bindings.0/@value/@source /0/@elements.10/@outPattern/@elements.0/@bindings.1/@value/@source /0/@elements.10/@outPattern/@elements.0/@bindings.2/@value/@source">
          <type xsi:type="ocl:OclModelElement" location="2803:9-2803:30" name="MultiplicityRange" model="/33"/>
        </elements>
        <filter xsi:type="ocl:OperationCallExp" location="2805:7-2805:43" operationName="oclIsTypeOf">
          <source xsi:type="ocl:VariableExp" location="2805:7-2805:8" referredVariable="/0/@elements.10/@inPattern/@elements.0"/>
          <arguments xsi:type="ocl:OclModelElement" location="2805:21-2805:42" name="MultiplicityRange" model="/34"/>
        </filter>
      </inPattern>
    </elements>
  </atl:Module>
  <ocl:OclModel location="2:14-2:18" name="UML2" model="/0/@outModels.0"/>
  <ocl:OclModel location="2:29-2:33" name="UML2" model="/0/@inModels.0"/>
  <ocl:OclModel location="54:9-54:12" name="MM1" elements="/0/@elements.0/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="56:21-56:24" name="MM1" elements="/0/@elements.0/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="59:9-59:12" name="MM2" elements="/0/@elements.0/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="104:9-104:12" name="MM1" elements="/0/@elements.1/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="106:21-106:24" name="MM1" elements="/0/@elements.1/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="109:9-109:12" name="MM2" elements="/0/@elements.1/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="151:9-151:12" name="MM1" elements="/0/@elements.2/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="153:21-153:24" name="MM1" elements="/0/@elements.2/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="156:9-156:12" name="MM2" elements="/0/@elements.2/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="312:9-312:12" name="MM1" elements="/0/@elements.3/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="314:21-314:24" name="MM1" elements="/0/@elements.3/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="317:9-317:12" name="MM2" elements="/0/@elements.3/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="352:9-352:12" name="MM1" elements="/0/@elements.4/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="354:21-354:24" name="MM1" elements="/0/@elements.4/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="357:9-357:12" name="MM2" elements="/0/@elements.4/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="397:9-397:12" name="MM1" elements="/0/@elements.5/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="399:21-399:24" name="MM1" elements="/0/@elements.5/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="402:9-402:12" name="MM2" elements="/0/@elements.5/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="506:9-506:12" name="MM1" elements="/0/@elements.6/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="508:21-508:24" name="MM1" elements="/0/@elements.6/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="511:9-511:12" name="MM2" elements="/0/@elements.6/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="549:9-549:12" name="MM1" elements="/0/@elements.7/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="551:21-551:24" name="MM1" elements="/0/@elements.7/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="554:9-554:12" name="MM2" elements="/0/@elements.7/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="2608:9-2608:12" name="MM1" elements="/0/@elements.8/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="2610:21-2610:24" name="MM1" elements="/0/@elements.8/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="2613:9-2613:12" name="MM2" elements="/0/@elements.8/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="2791:9-2791:12" name="MM1" elements="/0/@elements.9/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="2793:21-2793:24" name="MM1" elements="/0/@elements.9/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="2796:9-2796:12" name="MM2" elements="/0/@elements.9/@outPattern/@elements.0/@type"/>
  <ocl:OclModel location="2803:9-2803:12" name="MM1" elements="/0/@elements.10/@inPattern/@elements.0/@type"/>
  <ocl:OclModel location="2805:21-2805:24" name="MM1" elements="/0/@elements.10/@inPattern/@filter/@arguments.0"/>
  <ocl:OclModel location="2808:9-2808:12" name="MM2" elements="/0/@elements.10/@outPattern/@elements.0/@type"/>
</xmi:XMI>
