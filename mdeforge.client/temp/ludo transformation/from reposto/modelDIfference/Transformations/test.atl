module MetamodelToDiff; -- Module Template
create OUT : KM3 from  simpleUML:KM3 ;



rule Metamodel2Metamodel {
	from
		s: KM3!Metamodel
	
	to
		t: KM3!Metamodel(
			contents <- s.contents
		)
}
 

rule PackagePrimitive 
{
	from
		s: KM3!Package
		(
			s.name = 'PrimitiveTypes'
		)
	to
		t: KM3!Package
		(
			name <- s.name,
			contents <- s.contents,
			metamodel <-s.metamodel
		)
}

rule Package2PackageDiff 
{
	from
		s: KM3!Package
		(
			not (s.name='PrimitiveTypes')
		)
	to
		t: KM3!Package(
			name <- s.name+'_AfterTransfer',
			contents <- Sequence
			   {
				ConflictBlock,PatternBox,BooleanRestriction, DifferenceElement, ConflictRelation, ConflictEndLink, MetaData, IntegerProperty, StringProperty, BooleanProperty,
				ReconcilationStrategy, Rule,	  OCLExpression,OCLCriteriaExpression, OCLRuleExpression,
				s.contents
				},
			metamodel<- s.metamodel
		),
		
		OCLRuleExpression: KM3!Class
		(
			name <- 'OCLRuleExpression',
			supertypes <- OCLExpression
		),
		
		
		OCLCriteriaExpression: KM3!Class
		(
			name <- 'OCLCriteriaExpression',
			supertypes <- OCLExpression
		),
		
		composedRules: KM3!Reference
		(
			name<-'composedRules',
			package<-s.package,
			isContainer<-false,
			owner<-OCLCriteriaExpression,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-Rule
		),
		
		OCLExpression: KM3!Class
		(
			name <- 'OCLExpression'
		),
		
		Rule: KM3!Class
		(
			name <- 'Rule',
			supertypes <- OCLRuleExpression
		),
		
		cRule: KM3!Reference
		(
			name<-'cRule',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictBlock,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-Rule
		),
		rRule: KM3!Reference
		(
			name<-'rRule',
			package<-s.package,
			isContainer<-false,
			owner<-ReconcilationStrategy,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-Rule
		),	
		
		
		ReconcilationStrategy: KM3!Class
		(
			name <- 'ReconcilationStrategy'
		),
		
		strategy: KM3!Reference
		(
			name<-'strategy',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictRelation,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-ReconcilationStrategy
		),
		
		criterion: KM3!Reference
		(
			name<-'criterion',
			package<-s.package,
			isContainer<-true,
			owner<-ReconcilationStrategy,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-OCLCriteriaExpression
		),
		
		ConflictBlock : KM3!Class ( --add Conflict Block
			name <- 'ConflictBlock',
			isAbstract <- false
		),
		
		PatternBox :KM3!Class
		(
			name <- 'PatternBox',
			isAbstract <- false
		),
		
		BooleanRestriction :KM3!Class
		(
			name <- 'BooleanRestriction'
			
		),
		
		restrictions : KM3!Reference (
			name<-'restrictions',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictBlock,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-BooleanRestriction
			),
			
			next: KM3!Reference (
			name<-'next',
			package<-s.package,
			isContainer<-false,
			owner<-BooleanRestriction,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-BooleanRestriction
			),
		
		patternBox : KM3!Reference (
			name<-'patternBox',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictBlock,
	--		subsetOf<-s.subsetOf,
	--		derivedFrom<-s.derivedFrom,
			lower <- 0,
			upper<-1, 
			isOrdered <-false,
			isUnique <-false,
			type <-PatternBox
			),
			
			pattern : KM3!Reference (
			name<-'pattern',
			package<-s.package,
			isContainer<-false,
			owner<-ConflictEndLink,
			lower <- 0,
			upper<-1, 
			isOrdered <-false,
			isUnique <-false,
			type <-PatternBox
			),
			
			DifferenceElement :KM3!Class
			(
				name <- 'DifferenceElement'
			),
			
			element: KM3!Reference (
			name<-'element',
			package<-s.package,
			isContainer<-false,
			owner<-BooleanRestriction,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-DifferenceElement
			),
			
			differenceElement: KM3!Reference (
			name<-'differenceElement',
			package<-s.package,
			isContainer<-true,
			owner<-PatternBox,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-DifferenceElement
			),
			
			ConflictRelation :KM3!Class
			(
				name <- 'ConflictRelation'
			),
			
			conflictRelation: KM3!Reference (
			name<-'conflictRelation',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictBlock,
			lower <- 0,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-ConflictRelation
			),
			
			ConflictEndLink : KM3!Class
			(
				name <- 'ConflictEndLink'
			),
			
			right: KM3!Reference (
			name<-'right',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictRelation,
			lower <- 1,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-ConflictEndLink
			),
			
			left: KM3!Reference (
			name<-'left',
			package<-s.package,
			isContainer<-true,
			owner<-ConflictRelation,
			lower <- 1,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-ConflictEndLink
			),
			
			MetaData :KM3!Class
			(
				name <- 'MetaData'
			),
			
			md: KM3!Reference (
			name<-'md',
			package<-s.package,
			isContainer<-true,
			owner<-DifferenceElement,
			lower <- 1,
			upper<- 1, 
			isOrdered <-false,
			isUnique <-false,
			type <-MetaData
			),
			
			BooleanProperty : KM3!Class
			(
				name <-'BooleanProperty',
				supertypes <- MetaData
			),
			
			StringProperty : KM3!Class
			(
				name <- 'StringProperty',
				supertypes <- MetaData
			),
			
			IntegerProperty : KM3!Class
			(
				name <-'IntegerProperty',
				supertypes <- MetaData
			)
			
}

rule DeletedClassGroup
{
	from
		s: KM3!Class
		(
			(s.name->startsWith('Deleted')  and s.name <> 'Deleted') or (s.name->startsWith('Changed')  and s.name <> 'Changed')  or (s.name->startsWith('Added')  and s.name <> 'Added')
		)
	to
		t:KM3!Class
		(
			name <- s.name,
			package <- s.package,
			supertypes<-s.supertypes			
		)	
}

rule DeletedClass
{
	from
		s: KM3!Class
		(
			 s.name = 'Deleted'
		)
	to
		t:KM3!Class
		(
			name <- s.name,
			package <- s.package,
			supertypes<- Set{s.supertypes, thisModule.resolveTemp(s.package , 'DifferenceElement')}	
		)	
}

rule ChangedClass
{
	from
		s: KM3!Class
		(
			 s.name = 'Changed'
		)
	to
		t:KM3!Class
		(
			name <- s.name,
			package <- s.package,
			supertypes<- Set{s.supertypes, thisModule.resolveTemp(s.package , 'DifferenceElement')}	
		)	
}

rule AddedClass
{
	from
		s: KM3!Class
		(
			 s.name = 'Added'
		)
	to
		t:KM3!Class
		(
			name <- s.name,
			package <- s.package,
			supertypes<- Set{s.supertypes, thisModule.resolveTemp(s.package , 'DifferenceElement')}	
		)	
}
















