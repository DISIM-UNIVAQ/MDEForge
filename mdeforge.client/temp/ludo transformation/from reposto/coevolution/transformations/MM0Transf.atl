-- @nsURI PetriNetMM0=PetriNetMM0

module MM0Transf; -- Module Template
create OUT : PetriNetMM0 from IN : PetriNetMM0;

helper context PetriNetMM0!Place def: getName(): String=
	if(not self.name.oclIsUndefined() and  self.name<>'')then 
	self.name
	
	else 
		'Default'
		endif
	;
helper context PetriNetMM0!Place def: getSrc(): PetriNetMM0!Transition=
	if(not self.src.oclIsUndefined() )then 
	self.src
	
	else 
		OclUndefined
		endif
	;

helper context PetriNetMM0!Place def: isPlace(): Boolean=
	if(self.oclType()=PetriNetMM0!Place)then 
	true
	
	else 
		false.debug(self.oclType().toString())
		endif
	;

helper context PetriNetMM0!Net def: isNet(): Boolean=
	if(self.oclType()=PetriNetMM0!Net)then 
	true
	
	else 
		false
		endif
	;

rule Model{
	from p:   PetriNetMM0!PetriNetModel
	to t: PetriNetMM0!PetriNetModel(
	
	elements<-p.elements
	)
}

rule Place extends NetElement{
	from p: PetriNetMM0!Place(p.oclIsTypeOf(PetriNetMM0!Place))
	to t: PetriNetMM0!Place(
		net<-p.net,
	name<-'new '+p.getName().toString()	,
	src<-p.src,
	dst<-p.dst,
	label<-'new'+p.label+'_'+p.name.toString()
	)do{
		p.isPlace().toString().println();
	}
}
rule Transitions extends NetElement{
	from s: PetriNetMM0!Transition
	to t: PetriNetMM0!Transition(
	name<-'new '+s.name.toString(),
	net<-s.net,
	src<-s.src,
	dst<-s.dst,
	label<-'new'+s.label+'_'+s.name.toString()
	)
	, 
	t1: PetriNetMM0!Transition(
	name<-'new '+s.name.toString(),
	net<-s.net,
	src<-s.src,
	dst<-s.dst,
	label<-'new'+s.label+'_'+s.name.toString()
	)
}
rule NetElement{
	from s: PetriNetMM0!NetElement(s.oclIsTypeOf(PetriNetMM0!NetElement))
	to t: PetriNetMM0!NetElement(
		relevance<-s.relevance+1
	)
}
rule Net {
	from p: PetriNetMM0!Net
	to t: PetriNetMM0!Net(
	name<-'new '+p.name.toString()	,
	places<-p.transitions,
	transitions<-p.places
	)
}


