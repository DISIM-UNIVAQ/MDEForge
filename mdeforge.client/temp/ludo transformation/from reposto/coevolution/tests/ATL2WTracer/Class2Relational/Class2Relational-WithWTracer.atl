-- module comment
module Class2Relational;
create OUT : Relational, trace : Trace from IN : Class;

helper def: __wmodel : Trace!TraceModel =
  OclUndefined;

helper def: __model_IN : Trace!TraceModelRef =
  OclUndefined;

helper def: __model_OUT : Trace!TraceModelRef =
  OclUndefined;

entrypoint rule InitTrace() {
  to
    wmodel : Trace!TraceModel (
      wovenModels <- Sequence {model_IN, model_OUT}
    ),
    model_IN : Trace!TraceModelRef (
      name <- 'IN'
    ),
    model_OUT : Trace!TraceModelRef (
      name <- 'OUT'
    )
  do {
    thisModule.__wmodel <- wmodel;
    thisModule.__model_IN <- model_IN;
    thisModule.__model_OUT <- model_OUT;
  }
}

-- inheritance not supported yet
-- issue: choose an object-id Type (Integer, String?).
-- We choose Integer here, assuming this type is defined in the source model.
helper def: objectIdType : Relational!Type =
  Class!DataType.allInstances()->select(e |
    e.name = 'Integer'
  )->first();

rule Class2Table {
  from
    c : Class!Class
  to
    t : Relational!Table (
      name <- c.name,
      -- Columns are generated from Attributes in another rule not explicitly called here !
      col <- Sequence {key}->union(c.attr->select(e |
        not e.multiValued
      )),
      key <- Set {key}
    ),
    key : Relational!Column (
      name <- 'objectId',
      -- EBNFEXTRACTOR TEST: same line as name
      type <- thisModule.objectIdType
    ),
    __traceLink : Trace!TraceLink (
      name <- 'Class2Table',
      sourceElements <- Sequence {__LinkEnd_c},
      targetElements <- Sequence {__LinkEnd_t, __LinkEnd_key},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_c : Trace!TraceLinkEnd (
      element <- __elementRef_c
    ),
    __elementRef_c : Trace!ElementRef (
      ref <- c.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_t : Trace!TraceLinkEnd (
      element <- __elementRef_t
    ),
    __elementRef_t : Trace!ElementRef (
      ref <- t.__xmiID__,
      modelRef <- thisModule.__model_OUT
    ),
    __LinkEnd_key : Trace!TraceLinkEnd (
      element <- __elementRef_key
    ),
    __elementRef_key : Trace!ElementRef (
      ref <- key.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}

rule DataType2Type {
  from
    dt : Class!DataType
  to
    t : Relational!Type (
      name <- dt.name
    ),
    __traceLink : Trace!TraceLink (
      name <- 'DataType2Type',
      sourceElements <- Sequence {__LinkEnd_dt},
      targetElements <- Sequence {__LinkEnd_t},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_dt : Trace!TraceLinkEnd (
      element <- __elementRef_dt
    ),
    __elementRef_dt : Trace!ElementRef (
      ref <- dt.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_t : Trace!TraceLinkEnd (
      element <- __elementRef_t
    ),
    __elementRef_t : Trace!ElementRef (
      ref <- t.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}

rule DataTypeAttribute2Column {
  from
    a : Class!Attribute
    (
      a.type.oclIsKindOf(Class!DataType) and not a.multiValued
    )
  to
    c : Relational!Column (
      name <- a.name,
      type <- a.type -- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
      --			owner <- [Class2Type.key]a.owner
      --			owner <- thisModule.resolveTemp(a.owner, 'key')
      
    ),
    __traceLink : Trace!TraceLink (
      name <- 'DataTypeAttribute2Column',
      sourceElements <- Sequence {__LinkEnd_a},
      targetElements <- Sequence {__LinkEnd_c},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_a : Trace!TraceLinkEnd (
      element <- __elementRef_a
    ),
    __elementRef_a : Trace!ElementRef (
      ref <- a.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_c : Trace!TraceLinkEnd (
      element <- __elementRef_c
    ),
    __elementRef_c : Trace!ElementRef (
      ref <- c.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}

rule MultiValuedDataTypeAttribute2Column {
  from
    a : Class!Attribute
    (
      a.type.oclIsKindOf(Class!DataType) and a.multiValued
    )
  to
    t : Relational!Table (
      name <- a.owner.name + '_' + a.name,
      col <- Sequence {id, value}
    ),
    id : Relational!Column (
      name <- a.owner.name.firstToLower() + 'Id',
      type <- thisModule.objectIdType
    ),
    value : Relational!Column (
      name <- a.name,
      type <- a.type
    ),
    __traceLink : Trace!TraceLink (
      name <- 'MultiValuedDataTypeAttribute2Column',
      sourceElements <- Sequence {__LinkEnd_a},
      targetElements <- Sequence {__LinkEnd_t, __LinkEnd_id, __LinkEnd_value},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_a : Trace!TraceLinkEnd (
      element <- __elementRef_a
    ),
    __elementRef_a : Trace!ElementRef (
      ref <- a.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_t : Trace!TraceLinkEnd (
      element <- __elementRef_t
    ),
    __elementRef_t : Trace!ElementRef (
      ref <- t.__xmiID__,
      modelRef <- thisModule.__model_OUT
    ),
    __LinkEnd_id : Trace!TraceLinkEnd (
      element <- __elementRef_id
    ),
    __elementRef_id : Trace!ElementRef (
      ref <- id.__xmiID__,
      modelRef <- thisModule.__model_OUT
    ),
    __LinkEnd_value : Trace!TraceLinkEnd (
      element <- __elementRef_value
    ),
    __elementRef_value : Trace!ElementRef (
      ref <- value.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}

-- BETWEEN MultiValuedDataTypeAttribute2Column and ClassAttribute2Column
rule ClassAttribute2Column {
  from
    a : Class!Attribute
    (
      a.type.oclIsKindOf(Class!Class) and not a.multiValued
    )
  to
    foreignKey : Relational!Column (
      name <- a.name + 'Id',
      type <- thisModule.objectIdType
    ),
    __traceLink : Trace!TraceLink (
      name <- 'ClassAttribute2Column',
      sourceElements <- Sequence {__LinkEnd_a},
      targetElements <- Sequence {__LinkEnd_foreignKey},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_a : Trace!TraceLinkEnd (
      element <- __elementRef_a
    ),
    __elementRef_a : Trace!ElementRef (
      ref <- a.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_foreignKey : Trace!TraceLinkEnd (
      element <- __elementRef_foreignKey
    ),
    __elementRef_foreignKey : Trace!ElementRef (
      ref <- foreignKey.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}

rule MultiValuedClassAttribute2Column {
  from
    a : Class!Attribute
    (
      a.type.oclIsKindOf(Class!Class) and a.multiValued
    )
  to
    t : Relational!Table (
      name <- a.owner.name + '_' + a.name,
      col <- Sequence {id, foreignKey}
    ),
    id : Relational!Column (
      name <- a.owner.name.firstToLower() + 'Id',
      type <- thisModule.objectIdType
    ),
    foreignKey : Relational!Column (
      name <- a.name + 'Id',
      type <- thisModule.objectIdType
    ),
    __traceLink : Trace!TraceLink (
      name <- 'MultiValuedClassAttribute2Column',
      sourceElements <- Sequence {__LinkEnd_a},
      targetElements <- Sequence {__LinkEnd_t, __LinkEnd_id, __LinkEnd_foreignKey},
      model <- thisModule.__wmodel
    ),
    __LinkEnd_a : Trace!TraceLinkEnd (
      element <- __elementRef_a
    ),
    __elementRef_a : Trace!ElementRef (
      ref <- a.__xmiID__,
      modelRef <- thisModule.__model_IN
    ),
    __LinkEnd_t : Trace!TraceLinkEnd (
      element <- __elementRef_t
    ),
    __elementRef_t : Trace!ElementRef (
      ref <- t.__xmiID__,
      modelRef <- thisModule.__model_OUT
    ),
    __LinkEnd_id : Trace!TraceLinkEnd (
      element <- __elementRef_id
    ),
    __elementRef_id : Trace!ElementRef (
      ref <- id.__xmiID__,
      modelRef <- thisModule.__model_OUT
    ),
    __LinkEnd_foreignKey : Trace!TraceLinkEnd (
      element <- __elementRef_foreignKey
    ),
    __elementRef_foreignKey : Trace!ElementRef (
      ref <- foreignKey.__xmiID__,
      modelRef <- thisModule.__model_OUT
    )
}
