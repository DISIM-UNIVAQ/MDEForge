module Copy;
create OUT : MM2 from IN : MM1;

--rule CopyCollaboration {
--  from
--    s : MM1!Collaboration
--    (
--      s.oclIsTypeOf(MM1!Collaboration)
--    )
--  to
--    t : MM2!Collaboration (
--      usedCollaboration <- s.usedCollaboration,
--      representedClassifier <- s.representedClassifier,
--      interaction <- s.interaction,
--      constrainingElement <- s.constrainingElement,
--      representedOperation <- s.representedOperation,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      --namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

rule CopyClassifierRole {
  from
    s : MM1!ClassifierRole
    (
      s.oclIsTypeOf(MM1!ClassifierRole)
    )
  to
    t : MM2!ClassifierRole (
      base <- s.base,
      availableContents <- s.availableContents,
      conformingInstance <- s.conformingInstance,
      availableFeature <- s.availableFeature,
      multiplicity <- s.multiplicity,
      feature <- s.feature,
      powertypeRange <- s.powertypeRange,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification,
      ownedElement <- s.ownedElement,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

rule CopyAssociationRole {
  from
    s : MM1!AssociationRole
    (
      s.oclIsTypeOf(MM1!AssociationRole)
    )
  to
    t : MM2!AssociationRole (
      message <- s.message,
      base <- s.base,
      conformingLink <- s.conformingLink,
      multiplicity <- s.multiplicity,
      connection <- s.connection,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}
--
rule CopyAssociationEndRole {
  from
    s : MM1!AssociationEndRole
    (
      s.oclIsTypeOf(MM1!AssociationEndRole)
    )
  to
    t : MM2!AssociationEndRole (
      availableQualifier <- s.availableQualifier,
      base <- s.base,
      collaborationMultiplicity <- s.collaborationMultiplicity,
      participant <- s.participant,
      qualifier <- s.qualifier,
      specification <- s.specification,
      association <- s.association,
      isNavigable <- s.isNavigable,
      ordering <- s.ordering,
      aggregation <- s.aggregation,
      targetScope <- s.targetScope,
      multiplicity <- s.multiplicity,
      changeability <- s.changeability,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

--rule CopyMessage {
--  from
--    s : MM1!Message
--    (
--      s.oclIsTypeOf(MM1!Message)
--    )
--  to
--    t : MM2!Message (
--      action <- s.action,
--      interaction <- s.interaction,
--      predecessor <- s.predecessor,
--      sender <- s.sender,
--      conformingStimulus <- s.conformingStimulus,
--      activator <- s.activator,
--      communicationConnection <- s.communicationConnection,
--      receiver <- s.receiver,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

--rule CopyInteraction {
--  from
--    s : MM1!Interaction
--    (
--      s.oclIsTypeOf(MM1!Interaction)
--    )
--  to
--    t : MM2!Interaction (
--      message <- s.message,
--      context <- s.context,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyInteractionInstanceSet {
--  from
--    s : MM1!InteractionInstanceSet
--    (
--      s.oclIsTypeOf(MM1!InteractionInstanceSet)
--    )
--  to
--    t : MM2!InteractionInstanceSet (
--      context <- s.context,
--      interaction <- s.interaction,
--      participatingStimulus <- s.participatingStimulus,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

--rule CopyCollaborationInstanceSet {
--  from
--    s : MM1!CollaborationInstanceSet
--    (
--      s.oclIsTypeOf(MM1!CollaborationInstanceSet)
--    )
--  to
--    t : MM2!CollaborationInstanceSet (
--      constrainingElement <- s.constrainingElement,
--      interactionInstanceSet <- s.interactionInstanceSet,
--      participatingLink <- s.participatingLink,
--      participatingInstance <- s.participatingInstance,
--      collaboration <- s.collaboration,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

rule CopyClass {
  from
    s : MM1!Class
    (
      s.oclIsTypeOf(MM1!Class)
    )
  to
    t : MM2!Class (
      isActive <- s.isActive,
      feature <- s.feature,
      powertypeRange <- s.powertypeRange,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      templateParameter <- s.templateParameter,
      name <- s.name,
      visibility <- s.visibility,
      ownedElement <- s.ownedElement,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,      
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
}

rule CopyDataType {
  from
    s : MM1!DataType
    (
      s.oclIsTypeOf(MM1!DataType)
    )
  to
    t : MM2!DataType (
      feature <- s.feature,
      powertypeRange <- s.powertypeRange,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification,
      ownedElement <- s.ownedElement,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

rule CopyAssociationEnd {
  from
    s : MM1!AssociationEnd
    (
      s.oclIsTypeOf(MM1!AssociationEnd)
    )
  to
    t : MM2!AssociationEnd (
      participant <- s.participant,
      qualifier <- s.qualifier,
      specification <- s.specification,
      association <- s.association,
      isNavigable <- s.isNavigable,
      ordering <- s.ordering,
      aggregation <- s.aggregation,
      targetScope <- s.targetScope,
      multiplicity <- s.multiplicity,
      changeability <- s.changeability,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

--rule CopyInterface {
--  from
--    s : MM1!Interface
--    (
--      s.oclIsTypeOf(MM1!Interface)
--    )
--  to
--    t : MM2!Interface (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

--rule CopyConstraint {
--  from
--    s : MM1!Constraint
--    (
--      s.oclIsTypeOf(MM1!Constraint)
--    )
--  to
--    t : MM2!Constraint (
--      constrainedElement <- s.constrainedElement,
--      body <- s.body,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

rule CopyAssociation {
  from
    s : MM1!Association
    (
      s.oclIsTypeOf(MM1!Association)
    )
  to
    t : MM2!Association (
      connection <- s.connection,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

rule CopyAttribute {
  from
    s : MM1!Attribute
    (
      s.oclIsTypeOf(MM1!Attribute)
    )
  to
    t : MM2!Attribute (
      associationEnd <- s.associationEnd,
      initialValue <- s.initialValue,
      type <- s.type,
      multiplicity <- s.multiplicity,
      changeability <- s.changeability,
      targetScope <- s.targetScope,
      ordering <- s.ordering,
      owner <- s.owner,
      ownerScope <- s.ownerScope,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

--rule CopyOperation {
--  from
--    s : MM1!Operation
--    (
--      s.oclIsTypeOf(MM1!Operation)
--    )
--  to
--    t : MM2!Operation (
--      concurrency <- s.concurrency,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      specification <- s.specification,
--      parameter <- s.parameter,
--      isQuery <- s.isQuery,
--      owner <- s.owner,
--      ownerScope <- s.ownerScope,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyParameter {
--  from
--    s : MM1!Parameter
--    (
--      s.oclIsTypeOf(MM1!Parameter)
--    )
--  to
--    t : MM2!Parameter (
--      type <- s.type,
--      behavioralFeature <- s.behavioralFeature,
--      defaultValue <- s.defaultValue,
--      kind <- s.kind,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyMethod {
--  from
--    s : MM1!Method
--    (
--      s.oclIsTypeOf(MM1!Method)
--    )
--  to
--    t : MM2!Method (
--      specification <- s.specification,
--      body <- s.body,
--      parameter <- s.parameter,
--      isQuery <- s.isQuery,
--      owner <- s.owner,
--      ownerScope <- s.ownerScope,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyGeneralization {
--  from
--    s : MM1!Generalization
--    (
--      s.oclIsTypeOf(MM1!Generalization)
--    )
--  to
--    t : MM2!Generalization (
--      parent <- s.parent,
--      child <- s.child,
--      powertype <- s.powertype,
--      discriminator <- s.discriminator,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyAssociationClass {
--  from
--    s : MM1!AssociationClass
--    (
--      s.oclIsTypeOf(MM1!AssociationClass)
--    )
--  to
--    t : MM2!AssociationClass (
--      connection <- s.connection,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      isActive <- s.isActive,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyDependency {
--  from
--    s : MM1!Dependency
--    (
--      s.oclIsTypeOf(MM1!Dependency)
--    )
--  to
--    t : MM2!Dependency (
--      client <- s.client,
--      supplier <- s.supplier,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyAbstraction {
--  from
--    s : MM1!Abstraction
--    (
--      s.oclIsTypeOf(MM1!Abstraction)
--    )
--  to
--    t : MM2!Abstraction (
--      mapping <- s.mapping,
--      client <- s.client,
--      supplier <- s.supplier,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyUsage {
--  from
--    s : MM1!Usage
--    (
--      s.oclIsTypeOf(MM1!Usage)
--    )
--  to
--    t : MM2!Usage (
--      client <- s.client,
--      supplier <- s.supplier,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyBinding {
--  from
--    s : MM1!Binding
--    (
--      s.oclIsTypeOf(MM1!Binding)
--    )
--  to
--    t : MM2!Binding (
--      argument <- s.argument,
--      client <- s.client,
--      supplier <- s.supplier,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyComponent {
--  from
--    s : MM1!Component
--    (
--      s.oclIsTypeOf(MM1!Component)
--    )
--  to
--    t : MM2!Component (
--      deploymentLocation <- s.deploymentLocation,
--      residentElement <- s.residentElement,
--      implementation <- s.implementation,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyNode {
--  from
--    s : MM1!Node
--    (
--      s.oclIsTypeOf(MM1!Node)
--    )
--  to
--    t : MM2!Node (
--      deployedComponent <- s.deployedComponent,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyPermission {
--  from
--    s : MM1!Permission
--    (
--      s.oclIsTypeOf(MM1!Permission)
--    )
--  to
--    t : MM2!Permission (
--      client <- s.client,
--      supplier <- s.supplier,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyComment {
--  from
--    s : MM1!Comment
--    (
--      s.oclIsTypeOf(MM1!Comment)
--    )
--  to
--    t : MM2!Comment (
--      annotatedElement <- s.annotatedElement,
--      body <- s.body,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyFlow {
--  from
--    s : MM1!Flow
--    (
--      s.oclIsTypeOf(MM1!Flow)
--    )
--  to
--    t : MM2!Flow (
--      source <- s.source,
--      target <- s.target,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyElementResidence {
--  from
--    s : MM1!ElementResidence
--    (
--      s.oclIsTypeOf(MM1!ElementResidence)
--    )
--  to
--    t : MM2!ElementResidence (
--      container <- s.container,
--      resident <- s.resident,
--      visibility <- s.visibility
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTemplateParameter {
--  from
--    s : MM1!TemplateParameter
--    (
--      s.oclIsTypeOf(MM1!TemplateParameter)
--    )
--  to
--    t : MM2!TemplateParameter (
--      defaultElement <- s.defaultElement,
--      template <- s.template,
--      parameter <- s.parameter
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyPrimitive {
--  from
--    s : MM1!Primitive
--    (
--      s.oclIsTypeOf(MM1!Primitive)
--    )
--  to
--    t : MM2!Primitive (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyEnumeration {
--  from
--    s : MM1!Enumeration
--    (
--      s.oclIsTypeOf(MM1!Enumeration)
--    )
--  to
--    t : MM2!Enumeration (
--      literal <- s.literal,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyEnumerationLiteral {
--  from
--    s : MM1!EnumerationLiteral
--    (
--      s.oclIsTypeOf(MM1!EnumerationLiteral)
--    )
--  to
--    t : MM2!EnumerationLiteral (
--      enumeration <- s.enumeration,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyStereotype {
--  from
--    s : MM1!Stereotype
--    (
--      s.oclIsTypeOf(MM1!Stereotype)
--    )
--  to
--    t : MM2!Stereotype (
--      stereotypeConstraint <- s.stereotypeConstraint,
--      definedTag <- s.definedTag,
--      icon <- s.icon,
--      baseClass <- s.baseClass,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTagDefinition {
--  from
--    s : MM1!TagDefinition
--    (
--      s.oclIsTypeOf(MM1!TagDefinition)
--    )
--  to
--    t : MM2!TagDefinition (
--      owner <- s.owner,
--      tagType <- s.tagType,
--      multiplicity <- s.multiplicity,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTaggedValue {
--  from
--    s : MM1!TaggedValue
--    (
--      s.oclIsTypeOf(MM1!TaggedValue)
--    )
--  to
--    t : MM2!TaggedValue (
--      type <- s.type,
--      referenceValue <- s.referenceValue,
--      modelElement <- s.modelElement,
--      dataValue <- s.dataValue,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyProgrammingLanguageDataType {
--  from
--    s : MM1!ProgrammingLanguageDataType
--    (
--      s.oclIsTypeOf(MM1!ProgrammingLanguageDataType)
--    )
--  to
--    t : MM2!ProgrammingLanguageDataType (
--      expression <- s.expression,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyArtifact {
--  from
--    s : MM1!Artifact
--    (
--      s.oclIsTypeOf(MM1!Artifact)
--    )
--  to
--    t : MM2!Artifact (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTemplateArgument {
--  from
--    s : MM1!TemplateArgument
--    (
--      s.oclIsTypeOf(MM1!TemplateArgument)
--    )
--  to
--    t : MM2!TemplateArgument (
--      binding <- s.binding,
--      modelElement <- s.modelElement
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyStateMachine {
--  from
--    s : MM1!StateMachine
--    (
--      s.oclIsTypeOf(MM1!StateMachine)
--    )
--  to
--    t : MM2!StateMachine (
--      context <- s.context,
--      transitions <- s.transitions,
--      submachineState <- s.submachineState,
--      top <- s.top,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTimeEvent {
--  from
--    s : MM1!TimeEvent
--    (
--      s.oclIsTypeOf(MM1!TimeEvent)
--    )
--  to
--    t : MM2!TimeEvent (
--      when <- s.when,
--      parameter <- s.parameter,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyCallEvent {
--  from
--    s : MM1!CallEvent
--    (
--      s.oclIsTypeOf(MM1!CallEvent)
--    )
--  to
--    t : MM2!CallEvent (
--      operation <- s.operation,
--      parameter <- s.parameter,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySignalEvent {
--  from
--    s : MM1!SignalEvent
--    (
--      s.oclIsTypeOf(MM1!SignalEvent)
--    )
--  to
--    t : MM2!SignalEvent (
--      signal <- s.signal,
--      parameter <- s.parameter,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTransition {
--  from
--    s : MM1!Transition
--    (
--      s.oclIsTypeOf(MM1!Transition)
--    )
--  to
--    t : MM2!Transition (
--      effect <- s.effect,
--      target <- s.target,
--      stateMachine <- s.stateMachine,
--      trigger <- s.trigger,
--      guard <- s.guard,
--      source <- s.source,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyCompositeState {
--  from
--    s : MM1!CompositeState
--    (
--      s.oclIsTypeOf(MM1!CompositeState)
--    )
--  to
--    t : MM2!CompositeState (
--      subvertex <- s.subvertex,
--      isConcurrent <- s.isConcurrent,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyChangeEvent {
--  from
--    s : MM1!ChangeEvent
--    (
--      s.oclIsTypeOf(MM1!ChangeEvent)
--    )
--  to
--    t : MM2!ChangeEvent (
--      changeExpression <- s.changeExpression,
--      parameter <- s.parameter,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyGuard {
--  from
--    s : MM1!Guard
--    (
--      s.oclIsTypeOf(MM1!Guard)
--    )
--  to
--    t : MM2!Guard (
--      transition <- s.transition,
--      expression <- s.expression,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyPseudostate {
--  from
--    s : MM1!Pseudostate
--    (
--      s.oclIsTypeOf(MM1!Pseudostate)
--    )
--  to
--    t : MM2!Pseudostate (
--      kind <- s.kind,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySimpleState {
--  from
--    s : MM1!SimpleState
--    (
--      s.oclIsTypeOf(MM1!SimpleState)
--    )
--  to
--    t : MM2!SimpleState (
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySubmachineState {
--  from
--    s : MM1!SubmachineState
--    (
--      s.oclIsTypeOf(MM1!SubmachineState)
--    )
--  to
--    t : MM2!SubmachineState (
--      submachine <- s.submachine,
--      subvertex <- s.subvertex,
--      isConcurrent <- s.isConcurrent,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySynchState {
--  from
--    s : MM1!SynchState
--    (
--      s.oclIsTypeOf(MM1!SynchState)
--    )
--  to
--    t : MM2!SynchState (
--      bound <- s.bound,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyStubState {
--  from
--    s : MM1!StubState
--    (
--      s.oclIsTypeOf(MM1!StubState)
--    )
--  to
--    t : MM2!StubState (
--      referenceState <- s.referenceState,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyFinalState {
--  from
--    s : MM1!FinalState
--    (
--      s.oclIsTypeOf(MM1!FinalState)
--    )
--  to
--    t : MM2!FinalState (
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySignal {
--  from
--    s : MM1!Signal
--    (
--      s.oclIsTypeOf(MM1!Signal)
--    )
--  to
--    t : MM2!Signal (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyCreateAction {
--  from
--    s : MM1!CreateAction
--    (
--      s.oclIsTypeOf(MM1!CreateAction)
--    )
--  to
--    t : MM2!CreateAction (
--      instantiation <- s.instantiation,
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyDestroyAction {
--  from
--    s : MM1!DestroyAction
--    (
--      s.oclIsTypeOf(MM1!DestroyAction)
--    )
--  to
--    t : MM2!DestroyAction (
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyUninterpretedAction {
--  from
--    s : MM1!UninterpretedAction
--    (
--      s.oclIsTypeOf(MM1!UninterpretedAction)
--    )
--  to
--    t : MM2!UninterpretedAction (
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyAttributeLink {
--  from
--    s : MM1!AttributeLink
--    (
--      s.oclIsTypeOf(MM1!AttributeLink)
--    )
--  to
--    t : MM2!AttributeLink (
--      linkEnd <- s.linkEnd,
--      value <- s.value,
--      instance <- s.instance,
--      attribute <- s.attribute,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyObject {
--  from
--    s : MM1!Object
--    (
--      s.oclIsTypeOf(MM1!Object)
--    )
--  to
--    t : MM2!Object (
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyLink {
--  from
--    s : MM1!Link
--    (
--      s.oclIsTypeOf(MM1!Link)
--    )
--  to
--    t : MM2!Link (
--      connection <- s.connection,
--      association <- s.association,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyLinkObject {
--  from
--    s : MM1!LinkObject
--    (
--      s.oclIsTypeOf(MM1!LinkObject)
--    )
--  to
--    t : MM2!LinkObject (
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      connection <- s.connection,
--      association <- s.association,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyDataValue {
--  from
--    s : MM1!DataValue
--    (
--      s.oclIsTypeOf(MM1!DataValue)
--    )
--  to
--    t : MM2!DataValue (
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyCallAction {
--  from
--    s : MM1!CallAction
--    (
--      s.oclIsTypeOf(MM1!CallAction)
--    )
--  to
--    t : MM2!CallAction (
--      operation <- s.operation,
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySendAction {
--  from
--    s : MM1!SendAction
--    (
--      s.oclIsTypeOf(MM1!SendAction)
--    )
--  to
--    t : MM2!SendAction (
--      signal <- s.signal,
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyActionSequence {
--  from
--    s : MM1!ActionSequence
--    (
--      s.oclIsTypeOf(MM1!ActionSequence)
--    )
--  to
--    t : MM2!ActionSequence (
--      action <- s.action,
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyArgument {
--  from
--    s : MM1!Argument
--    (
--      s.oclIsTypeOf(MM1!Argument)
--    )
--  to
--    t : MM2!Argument (
--      action <- s.action,
--      value <- s.value,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyReception {
--  from
--    s : MM1!Reception
--    (
--      s.oclIsTypeOf(MM1!Reception)
--    )
--  to
--    t : MM2!Reception (
--      signal <- s.signal,
--      specification <- s.specification,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      parameter <- s.parameter,
--      isQuery <- s.isQuery,
--      owner <- s.owner,
--      ownerScope <- s.ownerScope,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyLinkEnd {
--  from
--    s : MM1!LinkEnd
--    (
--      s.oclIsTypeOf(MM1!LinkEnd)
--    )
--  to
--    t : MM2!LinkEnd (
--      qualifiedValue <- s.qualifiedValue,
--      link <- s.link,
--      associationEnd <- s.associationEnd,
--      instance <- s.instance,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyReturnAction {
--  from
--    s : MM1!ReturnAction
--    (
--      s.oclIsTypeOf(MM1!ReturnAction)
--    )
--  to
--    t : MM2!ReturnAction (
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTerminateAction {
--  from
--    s : MM1!TerminateAction
--    (
--      s.oclIsTypeOf(MM1!TerminateAction)
--    )
--  to
--    t : MM2!TerminateAction (
--      actionSequence <- s.actionSequence,
--      actualArgument <- s.actualArgument,
--      recurrence <- s.recurrence,
--      target <- s.target,
--      isAsynchronous <- s.isAsynchronous,
--      script <- s.script,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyStimulus {
--  from
--    s : MM1!Stimulus
--    (
--      s.oclIsTypeOf(MM1!Stimulus)
--    )
--  to
--    t : MM2!Stimulus (
--      receiver <- s.receiver,
--      communicationLink <- s.communicationLink,
--      sender <- s.sender,
--      dispatchAction <- s.dispatchAction,
--      argument <- s.argument,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyException {
--  from
--    s : MM1!Exception
--    (
--      s.oclIsTypeOf(MM1!Exception)
--    )
--  to
--    t : MM2!Exception (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyComponentInstance {
--  from
--    s : MM1!ComponentInstance
--    (
--      s.oclIsTypeOf(MM1!ComponentInstance)
--    )
--  to
--    t : MM2!ComponentInstance (
--      resident <- s.resident,
--      nodeInstance <- s.nodeInstance,
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyNodeInstance {
--  from
--    s : MM1!NodeInstance
--    (
--      s.oclIsTypeOf(MM1!NodeInstance)
--    )
--  to
--    t : MM2!NodeInstance (
--      resident <- s.resident,
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySubsystemInstance {
--  from
--    s : MM1!SubsystemInstance
--    (
--      s.oclIsTypeOf(MM1!SubsystemInstance)
--    )
--  to
--    t : MM2!SubsystemInstance (
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
rule CopyPackage {
  from
    s : MM1!Package
    (
      s.oclIsTypeOf(MM1!Package)
    )
  to
    t : MM2!Package (
      elementImport <- s.elementImport,
      generalization <- s.generalization,
      isRoot <- s.isRoot,
      isLeaf <- s.isLeaf,
      isAbstract <- s.isAbstract,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification,
      ownedElement <- s.ownedElement,
      targetFlow <- s.targetFlow,
      clientDependency <- s.clientDependency,
      comment <- s.comment,
      sourceFlow <- s.sourceFlow,
      constraint <- s.constraint,
      stereotype <- s.stereotype,
      templateParameter <- s.templateParameter,
      namespace <- s.namespace,
      taggedValue <- s.taggedValue,
      name <- s.name,
      visibility <- s.visibility,
      isSpecification <- s.isSpecification
    )
	do{
		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
	}
	}

--rule CopyModel {
--  from
--    s : MM1!Model
--    (
--      s.oclIsTypeOf(MM1!Model)
--    )
--  to
--    t : MM2!Model (
--      elementImport <- s.elementImport,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}

--rule CopySubsystem {
--  from
--    s : MM1!Subsystem
--    (
--      s.oclIsTypeOf(MM1!Subsystem)
--    )
--  to
--    t : MM2!Subsystem (
--      isInstantiable <- s.isInstantiable,
--      elementImport <- s.elementImport,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyElementImport {
--  from
--    s : MM1!ElementImport
--    (
--      s.oclIsTypeOf(MM1!ElementImport)
--    )
--  to
--    t : MM2!ElementImport (
--      importedElement <- s.importedElement,
--      package <- s.package,
--      visibility <- s.visibility,
--      alias <- s.alias,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
rule CopyMultiplicity {
  from
    s : MM1!Multiplicity
    (
      s.oclIsTypeOf(MM1!Multiplicity)
    )
  to
    t : MM2!Multiplicity (
      range <- s.range
    )
}

rule CopyMultiplicityRange {
  from
    s : MM1!MultiplicityRange
    (
      s.oclIsTypeOf(MM1!MultiplicityRange)
    )
  to
    t : MM2!MultiplicityRange (
      multiplicity <- s.multiplicity,
      lower <- s.lower,
      upper <- s.upper
    )
}
--
--rule CopyExpression {
--  from
--    s : MM1!Expression
--    (
--      s.oclIsTypeOf(MM1!Expression)
--    )
--  to
--    t : MM2!Expression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyBooleanExpression {
--  from
--    s : MM1!BooleanExpression
--    (
--      s.oclIsTypeOf(MM1!BooleanExpression)
--    )
--  to
--    t : MM2!BooleanExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTypeExpression {
--  from
--    s : MM1!TypeExpression
--    (
--      s.oclIsTypeOf(MM1!TypeExpression)
--    )
--  to
--    t : MM2!TypeExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyMappingExpression {
--  from
--    s : MM1!MappingExpression
--    (
--      s.oclIsTypeOf(MM1!MappingExpression)
--    )
--  to
--    t : MM2!MappingExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyProcedureExpression {
--  from
--    s : MM1!ProcedureExpression
--    (
--      s.oclIsTypeOf(MM1!ProcedureExpression)
--    )
--  to
--    t : MM2!ProcedureExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyObjectSetExpression {
--  from
--    s : MM1!ObjectSetExpression
--    (
--      s.oclIsTypeOf(MM1!ObjectSetExpression)
--    )
--  to
--    t : MM2!ObjectSetExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyActionExpression {
--  from
--    s : MM1!ActionExpression
--    (
--      s.oclIsTypeOf(MM1!ActionExpression)
--    )
--  to
--    t : MM2!ActionExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyIterationExpression {
--  from
--    s : MM1!IterationExpression
--    (
--      s.oclIsTypeOf(MM1!IterationExpression)
--    )
--  to
--    t : MM2!IterationExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyTimeExpression {
--  from
--    s : MM1!TimeExpression
--    (
--      s.oclIsTypeOf(MM1!TimeExpression)
--    )
--  to
--    t : MM2!TimeExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyArgListsExpression {
--  from
--    s : MM1!ArgListsExpression
--    (
--      s.oclIsTypeOf(MM1!ArgListsExpression)
--    )
--  to
--    t : MM2!ArgListsExpression (
--      language <- s.language,
--      body <- s.body
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyUseCase {
--  from
--    s : MM1!UseCase
--    (
--      s.oclIsTypeOf(MM1!UseCase)
--    )
--  to
--    t : MM2!UseCase (
--      extend <- s.extend,
--      include <- s.include,
--      extensionPoint <- s.extensionPoint,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyActor {
--  from
--    s : MM1!Actor
--    (
--      s.oclIsTypeOf(MM1!Actor)
--    )
--  to
--    t : MM2!Actor (
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyUseCaseInstance {
--  from
--    s : MM1!UseCaseInstance
--    (
--      s.oclIsTypeOf(MM1!UseCaseInstance)
--    )
--  to
--    t : MM2!UseCaseInstance (
--      componentInstance <- s.componentInstance,
--      classifier <- s.classifier,
--      ownedLink <- s.ownedLink,
--      ownedInstance <- s.ownedInstance,
--      slot <- s.slot,
--      linkEnd <- s.linkEnd,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyExtend {
--  from
--    s : MM1!Extend
--    (
--      s.oclIsTypeOf(MM1!Extend)
--    )
--  to
--    t : MM2!Extend (
--      extensionPoint <- s.extensionPoint,
--      base <- s.base,
--      extension <- s.extension,
--      condition <- s.condition,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyInclude {
--  from
--    s : MM1!Include
--    (
--      s.oclIsTypeOf(MM1!Include)
--    )
--  to
--    t : MM2!Include (
--      base <- s.base,
--      addition <- s.addition,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyExtensionPoint {
--  from
--    s : MM1!ExtensionPoint
--    (
--      s.oclIsTypeOf(MM1!ExtensionPoint)
--    )
--  to
--    t : MM2!ExtensionPoint (
--      useCase <- s.useCase,
--      location <- s.location,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyActivityGraph {
--  from
--    s : MM1!ActivityGraph
--    (
--      s.oclIsTypeOf(MM1!ActivityGraph)
--    )
--  to
--    t : MM2!ActivityGraph (
--      partition <- s.partition,
--      context <- s.context,
--      transitions <- s.transitions,
--      submachineState <- s.submachineState,
--      top <- s.top,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyPartition {
--  from
--    s : MM1!Partition
--    (
--      s.oclIsTypeOf(MM1!Partition)
--    )
--  to
--    t : MM2!Partition (
--      activityGraph <- s.activityGraph,
--      contents <- s.contents,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopySubactivityState {
--  from
--    s : MM1!SubactivityState
--    (
--      s.oclIsTypeOf(MM1!SubactivityState)
--    )
--  to
--    t : MM2!SubactivityState (
--      isDynamic <- s.isDynamic,
--      dynamicArguments <- s.dynamicArguments,
--      dynamicMultiplicity <- s.dynamicMultiplicity,
--      submachine <- s.submachine,
--      subvertex <- s.subvertex,
--      isConcurrent <- s.isConcurrent,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyActionState {
--  from
--    s : MM1!ActionState
--    (
--      s.oclIsTypeOf(MM1!ActionState)
--    )
--  to
--    t : MM2!ActionState (
--      isDynamic <- s.isDynamic,
--      dynamicArguments <- s.dynamicArguments,
--      dynamicMultiplicity <- s.dynamicMultiplicity,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyCallState {
--  from
--    s : MM1!CallState
--    (
--      s.oclIsTypeOf(MM1!CallState)
--    )
--  to
--    t : MM2!CallState (
--      isDynamic <- s.isDynamic,
--      dynamicArguments <- s.dynamicArguments,
--      dynamicMultiplicity <- s.dynamicMultiplicity,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyObjectFlowState {
--  from
--    s : MM1!ObjectFlowState
--    (
--      s.oclIsTypeOf(MM1!ObjectFlowState)
--    )
--  to
--    t : MM2!ObjectFlowState (
--      type <- s.type,
--      parameter <- s.parameter,
--      isSynch <- s.isSynch,
--      exit <- s.exit,
--      doActivity <- s.doActivity,
--      deferrableEvent <- s.deferrableEvent,
--      internalTransition <- s.internalTransition,
--      entry <- s.entry,
--      stateMachine <- s.stateMachine,
--      outgoing <- s.outgoing,
--      incoming <- s.incoming,
--      container <- s.container,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
--
--rule CopyClassifierInState {
--  from
--    s : MM1!ClassifierInState
--    (
--      s.oclIsTypeOf(MM1!ClassifierInState)
--    )
--  to
--    t : MM2!ClassifierInState (
--      inState <- s.inState,
--      type <- s.type,
--      feature <- s.feature,
--      powertypeRange <- s.powertypeRange,
--      generalization <- s.generalization,
--      isRoot <- s.isRoot,
--      isLeaf <- s.isLeaf,
--      isAbstract <- s.isAbstract,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification,
--      ownedElement <- s.ownedElement,
--      targetFlow <- s.targetFlow,
--      clientDependency <- s.clientDependency,
--      comment <- s.comment,
--      sourceFlow <- s.sourceFlow,
--      constraint <- s.constraint,
--      stereotype <- s.stereotype,
--      templateParameter <- s.templateParameter,
--      namespace <- s.namespace,
--      taggedValue <- s.taggedValue,
--      name <- s.name,
--      visibility <- s.visibility,
--      isSpecification <- s.isSpecification
--    )
--	do{
--		t.setElementIDbyRefType('ElementRefXMI', s.__xmiID__);
--	}
--	}
