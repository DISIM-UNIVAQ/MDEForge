-- @atlcompiler atl2006
-- generated by DUALLy
-- Department of Computer Science
-- University of L'Aquila

module DarwinFSP_A0;
create OUT : A0_Behavior from IN : DarwinFSP;

-- GENERATED
rule SoftwareArchitecture_DarwinSpecification {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::DarwinSpecification"
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SoftwareArchitecture" (
      name <- leftSide.name,
      subElement <- leftSide.componentDeclarations->select(e |
        e.name = leftSide.name
      ).first().eContents()
    ),
    rightSide2 : A0_Behavior!"A0_Behavior::core::TypesSpecification" (
      name <- 'types',
      types <- A0_Behavior!Type.allInstancesFrom('OUT')
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SAStructuredType_ComponentDeclaration {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::ComponentDeclaration"
    (
      if leftSide.refImmediateComposite().oclIsTypeOf(DarwinFSP!DarwinSpecification) then
        leftSide.name <> leftSide.refImmediateComposite().name
      else
        true
      endif
    )
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SAStructuredType" (
      subElement <- leftSide.innerInstances,
      name <- leftSide.name,
      subElement <- leftSide.innerBindings,
      subElement <- leftSide.portals,
      behavior <- if leftSide.relatedFSP.oclIsUndefined() then
        Sequence {}
      else
        thisModule.resolveTemp(leftSide.relatedFSP, 'rightSide2')
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ComponentInstance_SAComponent {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::ComponentInstance"
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SAComponent" (
      name <- leftSide.identifier,
      type <- leftSide.declaration
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Portal_SAinterface {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::Portal"
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SAInterface" (
      name <- leftSide.identifier,
      direction <- if rightSide.type = #undefined then
        #inputOutput
      else
        if rightSide.type = #require then
          #output
        else
          #input
        endif
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Binding_channel {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::Binding"
    (
      leftSide.from.refImmediateComposite().refImmediateComposite() = leftSide.to.refImmediateComposite().refImmediateComposite()
    )
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SAChannel" (
      from <- leftSide.from,
      fromContext <- leftSide.fromComponent,
      to <- leftSide.to,
      toContext <- leftSide.toComponent,
      navigability <- if leftSide.from.type = #inputOutput and leftSide.from.type = #inputOutput then
        #bidirectional
      else
        #unidirectional
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Binding_Binding {
  from
    leftSide : DarwinFSP!"DarwinFSP::Darwin::Binding"
    (
      leftSide.from.refImmediateComposite().refImmediateComposite() <> leftSide.to.refImmediateComposite().refImmediateComposite()
    )
  to
    rightSide : A0_Behavior!"A0_Behavior::core::SABinding" (
      fromContext <- leftSide.fromComponent,
      to <- leftSide.to,
      from <- leftSide.from,
      toContext <- leftSide.toComponent,
      navigability <- if leftSide.from.type = #inputOutput and leftSide.from.type = #inputOutput then
        #bidirectional
      else
        #unidirectional
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Behavior_ProcessDeclaration {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::ProcessDeclaration"
    (
      leftSide.refImmediateComposite().oclIsTypeOf(DarwinFSP!FspSpecification)
    )
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::InitialState" (
      incoming <- DarwinFSP!ProcessCall.allInstancesFrom('IN')->select(e |
        e.called = leftSide
      )->collect(e |
        thisModule.resolveTemp(e.refImmediateComposite().action, 'rightSide')
      ),
      name <- leftSide.identifier.split('___').at(2)
    ),
    rightSide2 : A0_Behavior!"A0_Behavior::stateDiagramMM::StateDiagram" (
      ownedState <- leftSide.localProcesses,
      ownedState <- rightSide,
      ownedTransition <- leftSide.getAllContents()->select(e |
        e.oclIsTypeOf(DarwinFSP!Action)
      ),
      name <- leftSide.identifier.split('___').first()
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Action_Transition {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::Action"
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::Transition" (
      guard <- leftSide.condition,
      label <- leftSide.label,
      source <- leftSide.getProcessDeclaration()
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule State_ProcessDeclaration {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::ProcessDeclaration"
    (
      not leftSide.refImmediateComposite().oclIsTypeOf(DarwinFSP!FspSpecification)
    )
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::State" (
      name <- leftSide.identifier,
      incoming <- DarwinFSP!ProcessCall.allInstancesFrom('IN')->select(e |
        e.called = leftSide
      )->collect(e |
        thisModule.resolveTemp(e.refImmediateComposite().action, 'rightSide')
      )
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule STOP_FinalState {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::STOP"
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::FinalState"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ERROR_FinalState {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::ERROR"
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::FinalState"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule END_FinalState {
  from
    leftSide : DarwinFSP!"DarwinFSP::FSP::END"
  to
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::FinalState"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED by IdPreservationHOT
helper def: traces : Sequence(TupleType(source : OclAny, target : OclAny)) =
  Sequence {};

-- GENERATED by IdPreservationHOT
endpoint rule setTraces() {
  do {
    for(e in thisModule.traces) {
      e.target.setElementIDbyRefType('ElementRefXMI', e.source.getElementIDbyRefType('ElementRefXMI'));
    }
  }
}
