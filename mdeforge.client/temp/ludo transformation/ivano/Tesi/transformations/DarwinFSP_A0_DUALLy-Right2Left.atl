-- @atlcompiler atl2006
-- generated by DUALLy
-- Department of Computer Science
-- University of L'Aquila

module DarwinFSP_A0;
create OUT : DarwinFSP from IN : A0_Behavior;

-- GENERATED
rule "SoftwareArchitecture_DarwinSpecification " {
  from
    rightSide : A0_Behavior!"A0_Behavior::core::SoftwareArchitecture"
  to
    leftSide : DarwinFSP!"DarwinFSP::Darwin::DarwinSpecification" (
      name <- rightSide.name,
      componentDeclarations <- A0_Behavior!SAStructuredType.allInstancesFrom('IN'),
      componentDeclarations <- leftSide2
    ),
    leftSide2 : DarwinFSP!"DarwinFSP::Darwin::ComponentDeclaration" (
      name <- rightSide.name,
      innerInstances <- rightSide.subElement->select(e |
        e.oclIsKindOf(A0_Behavior!Component)
      ),
      innerBindings <- rightSide.subElement->select(e |
        e.oclIsKindOf(A0_Behavior!Link)
      ),
      relatedFSP <- if rightSide.behavior.size() = 1 then
        rightSide.behavior.first()
      else
        OclUndefined
      endif,
      portals <- rightSide.subElement->select(e |
        e.oclIsKindOf(A0_Behavior!SAInterface)
      )
    ),
    leftSide3 : DarwinFSP!"DarwinFSP::FSP::FspSpecification" (
      name <- rightSide.name,
      ref <- A0_Behavior!Behavior.allInstancesFrom('IN')
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SAStructuredType_ComponentDeclaration {
  from
    rightSide : A0_Behavior!"A0_Behavior::core::SAStructuredType"
  to
    leftSide : DarwinFSP!"DarwinFSP::Darwin::ComponentDeclaration" (
      name <- rightSide.name,
      portals <- if rightSide.oclIsUndefined() then
        Sequence {}
      else
        rightSide.subElement->select(e |
          e.oclIsKindOf(A0_Behavior!SAInterface)
        )
      endif,
      innerBindings <- rightSide.subElement->select(e |
        e.oclIsKindOf(A0_Behavior!Link)
      ),
      innerInstances <- rightSide.subElement->select(e |
        e.oclIsKindOf(A0_Behavior!Component)
      ),
      relatedFSP <- if rightSide.behavior.size() >= 1 then
        rightSide.behavior.first()
      else
        OclUndefined
      endif
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule " ComponentInstance_SAComponent" {
  from
    rightSide : A0_Behavior!"A0_Behavior::core::SAComponent"
  to
    leftSide : DarwinFSP!"DarwinFSP::Darwin::ComponentInstance" (
      identifier <- rightSide.name,
      declaration <- rightSide.type.first()
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Portal_SAinterface {
  from
    rightSide : A0_Behavior!"A0_Behavior::core::SAInterface"
  to
    leftSide : DarwinFSP!"DarwinFSP::Darwin::Portal" (
      identifier <- rightSide.name,
      type <- if rightSide.direction = #inputOutput then
        #undefined
      else
        if rightSide.direction = #output then
          #require
        else
          OclUndefined
        endif
      endif
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Binding_Link {
  from
    rightSide : A0_Behavior!"A0_Behavior::core::Link"
  to
    leftSide : DarwinFSP!"DarwinFSP::Darwin::Binding" (
      to <- rightSide.to,
      from <- rightSide.from,
      fromComponent <- if rightSide.fromContext.oclIsUndefined() then
        A0_Behavior!Component.allInstancesFrom('IN')->select(e |
          e.points.includes(rightSide.from)
        ).first()
      else
        rightSide.fromContext
      endif,
      toComponent <- if rightSide.toContext.oclIsUndefined() then
        A0_Behavior!Component.allInstancesFrom('IN')->select(e |
          e.points.includes(rightSide.to)
        ).first()
      else
        rightSide.toContext
      endif
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Behavior_ProcessDeclaration {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::StateDiagram"
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::ProcessDeclaration" (
      localProcesses <- rightSide.ownedState->select(e |
        e.oclIsTypeOf(A0_Behavior!State)
      ),
      identifier <- rightSide.name + '___' + rightSide.ownedState->select(e |
        e.oclIsTypeOf(A0_Behavior!InitialState)
      ).first().name,
      definition <- rightSide.ownedState->select(e |
        e.oclIsTypeOf(A0_Behavior!InitialState)
      ).first()
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule STOP_FinalState {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::FinalState"
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::STOP"
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule nitialState_definition_choice {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::InitialState"
    (
      rightSide.outgoing.size() > 1
    )
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::Choice" (
      choices <- rightSide.outgoing
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule " InitialState_definition_Prefix" {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::InitialState"
    (
      rightSide.outgoing.size() = 1
    )
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::ActionPrefix" (
      action <- action,
      process <- call
    ),
    action : DarwinFSP!"DarwinFSP::FSP::Action" (
      id <- rightSide.outgoing.first().label,
      label <- rightSide.outgoing.first().label
    ),
    call : DarwinFSP!"DarwinFSP::FSP::ProcessCall" (
      called <- rightSide.outgoing.first().target
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Transition_ActionPrefix {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::Transition"
    (
      if rightSide.source.oclIsTypeOf(A0_Behavior!InitialState) then
        rightSide.source.outgoing.size() > 1
      else
        true
      endif
    )
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::ActionPrefix" (
      process <- call,
      action <- action
    ),
    action : DarwinFSP!"DarwinFSP::FSP::Action" (
      id <- rightSide.name,
      condition <- rightSide.guard,
      label <- rightSide.label
    ),
    call : DarwinFSP!"DarwinFSP::FSP::ProcessCall" (
      called <- if rightSide.target.oclIsTypeOf(A0_Behavior!InitialState) then
        rightSide.owningStateDiagram
      else
        rightSide.target
      endif
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule State_ProcessDecl {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::State"
    (
      rightSide.oclIsTypeOf(A0_Behavior!State) and rightSide.outgoing.size() = 1
    )
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::ProcessDeclaration" (
      identifier <- rightSide.name,
      definition <- rightSide.outgoing.first()
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule State_choice {
  from
    rightSide : A0_Behavior!"A0_Behavior::stateDiagramMM::State"
    (
      rightSide.oclIsTypeOf(A0_Behavior!State) and rightSide.outgoing.size() > 1
    )
  to
    leftSide : DarwinFSP!"DarwinFSP::FSP::ProcessDeclaration" (
      identifier <- rightSide.name,
      definition <- leftSide1
    ),
    leftSide1 : DarwinFSP!"DarwinFSP::FSP::Choice" (
      choices <- rightSide.outgoing
    )
  do {
    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED by IdPreservationHOT
helper def: traces : Sequence(TupleType(source : OclAny, target : OclAny)) =
  Sequence {};

-- GENERATED by IdPreservationHOT
endpoint rule setTraces() {
  do {
    for(e in thisModule.traces) {
      e.target.setElementIDbyRefType('ElementRefXMI', e.source.getElementIDbyRefType('ElementRefXMI'));
    }
  }
}
