package org.mdeforge.test;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mdeforge.business.MetamodelService;
import org.mdeforge.business.UserService;
import org.mdeforge.business.model.Artifact;
import org.mdeforge.business.model.GridFileMedia;
import org.mdeforge.business.model.Metamodel;
import org.mdeforge.business.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.annotation.JsonHyperSchema;
import com.fasterxml.jackson.module.jsonSchema.annotation.Link;
import com.fasterxml.jackson.module.jsonSchema.customProperties.HyperSchemaFactoryWrapper;
import com.fasterxml.jackson.module.jsonSchema.factories.SchemaFactoryWrapper;
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "file:src/main/webapp/WEB-INF/spring/root-context.xml")
public class SampleTest {

	public class Pet {
        public String genus;
    }

    @JsonHyperSchema(pathStart = "/persons/", links = {
        @Link(href = "{name}", rel = "self"),
        @Link(href = "{name}/pet", rel = "pet", targetSchema = Pet.class)
    })
    public class Person {
        public String name;
        public String hat;
    }
	
	@Autowired
	MetamodelService metamodelService;
	@Autowired
	UserService userService;
	final Logger logger = LoggerFactory.getLogger(Metamodel.class);

	@Test
	public void testSchema() throws JsonProcessingException{
//		HyperSchemaFactoryWrapper personVisitor = new HyperSchemaFactoryWrapper();
//        personVisitor.setIgnoreDefaults(false);
//        ObjectMapper mapper = new ObjectMapper();
//
//        mapper.acceptJsonFormatVisitor(Person.class, personVisitor);
//        JsonSchema personSchema = personVisitor.finalSchema();
//
//        HyperSchemaFactoryWrapper petVisitor = new HyperSchemaFactoryWrapper();
//        mapper.acceptJsonFormatVisitor(Pet.class, petVisitor);
//        JsonSchema petSchema = petVisitor.finalSchema();
//        String json1 = petVisitor.toString();
//		String json2 = petSchema.toString();
//		
		
		ObjectMapper m = new ObjectMapper();
	    SchemaFactoryWrapper visitor = new SchemaFactoryWrapper();
	    m.acceptJsonFormatVisitor(m.constructType(Artifact.class), visitor);
	    JsonSchema jsonSchema = visitor.finalSchema();
	    String json1 = m.writeValueAsString(jsonSchema);
	    
	    ObjectMapper m2 = new ObjectMapper();
	    SchemaFactoryWrapper visitor2 = new SchemaFactoryWrapper();
	    m2.acceptJsonFormatVisitor(m.constructType(Artifact.class), visitor2);
	    JsonSchema jsonSchema2 = visitor2.finalSchema();
	    String json2 = m2.writeValueAsString(jsonSchema2);
	    
	    
		
//        ObjectMapper MAPPER = new ObjectMapper();
//		TitleSchemaFactoryWrapper visitor = new TitleSchemaFactoryWrapper();
//		MAPPER.acceptJsonFormatVisitor(Metamodel.class, visitor);
//		JsonSchema jsonSchema = visitor.finalSchema();
		System.out.println(json1);
		System.out.println(json2);
		
	}
	
	

	public void testEMF() {
		try {
			EcoreFactory factory = EcoreFactory.eINSTANCE;
			ResourceSet resourceSet = new ResourceSetImpl();
			resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("ecore", new EcoreResourceFactoryImpl());
			File temp = new File("metamodels_unified/Ecore.ecore");
			Resource resource = resourceSet.createResource(URI.createFileURI(temp.getAbsolutePath()));

			resource.load(null);
			EcoreUtil.resolveAll(resourceSet);
			EObject eo = resource.getContents().get(0);
			Diagnostic diagnostic = Diagnostician.INSTANCE.validate(eo);
			if (diagnostic.getSeverity() == Diagnostic.ERROR) {
				System.err.println(diagnostic);
			} else {
				System.out.println("success creation: " + diagnostic);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void testSayHello() {
		File d = new File("metamodels_unified/");
		String a[] = d.list(); // creo un array di stringhe e lo riempio con la
								// lista dei files presenti nella directory
		User user = userService.findOne("547338e7d4c6f3cd4b6ebded");

		for (int i = 0; i < a.length; i++) {

			try {

				Metamodel p = new Metamodel();
				p.setAuthor(user);
				List<User> ul = new ArrayList<>();
				ul.add(user);
				p.setShared(ul);
				p.setName(a[i]);
				p.setCreated(new Date());
				File file = new File("metamodels_unified/" + a[i]);
				FileInputStream fileInputStream = new FileInputStream(file);
				GridFileMedia gfm = new GridFileMedia();
				gfm.setByteArray(IOUtils.toByteArray(fileInputStream));
				gfm.setFileName(a[i]);
				p.setFile(gfm);
				metamodelService.create(p);

			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
}
