package org.mdeforge.presentation.rest;

import java.util.ArrayList;
import java.util.List;

import org.mdeforge.business.ArtifactService;
import org.mdeforge.business.BusinessException;
import org.mdeforge.business.EcoreMetamodelService;
import org.mdeforge.business.MetricProvider;
import org.mdeforge.business.ProjectService;
import org.mdeforge.business.impl.EcoreMetamodelServiceImpl;
import org.mdeforge.business.model.GridFileMedia;
import org.mdeforge.business.model.EcoreMetamodel;
import org.mdeforge.business.model.Metric;
import org.mdeforge.business.model.Project;
import org.mdeforge.business.model.User;
import org.mdeforge.business.model.Workspace;
import org.mdeforge.business.model.wrapper.json.ArtifactList;
import org.mdeforge.business.model.wrapper.json.MetricList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.customProperties.HyperSchemaFactoryWrapper;

@Controller
@RestController
@RequestMapping("/api/ecoreMetamodel")
public class EcoreMetamodelsRESTController {

	@Autowired
	private EcoreMetamodelService ecoreMetamodelService;
	@Autowired
	private ProjectService projectService;
	@Autowired
	private ArtifactService artifactService;

	@Autowired
	private User user;

	@RequestMapping(value="/{id_ecoreMetamodel}/metrics", method = RequestMethod.GET)
	public @ResponseBody HttpEntity<MetricList> getMetrics(@PathVariable("id_ecoreMetamodel") String idEcoreMetamodel)
	{
		EcoreMetamodel emm = ecoreMetamodelService.findOne(idEcoreMetamodel);
		MetricProvider mp = (MetricProvider) ecoreMetamodelService;
		List<Metric> lm = mp.calculateMetrics(emm);
		return new ResponseEntity<MetricList>(new MetricList(lm), HttpStatus.OK);
	}
	// Get specified metamodel
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody HttpEntity<ArtifactList> getEcoreMetamodels() {
		ArtifactList result = ecoreMetamodelService.findAllWithPublic(user);
		return new ResponseEntity<ArtifactList>(result, HttpStatus.OK);
	}

	@RequestMapping(value = "/schema", method = RequestMethod.GET)
	public @ResponseBody HttpEntity<JsonSchema> getJsonSchema() {
		try {
			
			ObjectMapper MAPPER = new ObjectMapper();
			HyperSchemaFactoryWrapper visitor = new HyperSchemaFactoryWrapper();
	        MAPPER.acceptJsonFormatVisitor(MAPPER.constructType(EcoreMetamodel.class), visitor);
	        JsonSchema jsonSchema = visitor.finalSchema();
	        try {
				MAPPER.writeValueAsString(jsonSchema);
			} catch (JsonProcessingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return new ResponseEntity<JsonSchema>(jsonSchema, HttpStatus.OK);
		} catch (JsonMappingException e) {
			return new ResponseEntity<JsonSchema>(HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	@RequestMapping(value = "/public", method = RequestMethod.GET)
	public @ResponseBody HttpEntity<ArtifactList> getPublicEcoreMetamodels() {
		ArtifactList list = ecoreMetamodelService.findAllPublic();
		return new ResponseEntity<ArtifactList>(list, HttpStatus.OK);
	}

	// get shared metamodel
	@RequestMapping(value = "/shared", method = RequestMethod.GET)
	public @ResponseBody HttpEntity<ArtifactList> getEcoreMetamodelsByUser() {
		ArtifactList list = ecoreMetamodelService.findAllEcoreMetamodelsByUserId(user);
		return new ResponseEntity<ArtifactList>(list, HttpStatus.OK);
	}

	@RequestMapping(value = "OLD/workspace/{id_workspace}", method = RequestMethod.POST)
	public @ResponseBody HttpEntity<String> createArtifactInWorkspace(@ModelAttribute EcoreMetamodel ecoreMetamodel, @PathVariable("id_workspace") String idWorkspace, @RequestParam("_file") MultipartFile file) {
		try {

			ecoreMetamodel.setWorkspaces(new ArrayList<Workspace>());
			Workspace workspace = new Workspace();
			workspace.setId(idWorkspace);
			ecoreMetamodel.getWorkspaces().add(workspace);
			ecoreMetamodel.setAuthor(user);
			ecoreMetamodel.getShared().add(user);

			GridFileMedia fileMedia = new GridFileMedia();
			fileMedia.setFileName(file.getName());
			fileMedia.setByteArray(file.getBytes());
			ecoreMetamodel.setFile(fileMedia);
			ecoreMetamodelService.create(ecoreMetamodel);
			return new ResponseEntity<String>("EcoreMetamodel inserted.", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>("Erron: Project not inserted.", HttpStatus.OK);
		}
	}

	@RequestMapping(value = "OLD/project/{id_project}", method = RequestMethod.POST)
	public @ResponseBody HttpEntity<String> createArtifactInPoject(@ModelAttribute EcoreMetamodel ecoreMetamodel, @PathVariable("id_project") String idProject, @RequestParam("_file") MultipartFile file) {
		try {

			ecoreMetamodel.setWorkspaces(new ArrayList<Workspace>());
			Project project = projectService.findById(idProject, user);
			ecoreMetamodel.getProjects().add(project);
			ecoreMetamodel.setAuthor(user);
			ecoreMetamodel.getShared().add(user);

			GridFileMedia fileMedia = new GridFileMedia();
			fileMedia.setFileName(file.getName());
			fileMedia.setByteArray(file.getBytes());
			ecoreMetamodel.setFile(fileMedia);

			ecoreMetamodelService.create(ecoreMetamodel);
			return new ResponseEntity<String>("EcoreMetamodel inserted.", HttpStatus.OK);

		} catch (Exception e) {
			return new ResponseEntity<String>("Erron: EcoreMetamodel not inserted.", HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	// Create metamodel
	@RequestMapping(method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody HttpEntity<String> createArtifact(@RequestBody EcoreMetamodel ecoreMetamodel) {
		try {
			// SetAuthor
			ecoreMetamodel.setAuthor(user);
			// add author to shared
			// metamodel create
			ecoreMetamodelService.create(ecoreMetamodel);
			// Response success
			return new ResponseEntity<String>("EcoreMetamodel inserted.", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>("Erron: EcoreMetamodel not inserted.", HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	// update metamodel
	@RequestMapping(method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody HttpEntity<String> updateArtifact(@RequestBody EcoreMetamodel ecoreMetamodel) {
		try {
			// SetAuthor
			ecoreMetamodel.setAuthor(user);
			// add author to shared
			ecoreMetamodel.getShared().add(user);
			// metamodel save
			ecoreMetamodelService.update(ecoreMetamodel);
			return new ResponseEntity<String>("EcoreMetamodel updated.", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>("Erron: metamodel not updated", HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	// get single metamodel
	@RequestMapping(value = "/{id_ecoreMetamodel}", method = RequestMethod.GET)
	public @ResponseBody HttpEntity<EcoreMetamodel> getEcoreMetamodel(@PathVariable("id_ecoreMetamodel") String idEcoreMetamodel) {
		try {
			EcoreMetamodel ecoreMetamodel = ecoreMetamodelService.findOneBySharedUser(idEcoreMetamodel, user);
			return new ResponseEntity<EcoreMetamodel>(ecoreMetamodel, HttpStatus.OK);
		} catch (BusinessException e) {
			return new ResponseEntity<EcoreMetamodel>(HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	@RequestMapping(value = "/{id_ecoreMetamodel}", method = RequestMethod.DELETE)
	public @ResponseBody HttpEntity<String> deleteEcoreMetamodel(@PathVariable("id_ecoreMetamodel") String idEcoreMetamodel) {
		try {
			ecoreMetamodelService.deleteEcoreMetamodel(idEcoreMetamodel, user);
			return new ResponseEntity<String>("EcoreMetamodel deleted", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>("EcoreMetamodel not deleted", HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

}
