-- @atlcompiler atl2006
-- generated by DUALLy
-- Department of Computer Science
-- University of L'Aquila

module AADL_Abeh_aadl;
create OUT : AADL from IN : Abeh_aadl;

-- GENERATED
abstract rule Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::core::Element"
  to
    leftSide : AADL!"core::NamedElement" (
      name <- rightSide.name
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule AadlSpec_SoftwareArchiteture extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::core::SoftwareArchitecture"
  to
    leftSide : AADL!"core::AadlSpec" (
      systemType <- AADL!SystemType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      subprogramImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!SubprogramImpl)
      ),
      threadGroupType <- AADL!ThreadGroupType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      processType <- AADL!ProcessType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      aadlPackage <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!Group)
      ),
      subprogramType <- AADL!SubprogramType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      processImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ProcessImpl)
      ),
      threadType <- AADL!ThreadType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      threadGroupImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadGroupImpl)
      ),
      systemImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!SystemImpl)
      ),
      deviceType <- AADL!DeviceType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      dataImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataImpl)
      ),
      dataType <- AADL!DataType.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      deviceImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DeviceImpl)
      ),
      threadImpl <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadImpl)
      )
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SystemImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemImpl"
  to
    leftSide : AADL!"component::SystemImpl" (
      connections <- leftSide2,
      properties <- leftSide3,
      subcomponents <- leftSide1,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      compType <- rightSide.type.first()
    ),
    leftSide1 : AADL!"component::SystemSubcomponents" (
      systemSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!SystemSubcomponent)
      ),
      dataSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataSubcomponent)
      ),
      processSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ProcessSubcomponent)
      ),
      deviceSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DeviceSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      ),
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataImpl"
  to
    leftSide : AADL!"component::DataImpl" (
      compType <- rightSide.type.first(),
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      subcomponents <- leftSide1,
      connections <- leftSide2,
      properties <- leftSide3
    ),
    leftSide1 : AADL!"component::DataSubcomponents" (
      dataSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      ),
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ProcessImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessImpl"
  to
    leftSide : AADL!"component::ProcessImpl" (
      properties <- leftSide3,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      connections <- leftSide2,
      subcomponents <- leftSide1,
      compType <- rightSide.type.first()
    ),
    leftSide1 : AADL!"component::ProcessSubcomponents" (
      threadGroupSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadGroupSubcomponent)
      ),
      dataSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataSubcomponent)
      ),
      threadSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      ),
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ThreadImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadImpl"
  to
    leftSide : AADL!"component::ThreadImpl" (
      properties <- leftSide3,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      subcomponents <- leftSide1,
      connections <- leftSide2,
      compType <- rightSide.type.first()
    ),
    leftSide1 : AADL!"component::ThreadSubcomponents" (
      dataSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      ),
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SubprogramImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramImpl"
  to
    leftSide : AADL!"component::SubprogramImpl" (
      connections <- leftSide2,
      properties <- leftSide3,
      compType <- rightSide.type.first(),
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      ),
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule "ThreadGroupImpl " extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupImpl"
  to
    leftSide : AADL!"component::ThreadGroupImpl" (
      subcomponents <- leftSide1,
      properties <- leftSide3,
      connections <- leftSide2,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      compType <- rightSide.type.first()
    ),
    leftSide1 : AADL!"component::ThreadGroupSubcomponents" (
      threadSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadSubcomponent)
      ),
      dataSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataSubcomponent)
      ),
      threadGroupSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadGroupSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      ),
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      ),
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DeviceImpl extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceImpl"
  to
    leftSide : AADL!"component::DeviceImpl" (
      connections <- leftSide2,
      properties <- leftSide3,
      compType <- rightSide.type.first(),
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      subcomponents <- leftSide1
    ),
    leftSide1 : AADL!"component::DeviceSubcomponents" (
      threadSubcomponent <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadSubcomponent)
      )
    ),
    leftSide2 : AADL!"connection::Connections" (
      eventConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventConnection)
      ),
      parameterConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!ParameterConnection)
      ),
      dataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataConnection)
      ),
      eventDataConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataConnection)
      ),
      dataAccessConnection <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccessConnection)
      )
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SystemSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemSubcomponent"
  to
    leftSide : AADL!"component::SystemSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataSubcomponent"
  to
    leftSide : AADL!"component::DataSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ThreadSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadSubcomponent"
  to
    leftSide : AADL!"component::ThreadSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ThreadGroupSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupSubcomponent"
  to
    leftSide : AADL!"component::ThreadGroupSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ProcessSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessSubcomponent"
  to
    leftSide : AADL!"component::ProcessSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SubprogramSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramSubcomponent"
  to
    leftSide : AADL!"component::SubprogramSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DeviceSubcomponent extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceSubcomponent"
  to
    leftSide : AADL!"component::DeviceSubcomponent" (
      properties <- leftSide3
    ),
    leftSide3 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ThreadType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadType"
  to
    leftSide : AADL!"component::ThreadType" (
      features <- leftSide1,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      properties <- leftSide2
    ),
    leftSide1 : AADL!"feature::ThreadFeatures" (
      dataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataPort)
      ),
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      ),
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      ),
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SystemType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemType"
  to
    leftSide : AADL!"component::SystemType" (
      features <- leftSide1,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      properties <- leftSide2
    ),
    leftSide1 : AADL!"feature::SystemFeatures" (
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      ),
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      ),
      dataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataPort)
      ),
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DeviceType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceType"
  to
    leftSide : AADL!"component::DeviceType" (
      features <- leftSide1,
      properties <- leftSide2,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      )
    ),
    leftSide1 : AADL!"feature::DeviceFeatures" (
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      ),
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      dataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataPort)
      ),
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataType"
  to
    leftSide : AADL!"component::DataType" (
      features <- leftSide1,
      properties <- leftSide2,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      )
    ),
    leftSide1 : AADL!"feature::DataFeatures" (
      subprogram <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!Subprogram)
      ),
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ProcessType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessType"
  to
    leftSide : AADL!"component::ProcessType" (
      features <- leftSide1,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      properties <- leftSide2
    ),
    leftSide1 : AADL!"feature::ProcessFeatures" (
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      dataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataPort)
      ),
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      ),
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      ),
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule SubprogramType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramType"
  to
    leftSide : AADL!"component::SubprogramType" (
      features <- leftSide1,
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      properties <- leftSide2
    ),
    leftSide1 : AADL!"feature::SubprogramFeatures" (
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      ),
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      ),
      parameter <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!Parameter)
      ),
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ThreadGroupType extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupType"
  to
    leftSide : AADL!"component::ThreadGroupType" (
      annexSubclause <- rightSide.behavior->select(e |
        e.oclIsKindOf(Abeh_aadl!StateDiagram)
      ),
      features <- leftSide1,
      properties <- leftSide2
    ),
    leftSide1 : AADL!"feature::ThreadGroupFeatures" (
      portGroup <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!PortGroup)
      ),
      eventDataPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventDataPort)
      ),
      dataAccess <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!DataAccess)
      ),
      eventPort <- rightSide.subElement->select(e |
        e.oclIsKindOf(Abeh_aadl!EventPort)
      )
    ),
    leftSide2 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataConnection extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataConnection"
  to
    leftSide : AADL!"connection::DataConnection" (
      dstContext <- rightSide.toContext,
      src <- rightSide.from,
      srcContext <- rightSide.fromContext,
      dst <- rightSide.to,
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule ParameterConnection extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::connection::ParameterConnection"
  to
    leftSide : AADL!"connection::ParameterConnection" (
      dstContext <- rightSide.toContext,
      dst <- rightSide.to,
      src <- rightSide.from,
      srcContext <- rightSide.fromContext,
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataAccessConnection extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataAccessConnection"
  to
    leftSide : AADL!"connection::DataAccessConnection" (
      dstContext <- rightSide.toContext,
      src <- rightSide.from,
      srcContext <- rightSide.fromContext,
      dst <- rightSide.to,
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule EventConnection extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventConnection"
  to
    leftSide : AADL!"connection::EventConnection" (
      srcContext <- rightSide.fromContext,
      dstContext <- rightSide.toContext,
      dst <- rightSide.to,
      src <- rightSide.from,
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule EventDataConnection extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventDataConnection"
  to
    leftSide : AADL!"connection::EventDataConnection" (
      dst <- rightSide.to,
      srcContext <- rightSide.fromContext,
      src <- rightSide.from,
      dstContext <- rightSide.toContext,
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule EventDataPort extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::EventDataPort"
  to
    leftSide : AADL!"feature::EventDataPort" (
      direction <- thisModule.getInterfaceDirection1(rightSide.direction),
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule EventPort extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::EventPort"
  to
    leftSide : AADL!"feature::EventPort" (
      direction <- thisModule.getInterfaceDirection1(rightSide.direction),
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataAccess extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::DataAccess"
  to
    leftSide : AADL!"feature::DataAccess" (
      properties <- leftSide1,
      direction <- thisModule.getInterfaceDirection1(rightSide.direction)
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule DataPort extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::DataPort"
  to
    leftSide : AADL!"feature::DataPort" (
      properties <- leftSide1,
      direction <- thisModule.getInterfaceDirection1(rightSide.direction)
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule PortGroup extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::PortGroup"
  to
    leftSide : AADL!"feature::PortGroup" (
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Parameter extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::Parameter"
  to
    leftSide : AADL!"feature::Parameter" (
      direction <- thisModule.getInterfaceDirection1(rightSide.direction),
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule Subprogram extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::feature::Subprogram"
  to
    leftSide : AADL!"feature::Subprogram" (
      properties <- leftSide1
    ),
    leftSide1 : AADL!"property::Properties" (
      propertyAssociation <- rightSide.properties
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule BehaviorState_InitialState extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::InitialState"
  to
    leftSide : AADL!"behavior::BehaviorState"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule BehaviorState_FinalState extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::FinalState"
  to
    leftSide : AADL!"behavior::BehaviorState"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule BehaviorAnnex_StateDiagram extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::StateDiagram"
  to
    leftSide : AADL!"behavior::BehaviorAnnex" (
      state <- rightSide.ownedState,
      transition <- rightSide.ownedTransition,
      value <- rightSide.description
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule BehaviorTransition_Transition {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::Transition"
  to
    leftSide : AADL!"behavior::BehaviorTransition" (
      label <- rightSide.label,
      src <- rightSide.source,
      dst <- rightSide.target
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule BehaviorState_State extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::State"
  to
    leftSide : AADL!"behavior::BehaviorState" (
      incoming <- rightSide.incoming,
      outgoing <- rightSide.outgoing
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule PropertyAssociation_Property extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::core::Property"
  to
    leftSide : AADL!"property::PropertyAssociation"
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED
rule AadlPackage_Group extends Names {
  from
    rightSide : Abeh_aadl!"Abeh_aadl::core::Group"
  to
    leftSide : AADL!"core::AadlPackage" (
      aadlPublic <- leftSide1
    ),
    leftSide1 : AADL!"core::AadlPublic" (
      threadType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadType)
      ),
      threadImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadImpl)
      ),
      subprogramImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!SubprogramImpl)
      ),
      systemType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!SystemType)
      ),
      deviceImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!DeviceImpl)
      ),
      threadGroupImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadGroupImpl)
      ),
      processType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ProcessType)
      ),
      deviceType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!DeviceType)
      ),
      threadGroupType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ThreadGroupType)
      ),
      dataType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!DataType)
      ),
      processImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!ProcessImpl)
      ),
      dataImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!DataImpl)
      ),
      systemImpl <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!SystemImpl)
      ),
      subprogramType <- rightSide.members->select(e |
        e.oclIsKindOf(Abeh_aadl!SubprogramType)
      )
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = rightSide, target = leftSide});
  }
}

-- GENERATED by IdPreservationHOT
helper def: traces : Sequence(TupleType(source : OclAny, target : OclAny)) =
  Sequence {};

-- GENERATED by IdPreservationHOT & modified
endpoint rule finish() {
}
