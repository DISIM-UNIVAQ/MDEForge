-- @atlcompiler atl2006
-- generated by DUALLy
-- Department of Computer Science
-- University of L'Aquila

module AADL_Abeh_aadl;
create OUT : Abeh_aadl from IN : AADL;

-- GENERATED
rule AadlSpec_SoftwareArchitecture extends Names {
  from
    leftSide : AADL!"core::AadlSpec"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::core::SoftwareArchitecture" (
      subElement <- leftSide.threadGroupImpl,
      subElement <- leftSide.processImpl,
      subElement <- leftSide.aadlPackage,
      subElement <- leftSide.threadImpl,
      properties <- leftSide.propertySet,
      subElement <- leftSide.deviceImpl,
      subElement <- leftSide.systemImpl,
      subElement <- leftSide.subprogramImpl,
      subElement <- leftSide.dataImpl
    ),
    rightSide1 : Abeh_aadl!"Abeh_aadl::core::TypesSpecification" (
      types <- leftSide.threadGroupType,
      types <- leftSide.processType,
      types <- leftSide.threadType,
      types <- leftSide.deviceType,
      types <- leftSide.systemType,
      types <- leftSide.dataType,
      types <- leftSide.subprogramType
    )
  do {
    thisModule.rightSide1__AadlSpec_SoftwareArchitecture <- rightSide1;
    thisModule.rightSide__AadlSpec_SoftwareArchitecture <- rightSide;

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
abstract rule Names {
  from
    leftSide : AADL!"core::NamedElement"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::core::Element" (
      name <- leftSide.name
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataImpl extends Names {
  from
    leftSide : AADL!"component::DataImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataImpl" (
      type <- leftSide.compType,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.subcomponents.oclIsUndefined() then
        leftSide.subcomponents.dataSubcomponent
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SubprogramImpl extends Names {
  from
    leftSide : AADL!"component::SubprogramImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramImpl" (
      type <- leftSide.compType,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DeviceImpl extends Names {
  from
    leftSide : AADL!"component::DeviceImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceImpl" (
      type <- leftSide.compType,
      subElement <- if not leftSide.subcomponents.oclIsUndefined() then
        leftSide.subcomponents.dataSubcomponent
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadImpl extends Names {
  from
    leftSide : AADL!"component::ThreadImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadImpl" (
      type <- leftSide.compType,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.subcomponents.oclIsUndefined() then
        leftSide.subcomponents.dataSubcomponent
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadGroupImpl extends Names {
  from
    leftSide : AADL!"component::ThreadGroupImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupImpl" (
      type <- leftSide.compType,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ProcessImpl extends Names {
  from
    leftSide : AADL!"component::ProcessImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessImpl" (
      type <- leftSide.compType,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.subcomponents.oclIsUndefined() then
        leftSide.subcomponents.getSubcomponentsProcess()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SystemImpl extends Names {
  from
    leftSide : AADL!"component::SystemImpl"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemImpl" (
      type <- leftSide.compType,
      subElement <- if not leftSide.modes.oclIsUndefined() then
        leftSide.modes
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.connections.oclIsUndefined() then
        leftSide.connections.getConnections()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.subcomponents.oclIsUndefined() then
        leftSide.subcomponents.getSubcomponentsSystem()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataType extends Names {
  from
    leftSide : AADL!"component::DataType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataType" (
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.subprogram
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule " SubprogramType" extends Names {
  from
    leftSide : AADL!"component::SubprogramType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramType" (
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeaturesSub()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DeviceType extends Names {
  from
    leftSide : AADL!"component::DeviceType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceType" (
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeatures()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadType extends Names {
  from
    leftSide : AADL!"component::ThreadType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadType" (
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeatures()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadGroupType extends Names {
  from
    leftSide : AADL!"component::ThreadGroupType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupType" (
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeatures()
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule " ProcessType" extends Names {
  from
    leftSide : AADL!"component::ProcessType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessType" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeatures()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SystemType extends Names {
  from
    leftSide : AADL!"component::SystemType"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemType" (
      subElement <- if not leftSide.features.oclIsUndefined() then
        leftSide.features.getFeatures()
      else
        Sequence {}
      endif,
      behavior <- if not leftSide.annexSubclause.oclIsUndefined() then
        leftSide.annexSubclause
      else
        Sequence {}
      endif,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SystemSubcomponent extends Names {
  from
    leftSide : AADL!"component::SystemSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SystemSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataSubcomponent extends Names {
  from
    leftSide : AADL!"component::DataSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DataSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadSubcomponent extends Names {
  from
    leftSide : AADL!"component::ThreadSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ThreadGroupSubcomponent extends Names {
  from
    leftSide : AADL!"component::ThreadGroupSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ThreadGroupSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ProcessSubcomponent extends Names {
  from
    leftSide : AADL!"component::ProcessSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::ProcessSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule SubprogramSubcomponent extends Names {
  from
    leftSide : AADL!"component::SubprogramSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::SubprogramSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DeviceSubcomponent extends Names {
  from
    leftSide : AADL!"component::DeviceSubcomponent"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::component::DeviceSubcomponent" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Subprogram extends Names {
  from
    leftSide : AADL!"feature::Subprogram"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::Subprogram" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule PortGroup extends Names {
  from
    leftSide : AADL!"feature::PortGroup"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::PortGroup" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      direction <- thisModule.getInterfaceDirection(leftSide.direction)
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule Parameter extends Names {
  from
    leftSide : AADL!"feature::Parameter"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::Parameter" (
      direction <- thisModule.getInterfaceDirection(leftSide.direction),
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule AadlPackage_Group extends Names {
  from
    leftSide : AADL!"core::AadlPackage"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::core::Group" (
      members <- Abeh_aadl!Type.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      ),
      members <- Abeh_aadl!Component.allInstancesFrom('OUT')->select(e |
        e.refImmediateComposite().oclIsUndefined()
      )
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule PropertyAssociation_Property extends Names {
  from
    leftSide : AADL!"property::PropertyAssociation"
    (
      not leftSide.isElement()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::core::Property" (
      value <- leftSide.propertyValue.first().__xmiID__
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule PropertySet_Group extends Names {
  from
    leftSide : AADL!"property::PropertySet"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::core::Group" (
      members <- leftSide.propertyDefinition
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule BehaviorState_InitialState {
  from
    leftSide : AADL!"behavior::BehaviorState"
    (
      leftSide.TypeStateInitial()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::InitialState" (
      name <- leftSide.name,
      incoming <- leftSide.incoming,
      outgoing <- leftSide.outgoing
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule BehaviorState_FinalState {
  from
    leftSide : AADL!"behavior::BehaviorState"
    (
      leftSide.TypeStateFinal()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::FinalState" (
      incoming <- leftSide.incoming,
      name <- leftSide.name,
      outgoing <- leftSide.outgoing
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ParameterConnection extends Names {
  from
    leftSide : AADL!"connection::ParameterConnection"
    (
      not leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::ParameterConnection" (
      to <- leftSide.dst,
      fromContext <- leftSide.srcContext,
      toContext <- leftSide.dstContext,
      from <- leftSide.src,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule ParameterConnection extends Names {
  from
    leftSide : AADL!"connection::ParameterConnection"
    (
      leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::ParameterConnection" (
      from <- leftSide.src,
      toContext <- leftSide.dstContext,
      fromContext <- leftSide.srcContext,
      to <- leftSide.dst,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataAccessConnection extends Names {
  from
    leftSide : AADL!"connection::DataAccessConnection"
    (
      not leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataAccessConnection" (
      to <- leftSide.dst,
      fromContext <- leftSide.srcContext,
      toContext <- leftSide.dstContext,
      from <- leftSide.src,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataAccessConnection extends Names {
  from
    leftSide : AADL!"connection::DataAccessConnection"
    (
      leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataAccessConnection" (
      fromContext <- leftSide.srcContext,
      from <- leftSide.src,
      to <- leftSide.dst,
      toContext <- leftSide.dstContext,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventConnection extends Names {
  from
    leftSide : AADL!"connection::EventConnection"
    (
      not leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventConnection" (
      to <- leftSide.dst,
      toContext <- leftSide.dstContext,
      from <- leftSide.srcContext,
      fromContext <- leftSide.srcContext,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventConnection extends Names {
  from
    leftSide : AADL!"connection::EventConnection"
    (
      leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventConnection" (
      toContext <- leftSide.dstContext,
      fromContext <- leftSide.srcContext,
      from <- leftSide.src,
      to <- leftSide.dst,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventDataConnection extends Names {
  from
    leftSide : AADL!"connection::EventDataConnection"
    (
      not leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventDataConnection" (
      fromContext <- leftSide.srcContext,
      to <- leftSide.dst,
      toContext <- leftSide.dstContext,
      from <- leftSide.src,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventDataConnection extends Names {
  from
    leftSide : AADL!"connection::EventDataConnection"
    (
      leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::EventDataConnection" (
      from <- leftSide.src,
      to <- leftSide.dst,
      fromContext <- leftSide.srcContext,
      toContext <- leftSide.dstContext,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataConnection extends Names {
  from
    leftSide : AADL!"connection::DataConnection"
    (
      not leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataConnection" (
      fromContext <- leftSide.srcContext,
      to <- leftSide.dst,
      toContext <- leftSide.dstContext,
      from <- leftSide.src,
      properties <- rightSide1,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    ),
    rightSide1 : Abeh_aadl!"Abeh_aadl::core::Property" (
      value <- leftSide.timing.toString(),
      name <- 'timing',
      type <- #string
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataConnection extends Names {
  from
    leftSide : AADL!"connection::DataConnection"
    (
      leftSide.isComposed()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::connection::DataConnection" (
      toContext <- leftSide.dstContext,
      to <- leftSide.dst,
      fromContext <- leftSide.srcContext,
      from <- leftSide.src,
      properties <- rightSide1,
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    ),
    rightSide1 : Abeh_aadl!"Abeh_aadl::core::Property" (
      value <- leftSide.timing.toString(),
      type <- #string,
      name <- 'timing'
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule BehaviorState_State {
  from
    leftSide : AADL!"behavior::BehaviorState"
    (
      not leftSide.TypeStateFinal() and not leftSide.TypeStateInitial()
    )
  to
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::State" (
      incoming <- leftSide.incoming,
      outgoing <- leftSide.outgoing,
      name <- leftSide.name
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule BehaviorAnnex_StateDiagram extends Names {
  from
    leftSide : AADL!"behavior::BehaviorAnnex"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::StateDiagram" (
      ownedTransition <- leftSide.transition,
      ownedState <- leftSide.state,
      description <- leftSide.value
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule BehaviorTransition_Transition {
  from
    leftSide : AADL!"behavior::BehaviorTransition"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::stateDiagramMM::Transition" (
      label <- leftSide.label
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventPort extends Names {
  from
    leftSide : AADL!"feature::EventPort"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::EventPort" (
      direction <- thisModule.getInterfaceDirection(leftSide.direction),
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule EventDataPort extends Names {
  from
    leftSide : AADL!"feature::EventDataPort"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::EventDataPort" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      direction <- thisModule.getInterfaceDirection(leftSide.direction)
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataAccess extends Names {
  from
    leftSide : AADL!"feature::DataAccess"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::DataAccess" (
      direction <- thisModule.getInterfaceDirection(leftSide.direction),
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED
rule DataPort extends Names {
  from
    leftSide : AADL!"feature::DataPort"
  to
    rightSide : Abeh_aadl!"Abeh_aadl::feature::DataPort" (
      properties <- if not leftSide.properties.oclIsUndefined() then
        leftSide.properties.getProperty()
      else
        Sequence {}
      endif,
      direction <- thisModule.getInterfaceDirection(leftSide.direction)
    )
  do {

    -- GENERATED by IdPreservationHOT
    thisModule.traces <- thisModule.traces.including(Tuple {source = leftSide, target = rightSide});
  }
}

-- GENERATED ::: Global
helper def: rightSide1__AadlSpec_SoftwareArchitecture : OclAny =
  OclUndefined;

-- GENERATED ::: Global
helper def: rightSide__AadlSpec_SoftwareArchitecture : OclAny =
  OclUndefined;

-- GENERATED by IdPreservationHOT
helper def: traces : Sequence(TupleType(source : OclAny, target : OclAny)) =
  Sequence {};

-- GENERATED by IdPreservationHOT
endpoint rule setTraces() {
  do {
    for(e in thisModule.traces) {
      e.target.setElementIDbyRefType('ElementRefXMI', e.source.getElementIDbyRefType('ElementRefXMI'));
    }
  }
}
