-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : mtl from IN : mtl;

helper def : inElements : Set(mtl!"ecore::EObject") = mtl!"ecore::EObject".allInstancesFrom('IN');

rule Module {
 from s : mtl!Module (thisModule.inElements->includes(s))
 to t : mtl!Module (
 name <- s.name,
 nsURI <- s.nsURI,
 nsPrefix <- s.nsPrefix,
 deprecated <- s.deprecated,
 startHeaderPosition <- s.startHeaderPosition,
 endHeaderPosition <- s.endHeaderPosition,
 eAnnotations <- s.eAnnotations,
 eFactoryInstance <- s.eFactoryInstance,
 eClassifiers <- s.eClassifiers,
 eSubpackages <- s.eSubpackages,
 documentation <- s.documentation,
 input <- s.input,
 extends <- s.extends,
 imports <- s.imports,
 ownedModuleElement <- s.ownedModuleElement)
}

rule TemplateExpression {
 from s : mtl!TemplateExpression (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(mtl!TemplateExpression)
 else false endif)
 to t : mtl!TemplateExpression (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType)
}

rule Block {
 from s : mtl!Block (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(mtl!Block)
 else false endif)
 to t : mtl!Block (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body)
}

rule InitSection {
 from s : mtl!InitSection (thisModule.inElements->includes(s))
 to t : mtl!InitSection (
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 variable <- s.variable)
}

rule Template {
 from s : mtl!Template (thisModule.inElements->includes(s))
 to t : mtl!Template (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 deprecated <- s.deprecated,
 main <- s.main,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 documentation <- s.documentation,
 overrides <- s.overrides,
 parameter <- s.parameter,
 guard <- s.guard,
 post <- s.post)
}

rule TemplateInvocation {
 from s : mtl!TemplateInvocation (thisModule.inElements->includes(s))
 to t : mtl!TemplateInvocation (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 super <- s.super,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 definition <- s.definition,
 argument <- s.argument,
 before <- s.before,
 after <- s.after,
 each <- s.each)
}

rule Query {
 from s : mtl!Query (thisModule.inElements->includes(s))
 to t : mtl!Query (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 deprecated <- s.deprecated,
 eAnnotations <- s.eAnnotations,
 documentation <- s.documentation,
 parameter <- s.parameter,
 expression <- s.expression,
 type <- s.type)
}

rule QueryInvocation {
 from s : mtl!QueryInvocation (thisModule.inElements->includes(s))
 to t : mtl!QueryInvocation (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 definition <- s.definition,
 argument <- s.argument)
}

rule ProtectedAreaBlock {
 from s : mtl!ProtectedAreaBlock (thisModule.inElements->includes(s))
 to t : mtl!ProtectedAreaBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 marker <- s.marker)
}

rule ForBlock {
 from s : mtl!ForBlock (thisModule.inElements->includes(s))
 to t : mtl!ForBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 loopVariable <- s.loopVariable,
 iterSet <- s.iterSet,
 before <- s.before,
 each <- s.each,
 after <- s.after,
 guard <- s.guard)
}

rule IfBlock {
 from s : mtl!IfBlock (thisModule.inElements->includes(s))
 to t : mtl!IfBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 ifExpr <- s.ifExpr,
 "else" <- s."else",
 elseIf <- s.elseIf)
}

rule LetBlock {
 from s : mtl!LetBlock (thisModule.inElements->includes(s))
 to t : mtl!LetBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 elseLet <- s.elseLet,
 "else" <- s."else",
 letVariable <- s.letVariable)
}

rule FileBlock {
 from s : mtl!FileBlock (thisModule.inElements->includes(s))
 to t : mtl!FileBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 openMode <- s.openMode,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 fileUrl <- s.fileUrl,
 uniqId <- s.uniqId,
 charset <- s.charset)
}

rule TraceBlock {
 from s : mtl!TraceBlock (thisModule.inElements->includes(s))
 to t : mtl!TraceBlock (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 modelElement <- s.modelElement)
}

rule Macro {
 from s : mtl!Macro (thisModule.inElements->includes(s))
 to t : mtl!Macro (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 deprecated <- s.deprecated,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 init <- s.init,
 body <- s.body,
 documentation <- s.documentation,
 parameter <- s.parameter,
 type <- s.type)
}

rule MacroInvocation {
 from s : mtl!MacroInvocation (thisModule.inElements->includes(s))
 to t : mtl!MacroInvocation (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 definition <- s.definition,
 argument <- s.argument)
}

rule TypedModel {
 from s : mtl!TypedModel (thisModule.inElements->includes(s))
 to t : mtl!TypedModel (
 takesTypesFrom <- s.takesTypesFrom)
}

rule Comment {
 from s : mtl!Comment (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(mtl!Comment)
 else false endif)
 to t : mtl!Comment (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 eAnnotations <- s.eAnnotations,
 body <- s.body)
}

rule Documentation {
 from s : mtl!Documentation (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(mtl!Documentation)
 else false endif)
 to t : mtl!Documentation (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 eAnnotations <- s.eAnnotations,
 body <- s.body)
}

rule CommentBody {
 from s : mtl!CommentBody (thisModule.inElements->includes(s))
 to t : mtl!CommentBody (
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 value <- s.value)
}

rule ModuleDocumentation {
 from s : mtl!ModuleDocumentation (thisModule.inElements->includes(s))
 to t : mtl!ModuleDocumentation (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 author <- s.author,
 version <- s.version,
 since <- s.since,
 eAnnotations <- s.eAnnotations,
 body <- s.body)
}

rule ModuleElementDocumentation {
 from s : mtl!ModuleElementDocumentation (thisModule.inElements->includes(s))
 to t : mtl!ModuleElementDocumentation (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 eAnnotations <- s.eAnnotations,
 body <- s.body,
 parametersDocumentation <- s.parametersDocumentation)
}

rule ParameterDocumentation {
 from s : mtl!ParameterDocumentation (thisModule.inElements->includes(s))
 to t : mtl!ParameterDocumentation (
 name <- s.name,
 startPosition <- s.startPosition,
 endPosition <- s.endPosition,
 visibility <- s.visibility,
 eAnnotations <- s.eAnnotations,
 body <- s.body)
}

