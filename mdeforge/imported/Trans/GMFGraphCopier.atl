-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

rule Canvas {
 from s : INMODEL!Canvas (thisModule.inElements->includes(s))
 to t : OUTMODEL!Canvas (
 name <- s.name,
 figures <- s.figures,
 nodes <- s.nodes,
 connections <- s.connections,
 compartments <- s.compartments,
 labels <- s.labels)
}

rule FigureGallery {
 from s : INMODEL!FigureGallery (thisModule.inElements->includes(s))
 to t : OUTMODEL!FigureGallery (
 name <- s.name,
 implementationBundle <- s.implementationBundle,
 figures <- s.figures,
 descriptors <- s.descriptors,
 borders <- s.borders,
 layouts <- s.layouts)
}

rule Node {
 from s : INMODEL!Node (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!Node)
 else false endif)
 to t : OUTMODEL!Node (
 name <- s.name,
 resizeConstraint <- s.resizeConstraint,
 affixedParentSide <- s.affixedParentSide,
 figure <- s.figure,
 facets <- s.facets,
 contentPane <- s.contentPane)
}

rule Connection {
 from s : INMODEL!Connection (thisModule.inElements->includes(s))
 to t : OUTMODEL!Connection (
 name <- s.name,
 figure <- s.figure,
 facets <- s.facets)
}

rule Compartment {
 from s : INMODEL!Compartment (thisModule.inElements->includes(s))
 to t : OUTMODEL!Compartment (
 name <- s.name,
 collapsible <- s.collapsible,
 needsTitle <- s.needsTitle,
 figure <- s.figure,
 facets <- s.facets,
 accessor <- s.accessor)
}

rule DiagramLabel {
 from s : INMODEL!DiagramLabel (thisModule.inElements->includes(s))
 to t : OUTMODEL!DiagramLabel (
 name <- s.name,
 resizeConstraint <- s.resizeConstraint,
 affixedParentSide <- s.affixedParentSide,
 elementIcon <- s.elementIcon,
 figure <- s.figure,
 facets <- s.facets,
 contentPane <- s.contentPane,
 accessor <- s.accessor,
 container <- s.container)
}

rule GeneralFacet {
 from s : INMODEL!GeneralFacet (thisModule.inElements->includes(s))
 to t : OUTMODEL!GeneralFacet (
 identifier <- s.identifier,
 data <- s.data)
}

rule AlignmentFacet {
 from s : INMODEL!AlignmentFacet (thisModule.inElements->includes(s))
 to t : OUTMODEL!AlignmentFacet (
 alignment <- s.alignment)
}

rule GradientFacet {
 from s : INMODEL!GradientFacet (thisModule.inElements->includes(s))
 to t : OUTMODEL!GradientFacet (
 direction <- s.direction)
}

rule LabelOffsetFacet {
 from s : INMODEL!LabelOffsetFacet (thisModule.inElements->includes(s))
 to t : OUTMODEL!LabelOffsetFacet (
 x <- s.x,
 y <- s.y)
}

rule DefaultSizeFacet {
 from s : INMODEL!DefaultSizeFacet (thisModule.inElements->includes(s))
 to t : OUTMODEL!DefaultSizeFacet (
 defaultSize <- s.defaultSize)
}

rule FigureDescriptor {
 from s : INMODEL!FigureDescriptor (thisModule.inElements->includes(s))
 to t : OUTMODEL!FigureDescriptor (
 name <- s.name,
 actualFigure <- s.actualFigure,
 accessors <- s.accessors)
}

rule ChildAccess {
 from s : INMODEL!ChildAccess (thisModule.inElements->includes(s))
 to t : OUTMODEL!ChildAccess (
 accessor <- s.accessor,
 figure <- s.figure)
}

rule FigureRef {
 from s : INMODEL!FigureRef (thisModule.inElements->includes(s))
 to t : OUTMODEL!FigureRef (
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 figure <- s.figure)
}

rule Label {
 from s : INMODEL!Label (thisModule.inElements->includes(s))
 to t : OUTMODEL!Label (
 name <- s.name,
 text <- s.text,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children)
}

rule LabeledContainer {
 from s : INMODEL!LabeledContainer (thisModule.inElements->includes(s))
 to t : OUTMODEL!LabeledContainer (
 name <- s.name,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children)
}

rule Rectangle {
 from s : INMODEL!Rectangle (thisModule.inElements->includes(s))
 to t : OUTMODEL!Rectangle (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children)
}

rule RoundedRectangle {
 from s : INMODEL!RoundedRectangle (thisModule.inElements->includes(s))
 to t : OUTMODEL!RoundedRectangle (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 cornerWidth <- s.cornerWidth,
 cornerHeight <- s.cornerHeight,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children)
}

rule Ellipse {
 from s : INMODEL!Ellipse (thisModule.inElements->includes(s))
 to t : OUTMODEL!Ellipse (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children)
}

rule Polyline {
 from s : INMODEL!Polyline (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!Polyline)
 else false endif)
 to t : OUTMODEL!Polyline (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template)
}

rule Polygon {
 from s : INMODEL!Polygon (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!Polygon)
 else false endif)
 to t : OUTMODEL!Polygon (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template)
}

rule ScalablePolygon {
 from s : INMODEL!ScalablePolygon (thisModule.inElements->includes(s))
 to t : OUTMODEL!ScalablePolygon (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template)
}

rule PolylineConnection {
 from s : INMODEL!PolylineConnection (thisModule.inElements->includes(s))
 to t : OUTMODEL!PolylineConnection (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template,
 sourceDecoration <- s.sourceDecoration,
 targetDecoration <- s.targetDecoration)
}

rule PolylineDecoration {
 from s : INMODEL!PolylineDecoration (thisModule.inElements->includes(s))
 to t : OUTMODEL!PolylineDecoration (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template)
}

rule PolygonDecoration {
 from s : INMODEL!PolygonDecoration (thisModule.inElements->includes(s))
 to t : OUTMODEL!PolygonDecoration (
 name <- s.name,
 outline <- s.outline,
 fill <- s.fill,
 lineWidth <- s.lineWidth,
 lineKind <- s.lineKind,
 xorFill <- s.xorFill,
 xorOutline <- s.xorOutline,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 template <- s.template)
}

rule CustomAttribute {
 from s : INMODEL!CustomAttribute (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomAttribute (
 name <- s.name,
 value <- s.value,
 directAccess <- s.directAccess,
 multiStatementValue <- s.multiStatementValue)
}

rule FigureAccessor {
 from s : INMODEL!FigureAccessor (thisModule.inElements->includes(s))
 to t : OUTMODEL!FigureAccessor (
 accessor <- s.accessor,
 typedFigure <- s.typedFigure)
}

rule CustomFigure {
 from s : INMODEL!CustomFigure (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!CustomFigure)
 else false endif)
 to t : OUTMODEL!CustomFigure (
 name <- s.name,
 qualifiedClassName <- s.qualifiedClassName,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 attributes <- s.attributes,
 customChildren <- s.customChildren)
}

rule CustomDecoration {
 from s : INMODEL!CustomDecoration (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomDecoration (
 name <- s.name,
 qualifiedClassName <- s.qualifiedClassName,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 attributes <- s.attributes,
 customChildren <- s.customChildren)
}

rule CustomConnection {
 from s : INMODEL!CustomConnection (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomConnection (
 name <- s.name,
 qualifiedClassName <- s.qualifiedClassName,
 layoutData <- s.layoutData,
 layout <- s.layout,
 foregroundColor <- s.foregroundColor,
 backgroundColor <- s.backgroundColor,
 maximumSize <- s.maximumSize,
 minimumSize <- s.minimumSize,
 preferredSize <- s.preferredSize,
 font <- s.font,
 insets <- s.insets,
 border <- s.border,
 location <- s.location,
 size <- s.size,
 children <- s.children,
 attributes <- s.attributes,
 customChildren <- s.customChildren)
}

rule RGBColor {
 from s : INMODEL!RGBColor (thisModule.inElements->includes(s))
 to t : OUTMODEL!RGBColor (
 red <- s.red,
 green <- s.green,
 blue <- s.blue)
}

rule ConstantColor {
 from s : INMODEL!ConstantColor (thisModule.inElements->includes(s))
 to t : OUTMODEL!ConstantColor (
 value <- s.value)
}

rule BasicFont {
 from s : INMODEL!BasicFont (thisModule.inElements->includes(s))
 to t : OUTMODEL!BasicFont (
 faceName <- s.faceName,
 height <- s.height,
 style <- s.style)
}

rule Point {
 from s : INMODEL!Point (thisModule.inElements->includes(s))
 to t : OUTMODEL!Point (
 x <- s.x,
 y <- s.y)
}

rule Dimension {
 from s : INMODEL!Dimension (thisModule.inElements->includes(s))
 to t : OUTMODEL!Dimension (
 dx <- s.dx,
 dy <- s.dy)
}

rule Insets {
 from s : INMODEL!Insets (thisModule.inElements->includes(s))
 to t : OUTMODEL!Insets (
 top <- s.top,
 left <- s.left,
 bottom <- s.bottom,
 right <- s.right)
}

rule BorderRef {
 from s : INMODEL!BorderRef (thisModule.inElements->includes(s))
 to t : OUTMODEL!BorderRef (
 actual <- s.actual)
}

rule LineBorder {
 from s : INMODEL!LineBorder (thisModule.inElements->includes(s))
 to t : OUTMODEL!LineBorder (
 width <- s.width,
 color <- s.color)
}

rule MarginBorder {
 from s : INMODEL!MarginBorder (thisModule.inElements->includes(s))
 to t : OUTMODEL!MarginBorder (
 insets <- s.insets)
}

rule CompoundBorder {
 from s : INMODEL!CompoundBorder (thisModule.inElements->includes(s))
 to t : OUTMODEL!CompoundBorder (
 outer <- s.outer,
 inner <- s.inner)
}

rule CustomBorder {
 from s : INMODEL!CustomBorder (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomBorder (
 qualifiedClassName <- s.qualifiedClassName,
 attributes <- s.attributes)
}

rule CustomLayoutData {
 from s : INMODEL!CustomLayoutData (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomLayoutData (
 qualifiedClassName <- s.qualifiedClassName,
 attributes <- s.attributes)
}

rule GridLayoutData {
 from s : INMODEL!GridLayoutData (thisModule.inElements->includes(s))
 to t : OUTMODEL!GridLayoutData (
 grabExcessHorizontalSpace <- s.grabExcessHorizontalSpace,
 grabExcessVerticalSpace <- s.grabExcessVerticalSpace,
 verticalAlignment <- s.verticalAlignment,
 horizontalAlignment <- s.horizontalAlignment,
 verticalSpan <- s.verticalSpan,
 horizontalSpan <- s.horizontalSpan,
 horizontalIndent <- s.horizontalIndent,
 sizeHint <- s.sizeHint)
}

rule BorderLayoutData {
 from s : INMODEL!BorderLayoutData (thisModule.inElements->includes(s))
 to t : OUTMODEL!BorderLayoutData (
 alignment <- s.alignment,
 vertical <- s.vertical)
}

rule LayoutRef {
 from s : INMODEL!LayoutRef (thisModule.inElements->includes(s))
 to t : OUTMODEL!LayoutRef (
 actual <- s.actual)
}

rule CustomLayout {
 from s : INMODEL!CustomLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!CustomLayout (
 qualifiedClassName <- s.qualifiedClassName,
 attributes <- s.attributes)
}

rule GridLayout {
 from s : INMODEL!GridLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!GridLayout (
 numColumns <- s.numColumns,
 equalWidth <- s.equalWidth,
 margins <- s.margins,
 spacing <- s.spacing)
}

rule BorderLayout {
 from s : INMODEL!BorderLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!BorderLayout (
 spacing <- s.spacing)
}

rule FlowLayout {
 from s : INMODEL!FlowLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!FlowLayout (
 vertical <- s.vertical,
 matchMinorSize <- s.matchMinorSize,
 forceSingleLine <- s.forceSingleLine,
 majorAlignment <- s.majorAlignment,
 minorAlignment <- s.minorAlignment,
 majorSpacing <- s.majorSpacing,
 minorSpacing <- s.minorSpacing)
}

rule XYLayout {
 from s : INMODEL!XYLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!XYLayout ()
}

rule XYLayoutData {
 from s : INMODEL!XYLayoutData (thisModule.inElements->includes(s))
 to t : OUTMODEL!XYLayoutData (
 topLeft <- s.topLeft,
 size <- s.size)
}

rule StackLayout {
 from s : INMODEL!StackLayout (thisModule.inElements->includes(s))
 to t : OUTMODEL!StackLayout ()
}

