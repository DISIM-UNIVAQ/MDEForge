-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

rule Mapping {
 from s : INMODEL!Mapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!Mapping (
 nodes <- s.nodes,
 links <- s.links,
 diagram <- s.diagram,
 appearanceStyles <- s.appearanceStyles,
 audits <- s.audits,
 metrics <- s.metrics)
}

rule ChildReference {
 from s : INMODEL!ChildReference (thisModule.inElements->includes(s))
 to t : OUTMODEL!ChildReference (
 containmentFeature <- s.containmentFeature,
 childrenFeature <- s.childrenFeature,
 compartment <- s.compartment,
 ownedChild <- s.ownedChild,
 referencedChild <- s.referencedChild)
}

rule TopNodeReference {
 from s : INMODEL!TopNodeReference (thisModule.inElements->includes(s))
 to t : OUTMODEL!TopNodeReference (
 containmentFeature <- s.containmentFeature,
 childrenFeature <- s.childrenFeature,
 ownedChild <- s.ownedChild)
}

rule NodeMapping {
 from s : INMODEL!NodeMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!NodeMapping (
 domainMetaElement <- s.domainMetaElement,
 domainSpecialization <- s.domainSpecialization,
 domainInitializer <- s.domainInitializer,
 labelMappings <- s.labelMappings,
 relatedDiagrams <- s.relatedDiagrams,
 contextMenu <- s.contextMenu,
 tool <- s.tool,
 appearanceStyle <- s.appearanceStyle,
 diagramNode <- s.diagramNode,
 children <- s.children,
 compartments <- s.compartments)
}

rule CompartmentMapping {
 from s : INMODEL!CompartmentMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!CompartmentMapping (
 compartment <- s.compartment,
 children <- s.children)
}

rule LinkMapping {
 from s : INMODEL!LinkMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!LinkMapping (
 domainMetaElement <- s.domainMetaElement,
 domainSpecialization <- s.domainSpecialization,
 domainInitializer <- s.domainInitializer,
 labelMappings <- s.labelMappings,
 relatedDiagrams <- s.relatedDiagrams,
 containmentFeature <- s.containmentFeature,
 contextMenu <- s.contextMenu,
 tool <- s.tool,
 appearanceStyle <- s.appearanceStyle,
 diagramLink <- s.diagramLink,
 sourceMetaFeature <- s.sourceMetaFeature,
 linkMetaFeature <- s.linkMetaFeature,
 creationConstraints <- s.creationConstraints)
}

rule CanvasMapping {
 from s : INMODEL!CanvasMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!CanvasMapping (
 diagramCanvas <- s.diagramCanvas,
 domainModel <- s.domainModel,
 domainMetaElement <- s.domainMetaElement,
 palette <- s.palette,
 menuContributions <- s.menuContributions,
 toolbarContributions <- s.toolbarContributions)
}

rule LabelMapping {
 from s : INMODEL!LabelMapping (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!LabelMapping)
 else false endif)
 to t : OUTMODEL!LabelMapping (
 readOnly <- s.readOnly,
 diagramLabel <- s.diagramLabel)
}

rule FeatureLabelMapping {
 from s : INMODEL!FeatureLabelMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!FeatureLabelMapping (
 readOnly <- s.readOnly,
 viewPattern <- s.viewPattern,
 editorPattern <- s.editorPattern,
 editPattern <- s.editPattern,
 viewMethod <- s.viewMethod,
 editMethod <- s.editMethod,
 diagramLabel <- s.diagramLabel,
 features <- s.features)
}

rule DesignLabelMapping {
 from s : INMODEL!DesignLabelMapping (thisModule.inElements->includes(s))
 to t : OUTMODEL!DesignLabelMapping (
 readOnly <- s.readOnly,
 diagramLabel <- s.diagramLabel)
}

rule Constraint {
 from s : INMODEL!Constraint (thisModule.inElements->includes(s))
 to t : OUTMODEL!Constraint (
 body <- s.body,
 language <- s.language)
}

rule LinkConstraints {
 from s : INMODEL!LinkConstraints (thisModule.inElements->includes(s))
 to t : OUTMODEL!LinkConstraints (
 sourceEnd <- s.sourceEnd,
 targetEnd <- s.targetEnd)
}

rule ValueExpression {
 from s : INMODEL!ValueExpression (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(INMODEL!ValueExpression)
 else false endif)
 to t : OUTMODEL!ValueExpression (
 body <- s.body,
 language <- s.language)
}

rule FeatureSeqInitializer {
 from s : INMODEL!FeatureSeqInitializer (thisModule.inElements->includes(s))
 to t : OUTMODEL!FeatureSeqInitializer (
 initializers <- s.initializers,
 elementClass <- s.elementClass)
}

rule FeatureValueSpec {
 from s : INMODEL!FeatureValueSpec (thisModule.inElements->includes(s))
 to t : OUTMODEL!FeatureValueSpec (
 body <- s.body,
 language <- s.language,
 feature <- s.feature)
}

rule ReferenceNewElementSpec {
 from s : INMODEL!ReferenceNewElementSpec (thisModule.inElements->includes(s))
 to t : OUTMODEL!ReferenceNewElementSpec (
 feature <- s.feature,
 newElementInitializers <- s.newElementInitializers)
}

rule AuditContainer {
 from s : INMODEL!AuditContainer (thisModule.inElements->includes(s))
 to t : OUTMODEL!AuditContainer (
 id <- s.id,
 name <- s.name,
 description <- s.description,
 audits <- s.audits,
 childContainers <- s.childContainers)
}

rule AuditRule {
 from s : INMODEL!AuditRule (thisModule.inElements->includes(s))
 to t : OUTMODEL!AuditRule (
 name <- s.name,
 description <- s.description,
 id <- s.id,
 severity <- s.severity,
 useInLiveMode <- s.useInLiveMode,
 message <- s.message,
 "rule" <- s."rule",
 target <- s.target)
}

rule DomainElementTarget {
 from s : INMODEL!DomainElementTarget (thisModule.inElements->includes(s))
 to t : OUTMODEL!DomainElementTarget (
 element <- s.element)
}

rule DomainAttributeTarget {
 from s : INMODEL!DomainAttributeTarget (thisModule.inElements->includes(s))
 to t : OUTMODEL!DomainAttributeTarget (
 nullAsError <- s.nullAsError,
 attribute <- s.attribute)
}

rule DiagramElementTarget {
 from s : INMODEL!DiagramElementTarget (thisModule.inElements->includes(s))
 to t : OUTMODEL!DiagramElementTarget (
 element <- s.element)
}

rule NotationElementTarget {
 from s : INMODEL!NotationElementTarget (thisModule.inElements->includes(s))
 to t : OUTMODEL!NotationElementTarget (
 element <- s.element)
}

rule MetricContainer {
 from s : INMODEL!MetricContainer (thisModule.inElements->includes(s))
 to t : OUTMODEL!MetricContainer (
 metrics <- s.metrics)
}

rule MetricRule {
 from s : INMODEL!MetricRule (thisModule.inElements->includes(s))
 to t : OUTMODEL!MetricRule (
 name <- s.name,
 description <- s.description,
 key <- s.key,
 lowLimit <- s.lowLimit,
 highLimit <- s.highLimit,
 "rule" <- s."rule",
 target <- s.target)
}

rule AuditedMetricTarget {
 from s : INMODEL!AuditedMetricTarget (thisModule.inElements->includes(s))
 to t : OUTMODEL!AuditedMetricTarget (
 metric <- s.metric)
}

