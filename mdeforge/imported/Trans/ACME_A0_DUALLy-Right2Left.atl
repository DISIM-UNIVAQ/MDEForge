-- @atlcompiler atl2006
-- generated by DUALLy
-- Department of Computer Science
-- University of L'Aquila

module ACME_A0;
create OUT : ACME from IN : UML2;

-- GENERATED
rule Model_ACMEFile_System {
  from
    s_15 : UML2!Model
  to
    t_16 : ACME!System (
      name <- s_15.name
    ),
    t_18 : ACME!ACMEFile (
      entries <- t_16
    )
  do {
    
  }
}

-- GENERATED
rule componentInstance_SAcomponent {
  from
    s_7 : UML2!Component
    (
      s_7.isStereotypeApplied('SAComponent')
    )
  to
    t_9 : ACME!ComponentInstance (
      ports <- s_7.provided,
      system <- s_7.namespace,
      name <- s_7.name,
      ports <- s_7.required,
      property <- s_7.ownedAttribute
    )
  do {
    
  }
}

-- GENERATED
rule componentType_component {
  from
    s_4 : UML2!Component
    (
      not s_4.isPROStereotypeApplied()
    )
  to
    t_10 : ACME!ComponentType (
      property <- s_4.ownedAttribute,
      name <- s_4.name,
      ports <- s_4.provided,
      ports <- s_4.required
    )
  do {
    
  }
}

-- GENERATED
rule connector_SAconnector {
  from
    s_5 : UML2!Component
    (
      s_5.isStereotypeApplied('SAConnector')
    )
  to
    t_8 : ACME!Connector (
      roles <- s_5.required,
      name <- s_5.name,
      property <- s_5.ownedAttribute,
      roles <- s_5.provided,
      system <- s_5.namespace
    )
  do {
    
  }
}

-- GENERATED
rule property_UmlProperty {
  from
    s_2 : UML2!Property
    (
      not s_2.isPROStereotypeApplied()
    )
  to
    t_12 : ACME!Property (
      name <- s_2.name
    )
  do {
    
  }
}

-- GENERATED
rule connector_SAchannel {
  from
    s_14 : UML2!Dependency
    (
      s_14.isStereotypeApplied('SAChannel')
    )
  to
    t_21 : ACME!Connector (
      name <- s_14.name,
      roles <- t_20,
      system <- s_14.namespace,
      roles <- t_22
    ),
    t_20 : ACME!Role (
      name <- s_14.name
    ),
    t_22 : ACME!Role (
      name <- s_14.name
    ),
    t_19 : ACME!Attachment (
      role <- t_20,
      system <- s_14.namespace,
      port <- s_14.source
    ),
    t_17 : ACME!Attachment (
      system <- s_14.namespace,
      role <- t_22,
      port <- s_14.target
    )
  do {
    
  }
}

-- GENERATED
rule Port_UMLinterface {
  from
    i : UML2!Interface
    (
      not i.isPROStereotypeApplied() and not UML2!Component.allInstancesFrom('IN')->select(ex |
        ex.getAppliedStereotypes().first().name = 'SAComponent'
      )->select(e |
        e.getRequireds()->includes(i) or e.getProvideds()->includes(i)
      ).isEmpty()
    )
  to
    t_13 : ACME!Port (
      property <- i.ownedAttribute,
      name <- i.name
    )
  do {
    
  }
}

-- GENERATED
rule Role_UMLinterface {
  from
    i : UML2!Interface
    (
      not i.isPROStereotypeApplied() and not UML2!Component.allInstancesFrom('IN')->select(ex |
        ex.getAppliedStereotypes().first().name = 'SAConnector'
      )->select(e |
        e.getRequireds()->includes(i) or e.getProvideds()->includes(i)
      ).isEmpty()
    )
  to
    t_11 : ACME!Role (
      property <- i.ownedAttribute,
      name <- i.name
    )
  do {
    
  }
}

-- GENERATED ::: This rule initializes the helpers containing the definitions of the target UML profile
entrypoint rule initialization() {
  do {
    thisModule.fromProfileName <- 'A0';
  }
}

-- GENERATED ::: This helper holds the name of the source profile
helper def: fromProfileName : String =
  '';

-- GENERATED ::: Returns true if the profile 'name' is applied to this Package
helper context UML2!Package def: isProfileApplied(name : String) : Boolean =
  not self.getAppliedProfile(name).oclIsUndefined();

-- GENERATED ::: Returns true if the stereotype 'name' is applied to this Element
helper context UML2!Element def: isStereotypeApplied(name : String) : Boolean =
  not self.getAppliedStereotypes()->select(p |
    p.name = name
  ).isEmpty();

-- GENERATED ::: Returns true if any stereotype is applied to this Element
helper context UML2!"uml::Element" def: isPROStereotypeApplied() : Boolean =
  not self.getAppliedStereotypes()->select(p |
    p.getProfile().name = thisModule.fromProfileName
  ).isEmpty();
