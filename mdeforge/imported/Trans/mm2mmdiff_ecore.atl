-- @atlcompiler atl2006
-- Generated by: $Id$
module Ecore2Copy;

create OUT : OUTMODEL from IN : ECORE;

helper def : inElements : Set(ECORE!EObject) = ECORE!EObject.allInstancesFrom('IN');

helper def: MainPackage: OUTMODEL!EPackage=
	OclUndefined
	;

 
helper def: DifferenceElementType: OUTMODEL!EClass=
	OclUndefined
	;
helper def: DifferenceModel: OUTMODEL!EClass=
	OclUndefined
	;

helper def: DifferenceElement: OUTMODEL!EClass=
	OclUndefined
	;

rule  setDifferenceModel(cl: OUTMODEL!EClass){
	do{
		cl.toString().println();
		thisModule.DifferenceModel.eStructuralFeatures<-thisModule.DifferenceModel.eStructuralFeatures.append(cl);
	}
}

rule setPackage(iclass: Sequence(ECORE!EObject)){
	do{
		--thisModule.MainPackage.toString().println();
		thisModule.MainPackage.eClassifiers<-iclass;	
	}
}




entrypoint rule createPackage() {
	to t: ECORE!EClass(
		name<-'DifferenceModel',
--eSuperTypes<-ECORE!EClass,
		eStructuralFeatures<-refer
	),
	 t1:  ECORE!EClass (
		name<-'DifferenceElement'--,
		--	eSuperTypes<-Set{ECORE!EModelElement}
	) ,
	refer :   ECORE!EReference(
		name<-'differenceElements',
		containment<-true,
		eType<-t1,
		lowerBound<-0,
		upperBound<--1
	)
	do{
	 	thisModule.DifferenceModel<-t;
	 thisModule.DifferenceElementType<-t1;	
	thisModule.DifferenceElement<-t1;
	 }
}

rule EPackage {
    from s : ECORE!EPackage
    to t : ECORE!"ecore::EPackage" (
        name <- s.name+'Diff',
        nsURI <- s.nsURI+'Diff',
        nsPrefix <- s.nsPrefix+'Diff',
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eFactoryInstance <- s.eFactoryInstance,
        eSubpackages <- s.eSubpackages,
        eClassifiers <- s.eClassifiers) 

		do{
 	thisModule.MainPackage<-t;
	thisModule.setPackage(thisModule.DifferenceModel);
	thisModule.setPackage(thisModule.DifferenceElement	 );	
		 }
	
}



rule EClass {
    from s : ECORE!EClass(s.name<>'EModelElement' )
    to t : ECORE!EClass (
        name <- s.name,
       instanceClassName <- s.instanceClassName,
      instanceTypeName <- s.instanceTypeName,
        "abstract" <- s."abstract",
        interface <- s.interface,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters,
        eSuperTypes <- s.eSuperTypes->select(e | e.ePackage = s.ePackage),
        eOperations <- s.eOperations,
        eStructuralFeatures <- s.eStructuralFeatures,
        eGenericSuperTypes <- s.eGenericSuperTypes
		)
		,
		 
	 t1 : ECORE!EClass (
		 name <- 'Added' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <-t
		 --eStructuralFeatures<-refer
		 ),
	
	t2 : ECORE!EClass (
		 name <- 'Deleted' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <-t,
		 eStructuralFeatures <- Sequence{t5})
		 ,
	 t3 : ECORE!EClass (
		 name <- 'Changed' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <- t,
		 eStructuralFeatures <- Sequence{t4,t6}),
		 
	 t4	: ECORE!EReference (
	 	name <- 'updatedElement',
		lowerBound<-0,
		upperBound<--1,
		eType <- t),
		
	 t5	: ECORE!EReference (
	 	name <- 'applicationElement',
		eType <- ECORE!EObject),
		
	 t6	: ECORE!EReference (
	 	name <- 'applicationElement',
		eType <- ECORE!EObject)
		
	do
	 {
	thisModule.setPackage(Sequence{t,t1,t2,t3});
	--	t1.name.toString().println();
-- thisModule.setDifferenceModel(t1);
	}
}

rule EModelElement {
    from s : ECORE!EClass(s.name='EModelElement')
    to t : ECORE!EClass (
        name <- s.name,
       instanceClassName <- s.instanceClassName,
      instanceTypeName <- s.instanceTypeName,
        "abstract" <- s."abstract",
        interface <- s.interface,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters,
        eSuperTypes <-Set{ s.eSuperTypes->select(e | e.ePackage = s.ePackage),thisModule.DifferenceElementType},
        eOperations <- s.eOperations,
        eStructuralFeatures <- s.eStructuralFeatures,
        eGenericSuperTypes <- s.eGenericSuperTypes
		)
		,
		 
	 t1 : ECORE!EClass (
		 name <- 'Added' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <-t
		 --eStructuralFeatures<-refer
		 ),
	
	t2 : ECORE!EClass (
		 name <- 'Deleted' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <-t,
		 eStructuralFeatures <- Sequence{t5})
		 ,
	 t3 : ECORE!EClass (
		 name <- 'Changed' + s.name,
		 instanceTypeName <- s.instanceTypeName,
		 eSuperTypes <- t,
		 eStructuralFeatures <- Sequence{t4,t6}),
		 
	 t4	: ECORE!EReference (
	 	name <- 'updatedElement',
		lowerBound<-0,
		upperBound<--1,
		eType <- t),
		
	 t5	: ECORE!EReference (
	 	name <- 'applicationElement',
		eType <- ECORE!EObject),
		
	 t6	: ECORE!EReference (
	 	name <- 'applicationElement',
		eType <- ECORE!EObject)
		
	do
	 {
	thisModule.setPackage(Sequence{t,t1,t2,t3});
	--	t1.name.toString().println();
-- thisModule.setDifferenceModel(t1);
	}
}


rule EDataType {
    from s : ECORE!EDataType-- (s.oclIsTypeOf(ECORE!"ecore::EDataType"))
    to t : ECORE!EDataType (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters
		)
}




rule ETypeParameter {
    from s : ECORE!"ecore::ETypeParameter"
    to t : ECORE!"ecore::ETypeParameter" (
        name <- s.name,
        eAnnotations <- s.eAnnotations,
        eBounds <- s.eBounds)
}

--rule EGenericType {
--    from s : ECORE!"ecore::EGenericType"
--    to t : ECORE!"ecore::EGenericType" (
--        eUpperBound <- s.eUpperBound.debug(s.eClassifier.toString()+'-'+s.refImmediateComposite().name.toString()+'-'+s.refImmediateComposite().refImmediateComposite().name.toString()+'-'+s.refImmediateComposite().refImmediateComposite().refImmediateComposite().name.toString()),
--        eTypeArguments <- s.eTypeArguments,
--        eLowerBound <- s.eLowerBound,
--        eTypeParameter <- s.eTypeParameter,
--        eClassifier <- s.eClassifier
--)
--}

--rule EClassifier_Wildcard {
--    from s : ECORE!"ecore::EClassifier_Wildcard
--    to t : ECORE!"ecore::EClassifier_Wildcard" 
--}

rule EAttribute {
    from s : ECORE!"ecore::EAttribute"
    to t : ECORE!"ecore::EAttribute" (
        name <- s.name,
        ordered <- s.ordered,
        unique <- s.unique,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        iD <- s.iD,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eType <- s.eType,
       eGenericType <- s.eGenericType
		)
}

--rule EStructuralFeature_Wildcard {
--    from s : ECORE!"ecore::EStructuralFeature_Wildcard" (thisModule.inElements->includes(s))
--    to t : ECORE!"ecore::EStructuralFeature_Wildcard" 
--}

rule EReference {
    from s : ECORE!"ecore::EReference"(s.name<>'eType')
    to t : ECORE!"ecore::EReference" (
        name <- s.name,
        ordered <- s.ordered,
        unique <- s.unique,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        containment <- s.containment,
        resolveProxies <- s.resolveProxies,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eType <- s.eType,
        eGenericType <- s.eGenericType,
        eOpposite <- s.eOpposite,
        eKeys <- s.eKeys)
}
rule EType {
    from s : ECORE!"ecore::EReference"(s.name='eType')
    to t : ECORE!"ecore::EReference" (
        name <- s.name,
        ordered <- s.ordered,
        unique <- s.unique,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        containment <- s.containment,
        resolveProxies <- s.resolveProxies,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eType <- ECORE!EObject,
        eGenericType <- s.eGenericType,
        eOpposite <- s.eOpposite,
        eKeys <- s.eKeys)
}
rule EEnum {
    from s : ECORE!EEnum (s.oclIsTypeOf(ECORE!EEnum))
    to t : ECORE!EEnum (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters,
       eLiterals <- s.eLiterals
		)
}

rule EEnumLiteral {
    from s : ECORE!EEnumLiteral (s.oclIsTypeOf(ECORE!EEnumLiteral))
    to t : ECORE!EEnumLiteral (
        name <- s.name,
        value <- s.value,
        instance <- s.instance,
        literal <- s.literal,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e))
		)
	do {
		thisModule.resolveTemp(s.refImmediateComposite(), 't').eLiterals <- t;
	}
}

rule copyEAnnotation(s: ECORE!"ecore::EAnnotation") {
    to t : ECORE!"ecore::EAnnotation" (
        source <- s.source,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        details <- s.details->collect(e | thisModule.copyEStringToStringMapEntry(e)),
        contents <- s.contents,
        references <- s.references)
	do {
		t;
	}
}

rule copyEStringToStringMapEntry(s : ECORE!"ecore::EStringToStringMapEntry") { 
	to t : ECORE!"ecore::EStringToStringMapEntry" (
        key <- s.key,
        value <- s.value)
	do {
		t;
	}
}








