-- @atlcompiler atl2006
-- Generated by: $Id$
module Ecore2Copy;

create OUT : ECORE from IN : ECORE;

rule EClass {
    from s : ECORE!EClass
    to t : ECORE!EClass (
        name <- s.name,
--        instanceClassName <- s.instanceClassName,
--        instanceTypeName <- s.instanceTypeName,
        "abstract" <- s."abstract",
        interface <- s.interface,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters,
        eSuperTypes <- s.eSuperTypes->select(e | e.ePackage = s.ePackage),
--        eOperations <- s.eOperations,
        eStructuralFeatures <- s.eStructuralFeatures
--        eGenericSuperTypes <- s.eGenericSuperTypes
		)
}

rule EPackage {
    from s : ECORE!"ecore::EPackage"
    to t : ECORE!"ecore::EPackage" (
        name <- s.name,
        nsURI <- s.nsURI,
        nsPrefix <- s.nsPrefix,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eFactoryInstance <- s.eFactoryInstance,
        eSubpackages <- s.eSubpackages,
        eClassifiers <- s.eClassifiers) 
}

rule EDataType {
    from s : ECORE!"ecore::EDataType" (s.oclIsTypeOf(ECORE!"ecore::EDataType"))
    to t : ECORE!"ecore::EDataType" (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters)
}

rule ETypeParameter {
    from s : ECORE!"ecore::ETypeParameter"
    to t : ECORE!"ecore::ETypeParameter" (
        name <- s.name,
        eAnnotations <- s.eAnnotations,
        eBounds <- s.eBounds)
}

--rule EGenericType {
--    from s : ECORE!"ecore::EGenericType"
--    to t : ECORE!"ecore::EGenericType" (
--        eUpperBound <- s.eUpperBound,
--        eTypeArguments <- s.eTypeArguments,
--        eLowerBound <- s.eLowerBound,
--        eTypeParameter <- s.eTypeParameter
----        eClassifier <- s.eClassifier
--)
--}

--rule EClassifier_Wildcard {
--    from s : ECORE!"ecore::EClassifier_Wildcard
--    to t : ECORE!"ecore::EClassifier_Wildcard" 
--}

rule EAttribute {
    from s : ECORE!"ecore::EAttribute"
    to t : ECORE!"ecore::EAttribute" (
        name <- s.name,
        ordered <- s.ordered,
        unique <- s.unique,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
--        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        iD <- s.iD,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eType <- s.eType
--        eGenericType <- s.eGenericType
		)
}

--rule EStructuralFeature_Wildcard {
--    from s : ECORE!"ecore::EStructuralFeature_Wildcard" (thisModule.inElements->includes(s))
--    to t : ECORE!"ecore::EStructuralFeature_Wildcard" 
--}

rule EReference {
    from s : ECORE!"ecore::EReference"
    to t : ECORE!"ecore::EReference" (
        name <- s.name,
        ordered <- s.ordered,
        unique <- s.unique,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        containment <- s.containment,
        resolveProxies <- s.resolveProxies,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eType <- s.eType,
--        eGenericType <- s.eGenericType,
        eOpposite <- s.eOpposite,
        eKeys <- s.eKeys)
}

rule EEnum {
    from s : ECORE!EEnum (s.oclIsTypeOf(ECORE!EEnum))
    to t : ECORE!EEnum (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        eTypeParameters <- s.eTypeParameters
--        eLiterals <- s.eLiterals
		)
}

rule EEnumLiteral {
    from s : ECORE!EEnumLiteral (s.oclIsTypeOf(ECORE!EEnumLiteral))
    to t : ECORE!EEnumLiteral (
        name <- s.name,
        value <- s.value,
--        instance <- s.instance,
        literal <- s.literal,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e))
		)
	do {
		thisModule.resolveTemp(s.refImmediateComposite(), 't').eLiterals <- t;
	}
}

rule copyEAnnotation(s: ECORE!"ecore::EAnnotation") {
    to t : ECORE!"ecore::EAnnotation" (
        source <- s.source,
        eAnnotations <- s.eAnnotations->collect(e | thisModule.copyEAnnotation(e)),
        details <- s.details->collect(e | thisModule.copyEStringToStringMapEntry(e)),
        contents <- s.contents,
        references <- s.references)
	do {
		t;
	}
}

rule copyEStringToStringMapEntry(s : ECORE!"ecore::EStringToStringMapEntry") { 
	to t : ECORE!"ecore::EStringToStringMapEntry" (
        key <- s.key,
        value <- s.value)
	do {
		t;
	}
}




