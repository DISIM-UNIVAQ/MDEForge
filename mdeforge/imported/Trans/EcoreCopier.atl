-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : Ecore from IN : Ecore;

helper def : inElements : Set(Ecore!"ecore::EObject") = Ecore!"ecore::EObject".allInstancesFrom('IN');

rule EAttribute {
 from s : Ecore!EAttribute (thisModule.inElements->includes(s))
 to t : Ecore!EAttribute (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 changeable <- s.changeable,
 volatile <- s.volatile,
 transient <- s.transient,
 defaultValueLiteral <- s.defaultValueLiteral,
 unsettable <- s.unsettable,
 "derived" <- s."derived",
 iD <- s.iD,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType)
}

rule EAnnotation {
 from s : Ecore!EAnnotation (thisModule.inElements->includes(s))
 to t : Ecore!EAnnotation (
 source <- s.source,
 eAnnotations <- s.eAnnotations,
 details <- s.details,
 contents <- s.contents,
 references <- s.references)
}

rule EClass {
 from s : Ecore!EClass (thisModule.inElements->includes(s))
 to t : Ecore!EClass (
 name <- s.name,
 instanceClassName <- s.instanceClassName,
 instanceTypeName <- s.instanceTypeName,
 "abstract" <- s."abstract",
 interface <- s.interface,
 eAnnotations <- s.eAnnotations,
 eTypeParameters <- s.eTypeParameters,
 eSuperTypes <- s.eSuperTypes,
 eOperations <- s.eOperations,
 eStructuralFeatures <- s.eStructuralFeatures,
 eGenericSuperTypes <- s.eGenericSuperTypes)
}

rule EDataType {
 from s : Ecore!EDataType (
 if thisModule.inElements->includes(s) then
 s.oclIsTypeOf(Ecore!EDataType)
 else false endif)
 to t : Ecore!EDataType (
 name <- s.name,
 instanceClassName <- s.instanceClassName,
 instanceTypeName <- s.instanceTypeName,
 serializable <- s.serializable,
 eAnnotations <- s.eAnnotations,
 eTypeParameters <- s.eTypeParameters)
}

rule EEnum {
 from s : Ecore!EEnum (thisModule.inElements->includes(s))
 to t : Ecore!EEnum (
 name <- s.name,
 instanceClassName <- s.instanceClassName,
 instanceTypeName <- s.instanceTypeName,
 serializable <- s.serializable,
 eAnnotations <- s.eAnnotations,
 eTypeParameters <- s.eTypeParameters,
 eLiterals <- s.eLiterals)
}

rule EEnumLiteral {
 from s : Ecore!EEnumLiteral (thisModule.inElements->includes(s))
 to t : Ecore!EEnumLiteral (
 name <- s.name,
 value <- s.value,
 instance <- s.instance,
 literal <- s.literal,
 eAnnotations <- s.eAnnotations)
}

rule EPackage {
 from s : Ecore!EPackage (thisModule.inElements->includes(s))
 to t : Ecore!EPackage (
 name <- s.name,
 nsURI <- s.nsURI,
 nsPrefix <- s.nsPrefix,
 eAnnotations <- s.eAnnotations,
 eFactoryInstance <- s.eFactoryInstance,
 eClassifiers <- s.eClassifiers,
 eSubpackages <- s.eSubpackages)
}

rule EReference {
 from s : Ecore!EReference (thisModule.inElements->includes(s))
 to t : Ecore!EReference (
 name <- s.name,
 ordered <- s.ordered,
 unique <- s.unique,
 lowerBound <- s.lowerBound,
 upperBound <- s.upperBound,
 changeable <- s.changeable,
 volatile <- s.volatile,
 transient <- s.transient,
 defaultValueLiteral <- s.defaultValueLiteral,
 unsettable <- s.unsettable,
 "derived" <- s."derived",
 containment <- s.containment,
 resolveProxies <- s.resolveProxies,
 eAnnotations <- s.eAnnotations,
 eType <- s.eType,
 eGenericType <- s.eGenericType,
 eOpposite <- s.eOpposite,
 eKeys <- s.eKeys)
}

rule EStringToStringMapEntry {
 from s : Ecore!EStringToStringMapEntry (thisModule.inElements->includes(s))
 to t : Ecore!EStringToStringMapEntry (
 key <- s.key,
 value <- s.value)
}

rule EGenericType {
 from s : Ecore!EGenericType (thisModule.inElements->includes(s))
 to t : Ecore!EGenericType (
 eUpperBound <- s.eUpperBound,
 eTypeArguments <- s.eTypeArguments,
 eLowerBound <- s.eLowerBound,
 eTypeParameter <- s.eTypeParameter,
 eClassifier <- s.eClassifier)
}

rule ETypeParameter {
 from s : Ecore!ETypeParameter (thisModule.inElements->includes(s))
 to t : Ecore!ETypeParameter (
 name <- s.name,
 eAnnotations <- s.eAnnotations,
 eBounds <- s.eBounds)
}

